<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MB.WinBase</name>
    </assembly>
    <members>
        <member name="T:MB.WinBase.AbstractClientRuleQuery">
            <summary>
            客户端查询分析对象。
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IClientRuleQueryBase">
            <summary>
            查询分析必须要实现的接口。
            主要征对带有编辑对象的数据浏览窗口
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IClientRuleConfig">
            <summary>
            UI 层界面对应配置处理相关。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IClientRuleConfig.RuleInstanceName">
            <summary>
            当前业务类实体的名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IClientRuleConfig.ClientLayoutAttribute">
            <summary>
            业务类配置信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IClientRuleConfig.ModuleTreeNodeInfo">
            <summary>
            模块配置树节点信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IClientRuleConfig.UIRuleXmlConfigInfo">
            <summary>
            UI配置信息
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IClientRuleConfig.OpennedState">
            <summary>
            模块打开时需要的一些参数
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRuleQueryBase.GetDefaultFilterParams">
            <summary>
            获取设置的默认条件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRuleQueryBase.GetDynamicGroupQueryData(MB.Util.Model.DynamicGroupSetting,MB.Util.Model.QueryParameterInfo[])">
            <summary>
            获取动态聚组的
            </summary>
            <param name="setting"></param>
            <param name="filterParams"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRuleQueryBase.GetObjectAsDataSet(System.Int32,MB.Util.Model.QueryParameterInfo[])">
            <summary>
            以DataSet 的格式获取数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRuleQueryBase.GetObjects(System.Int32,MB.Util.Model.QueryParameterInfo[])">
            <summary>
            以集合的方式获取数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRuleQueryBase.GetCustomSummaryColValues(System.String[],MB.Util.Model.QueryParameterInfo[])">
            <summary>
            往自定义汇总列中填写汇总值，并且返回填好值的集合
            </summary>
            <param name="colsToGetValue">需要填写值的集合</param>
            <param name="queryParams">自定义汇总时客户端传入的条件</param>
            <returns>最终结果</returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRuleQueryBase.GetFilterParamsIfOpenFromTask(System.Object)">
            <summary>
            如果是从TASK列表打开菜单的，可以设定默认的查询条件以默认加载条件
            </summary>
            <param name="state">打开时注入的参数，参数类型由提供方和调用方自行约定</param>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.IFace.IClientRuleQueryBase.MainDataTypeInDoc">
            <summary>
            主表数据在单据中的数据类型。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IClientRuleQueryBase.DefaultFilterMessage">
            <summary>
            默认显示的查询提示信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IClientRuleQueryBase.CurrentQueryBehavior">
            <summary>
            当前数据查询行为
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IClientRuleQueryBase.FilterParams">
            <summary>
            对过滤条件进行二次过滤
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IClientRuleQueryBase.ReSetContextMenu">
            <summary>
            自定义扩展UI RULE关联网格的右键菜单
            当这个属性被赋值以后，基类设置的网格菜单会清空
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IClientRuleQueryBase.CurrentFilterParams">
            <summary>
            当前查询条件
            </summary>
        </member>
        <member name="M:MB.WinBase.AbstractClientRuleQuery.#ctor">
            <summary>
            客户端查询RULE的抽象
            </summary>
        </member>
        <member name="M:MB.WinBase.AbstractClientRuleQuery.GetDefaultFilterParams">
            <summary>
            获取默认设置的缺省参数。  
            对于查询分析对象默认情况下都不显示数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRuleQuery.GetFilterParamsIfOpenFromTask(System.Object)">
            <summary>
            如果是从TASK列表打开菜单的，可以设定默认的查询条件以默认加载条件
            </summary>
            <param name="state">打开时注入的参数，参数类型由提供方和调用方自行约定</param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRuleQuery.GetCustomSummaryColValues(System.String[],MB.Util.Model.QueryParameterInfo[])">
            <summary>
            往自定义汇总列中填写汇总值，并且返回填好值的集合
            </summary>
            <param name="colsToGetValue">需要填写值的集合</param>
            <param name="queryParams">自定义汇总时客户端传入的条件</param>
            <returns>汇总完以后的结果列的集合</returns>
        </member>
        <member name="P:MB.WinBase.AbstractClientRuleQuery.MainDataTypeInDoc">
            <summary>
            主表对象在单据中的数据类型。
            </summary>
        </member>
        <member name="P:MB.WinBase.AbstractClientRuleQuery.DefaultFilterMessage">
            <summary>
            获取默认数值的查询提示信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.AbstractClientRuleQuery.CurrentQueryBehavior">
            <summary>
            当前查询行为
            </summary>
        </member>
        <member name="P:MB.WinBase.AbstractClientRuleQuery.ReSetContextMenu">
            <summary>
            重新绑定右键菜单项
            </summary>
        </member>
        <member name="P:MB.WinBase.AbstractClientRuleQuery.ClientLayoutAttribute">
            <summary>
            客户端布局配置属性
            </summary>
        </member>
        <member name="P:MB.WinBase.AbstractClientRuleQuery.ModuleTreeNodeInfo">
            <summary>
            模块对应节点信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.AbstractClientRuleQuery.UIRuleXmlConfigInfo">
            <summary>
            对应XML 文件的配置信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.AbstractClientRuleQuery.RuleInstanceName">
            <summary>
            当前业务类实例的名称。
            </summary>
        </member>
        <member name="T:MB.WinBase.AbstractClientRuleQuery`1">
            <summary>
            客户端查询分析对象，带上客户端代理,以满足动态聚组异步查询的需求
            </summary>
            <typeparam name="TChannel"></typeparam>
        </member>
        <member name="M:MB.WinBase.AbstractClientRuleQuery`1.CreateServerRuleProxy">
            <summary>
            WCF 服务客户端代理对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:MB.WinBase.AppEnvironmentSetting">
            <summary>
            当前应用程序的
            </summary>
        </member>
        <member name="M:MB.WinBase.AppEnvironmentSetting.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.WinBase.AppEnvironmentSetting.ConvertSystemParamValue(System.String)">
            <summary>
            转换系统参数值。
            </summary>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.AppEnvironmentSetting.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="P:MB.WinBase.AppEnvironmentSetting.CurrentLoginUserInfo">
            <summary>
            当前登录用户的信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.AppEnvironmentSetting.CurrentUserPrivs">
            <summary>
            当前登录用户的权限信息。
            </summary>
        </member>
        <member name="T:MB.WinBase.ApplicationExceptionTerminate">
            <summary>
            终止系统产生的异常，并以消息的形式提示给用户。
            </summary>
        </member>
        <member name="M:MB.WinBase.ApplicationExceptionTerminate.ExceptionTerminate(System.Exception)">
            <summary>
            终止系统产生的异常，并以消息的形式提示给用户。
            </summary>
            <param name="ex">异常</param>
        </member>
        <member name="M:MB.WinBase.ApplicationExceptionTerminate.ExceptionTerminate(System.Exception,System.String)">
            <summary>
            终止系统产生的异常，并以消息的形式提示给用户。
            </summary>
            <param name="ex">异常</param>
            <param name="expectMsgOnError">出错时期待提示的消息。</param>
        </member>
        <member name="P:MB.WinBase.ApplicationExceptionTerminate.DefaultInstance">
            <summary>
            默认缺省的实例。
            </summary>
        </member>
        <member name="T:MB.WinBase.AppMessenger">
             <summary>
            UI 消息器
             </summary>
        </member>
        <member name="M:MB.WinBase.AppMessenger.Subscribe(System.String,System.Action)">
            <summary>
            注册一个接收消息的回调方法。
            </summary>
            <param name="message"></param>
            <param name="callback"></param>
        </member>
        <member name="M:MB.WinBase.AppMessenger.Subscribe``1(System.String,System.Action{``0})">
            <summary>
            注册一个接收消息的回调方法。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
            <param name="callback"></param>
        </member>
        <member name="M:MB.WinBase.AppMessenger.Publish(System.String,System.Object)">
            <summary>
            通知所有注册的消息.
            </summary>
            <param name="messageKey"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:MB.WinBase.AppMessenger.Publish(System.String)">
            <summary>
            通知所有注册的消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:MB.WinBase.AppMessenger.DefaultMessenger">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="T:MB.WinBase.AppMessenger.MessageToActionsMap">
            <summary>
            实现消息发送
            </summary>
        </member>
        <member name="M:MB.WinBase.AppMessenger.MessageToActionsMap.AddAction(System.String,System.Object,System.Reflection.MethodInfo,System.Type)">
            <summary>
            把行为注册到集合中。
            </summary>
            <param name="message"></param>
            <param name="target"></param>
            <param name="method"></param>
            <param name="actionType"></param>
        </member>
        <member name="M:MB.WinBase.AppMessenger.MessageToActionsMap.GetActions(System.String)">
            <summary>
            根据消息的名称获取所有行为
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AppMessenger.MessageToActionsMap.TryGetParameterType(System.String,System.Type@)">
            <summary>
            获取行为注册的参数类型 .
            </summary>
            <param name="message"></param>
            <param name="parameterType"></param>
            <returns></returns>
        </member>
        <member name="T:MB.WinBase.AppMessenger.WeakAction">
            <summary>
            行为实现类.
            </summary>
        </member>
        <member name="M:MB.WinBase.AppMessenger.WeakAction.#ctor(System.Object,System.Reflection.MethodInfo,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="target"></param>
            <param name="method"></param>
            <param name="parameterType"></param>
        </member>
        <member name="M:MB.WinBase.AppMessenger.WeakAction.CreateAction">
            <summary>
            Delegate
            </summary>
        </member>
        <member name="T:MB.WinBase.Atts.AttributeConfigHelper">
            <summary>
            AttributeConfigHelper: 提供基于Attribute 属性配置的公共方法。
            </summary>
        </member>
        <member name="M:MB.WinBase.Atts.AttributeConfigHelper.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.WinBase.Atts.AttributeConfigHelper.GetEditControlTypeAtt(System.Object)">
            <summary>
            
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Atts.AttributeConfigHelper.GetClientRuleSettingAtt(MB.WinBase.IFace.IClientRuleConfig)">
            <summary>
            根据业务类获取对应的业务类属性配置信息。
            </summary>
            <param name="clientRule">客户端业务</param>
            <returns>业务类的配置信息。</returns>
        </member>
        <member name="M:MB.WinBase.Atts.AttributeConfigHelper.GetModuleInvokeConfig(System.Type)">
            <summary>
            获取模块的配置信息。
            </summary>
            <param name="clientRuleType"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Atts.AttributeConfigHelper.GetModuleRejectCommands(System.Type)">
            <summary>
            获取模块不支持的操作菜单项。
            </summary>
            <param name="clientRuleType"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Atts.AttributeConfigHelper.GetSimpleDataFilterControl(System.Type)">
            <summary>
            根据业务类获取对应的业务类定制数据助手查询信息。
            add by aifang 2012-5-22
            </summary>
            <param name="clientRuleType"></param>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.Atts.AttributeConfigHelper.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="T:MB.WinBase.Atts.EditControlTypeAttribute">
            <summary>
            动态控件创建绑定配置
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.EditControlTypeAttribute.FormCtlType">
            <summary>
            绑定编辑的控件类型。
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.EditControlTypeAttribute.GridColumnEditCtlType">
            <summary>
            网格编辑列对应的控件类型。
            </summary>
        </member>
        <member name="T:MB.WinBase.Atts.MappingAttribute">
            <summary>
            Rest调用方法Url配置
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.MappingAttribute.MethodUrl">
            <summary>
            Rest调用方法Url
            </summary>
        </member>
        <member name="T:MB.WinBase.Atts.ModuleInvokeConfigAttribute">
            <summary>
            模块调用配置。
            </summary>
        </member>
        <member name="M:MB.WinBase.Atts.ModuleInvokeConfigAttribute.#ctor(MB.WinBase.Common.UICommandType,System.Type)">
            <summary>
            模块操作配置
            </summary>
            <param name="optType">操作类型</param>
            <param name="uiViewType">窗口浏览类型</param>
        </member>
        <member name="P:MB.WinBase.Atts.ModuleInvokeConfigAttribute.OptType">
            <summary>
            模块调用操作类型。
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.ModuleInvokeConfigAttribute.UIViewType">
            <summary>
            UI 调用的浏览窗口类型。
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.ModuleInvokeConfigAttribute.CreatePars">
            <summary>
            创建参数。
            </summary>
        </member>
        <member name="T:MB.WinBase.Atts.ModuleRejectCommandsAttribute">
            <summary>
            模块拒绝操作的菜单项。
            </summary>
        </member>
        <member name="M:MB.WinBase.Atts.ModuleRejectCommandsAttribute.#ctor(MB.WinBase.Common.UICommandType)">
            <summary>
            配置针对该模块不能进行操作的菜单项。
            </summary>
            <param name="rejectCommands"></param>
        </member>
        <member name="P:MB.WinBase.Atts.ModuleRejectCommandsAttribute.RejectCommands">
            <summary>
            配置针对该模块不能进行操作的菜单项。
            </summary>
        </member>
        <member name="T:MB.WinBase.Atts.RuleClientLayoutAttribute">
            <summary>
            UI 层 FORM 窗口 绑定和显示配置处理相关。
            </summary>
        </member>
        <member name="M:MB.WinBase.Atts.RuleClientLayoutAttribute.#ctor(System.String)">
            <summary>
            创建Form 的控件绑定和显示配置处理。
            默认情况下:
            DataBindingType 通过AutoByCtlName,
            数据传递通过 ModelEntity;
            </summary>
            <param name="uIXmlConfigFile">显示Form 关联对应的XML 配置文件名称。</param>
        </member>
        <member name="M:MB.WinBase.Atts.RuleClientLayoutAttribute.#ctor(System.String,MB.WinBase.Common.GeneralOperateMenus)">
            <summary>
            创建Form 的控件绑定和显示配置处理。
            </summary>
            <param name="uIXmlConfigFile">显示Form 关联对应的XML 配置文件名称。</param>
            <param name="uIDataBindingType">Form 控件绑定创建的方式。</param>
            <param name="communicationDataType">层之间数据传递的类型。</param>
        </member>
        <member name="P:MB.WinBase.Atts.RuleClientLayoutAttribute.UIXmlConfigFile">
            <summary>
            绑定业务对象UI 层 XML 绑定的文件名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.RuleClientLayoutAttribute.GeneralMenus">
            <summary>
            通用操作菜单项。
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.RuleClientLayoutAttribute.UIDataBindingType">
            <summary>
            编辑界面控件绑定的方式。
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.RuleClientLayoutAttribute.CommunicationDataType">
            <summary>
            层之间数据传递的类型。
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.RuleClientLayoutAttribute.DataViewStyle">
            <summary>
            数据浏览的样式。
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.RuleClientLayoutAttribute.DefaultFilter">
            <summary>
             默认数据过滤条件设置。
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.RuleClientLayoutAttribute.EntityKeys">
            <summary>
            实体主键
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.RuleClientLayoutAttribute.LoadType">
            <summary>
            客户端数据加载方式
            add by aifang 2012-08-01
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.RuleClientLayoutAttribute.MessageHeaderKey">
            <summary>
            传递动态列时消息头键值
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.RuleClientLayoutAttribute.IsDynamicGroupEnabled">
            <summary>
            动态聚组的配置信息
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.RuleClientLayoutAttribute.IsCustomFooterSummary">
            <summary>
            是否开启Grid Footer自定义汇总
            </summary>
        </member>
        <member name="T:MB.WinBase.Atts.DefaultDataFilter">
            <summary>
            默认数据过滤条件设置。
            </summary>
        </member>
        <member name="F:MB.WinBase.Atts.DefaultDataFilter.None">
            <summary>
            默认情况下不显示任何数据。
            </summary>
        </member>
        <member name="F:MB.WinBase.Atts.DefaultDataFilter.All">
            <summary>
            显示所有,不做任何设置
            </summary>
        </member>
        <member name="F:MB.WinBase.Atts.DefaultDataFilter.Process">
            <summary>
            显示所有正在处理未提交的数据。
            </summary>
        </member>
        <member name="F:MB.WinBase.Atts.DefaultDataFilter.Today">
            <summary>
            显示当天有变动的数据。
            </summary>
        </member>
        <member name="F:MB.WinBase.Atts.DefaultDataFilter.WithinOfWeek">
            <summary>
            显示一个星期内处理过的数据。
            </summary>
        </member>
        <member name="F:MB.WinBase.Atts.DefaultDataFilter.WithinOfMonth">
            <summary>
            显示一个月内处理过的数据。
            </summary>
        </member>
        <member name="T:MB.WinBase.Atts.ServiceNameAttribute">
            <summary>
            Rest服务名称
            </summary>
        </member>
        <member name="P:MB.WinBase.Atts.ServiceNameAttribute.Name">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="T:MB.WinBase.Atts.SimpleDataFilterControlAttribute">
            <summary>
            模块数据过滤窗口配置
            </summary>
        </member>
        <member name="T:MB.WinBase.Binding.BindingSourceRaiseEventsScope">
            <summary>
            数据源绑定是否需要响应对应事件的处理范围。
            </summary>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceRaiseEventsScope.#ctor(System.Windows.Forms.BindingSource,System.Boolean)">
            <summary>
            数据源绑定是否需要响应对应事件的处理范围。
            </summary>
            <param name="bindingSource">数据源绑定</param>
            <param name="raiseEvents">是否需要响应事件</param>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceRaiseEventsScope.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:MB.WinBase.Binding.ColumnBindingInfo">
            <summary>
            列的绑定信息。
            </summary>
        </member>
        <member name="M:MB.WinBase.Binding.ColumnBindingInfo.#ctor(System.String,MB.WinBase.Common.ColumnPropertyInfo,System.Windows.Forms.Control)">
            <summary>
             construct function...
            </summary>
            <param name="columnName"></param>
            <param name="columnPropertyInfo"></param>
            <param name="bindingControl"></param>
        </member>
        <member name="P:MB.WinBase.Binding.ColumnBindingInfo.ColumnName">
            <summary>
            对应列的名称，如果绑定的是集合那么对应的是Entity 的属性名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Binding.ColumnBindingInfo.ColumnPropertyInfo">
            <summary>
            列的配置描述信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Binding.ColumnBindingInfo.BindingControl">
            <summary>
            对应绑定的控件。
            </summary>
        </member>
        <member name="T:MB.WinBase.Binding.DataBindingOptions">
            <summary>
            控件数据绑定的选项设置。
            </summary>
        </member>
        <member name="F:MB.WinBase.Binding.DataBindingOptions.None">
            <summary>
            没有设置任何选项。
            </summary>
        </member>
        <member name="F:MB.WinBase.Binding.DataBindingOptions.ReadOnly">
            <summary>
            判断是否为只读的方式进行绑定。
            </summary>
        </member>
        <member name="F:MB.WinBase.Binding.DataBindingOptions.Edit">
            <summary>
            当前的绑定可以进行编辑。
            </summary>
        </member>
        <member name="T:MB.WinBase.Binding.BindingSourceHelper">
            <summary>
            数据绑定公共处理相关。
            </summary>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceHelper.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceHelper.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceHelper.CreateBindingList``1(System.Collections.IList)">
            <summary>
            根据泛型IList 返回数据绑定的集合类。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataArray"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceHelper.ClearBindingEditCtl(MB.WinBase.Binding.IDataBindingProvider)">
            <summary>
            清除输入框的值。
            </summary>
            <param name="dataBindingProvider"></param>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceHelper.ResetLableCaption(MB.WinBase.Binding.IDataBindingProvider,System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo})">
            <summary>
            重新设置绑定的Lable 描述。    
            </summary>
            <param name="dataBindingProvider"></param>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceHelper.CreateDataBinding(MB.WinBase.IFace.IClientRule,MB.WinBase.Binding.BindingSourceEx,MB.WinBase.Binding.IDataBindingProvider,MB.WinBase.Binding.DataBindingOptions)">
            <summary>
            编辑界面的数据绑定分3步来完成 
            1,先绑定ComboBox 的数据源
            2,绑定点击选择数据的数据源
            3,控件编辑绑定
            </summary>
            <param name="clientBaseRule"></param>
            <param name="dataSource"></param>
            <param name="ctls"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceHelper.CreateDataBinding(MB.WinBase.Binding.BindingSourceEx,System.String,MB.WinBase.Binding.IDataBindingProvider,MB.WinBase.Binding.DataBindingOptions)">
            <summary>
            编辑界面的数据绑定分3步来完成 
            1,先绑定ComboBox 的数据源
            2,绑定点击选择数据的数据源
            3,控件编辑绑定
            </summary>
            <param name="dataSource"></param>
            <param name="xmlFileName"></param>
            <param name="dataBindingProvider"></param>
            <param name="bindingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceHelper.CreateDataBinding(System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo},System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnEditCfgInfo},MB.WinBase.Binding.BindingSourceEx,MB.WinBase.Binding.IDataBindingProvider,MB.WinBase.Binding.DataBindingOptions)">
            <summary>
            编辑界面的数据绑定分3步来完成 
            1,先绑定ComboBox 的数据源
            2,绑定点击选择数据的数据源
            3,控件编辑绑定
            </summary>
            <param name="colPropertys"></param>
            <param name="columnEditInfoList"></param>
            <param name="dataSource"></param>
            <param name="dataBindingProvider"></param>
            <param name="bindingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceHelper.ReleaseDataBinding(System.Collections.Generic.List{MB.WinBase.Binding.ColumnBindingInfo})">
            <summary>
            释放所绑定的信息。
            </summary>
            <param name="ctls"></param>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceHelper.SetCtlReadOnly(System.Collections.Generic.List{MB.WinBase.Binding.ColumnBindingInfo},System.Boolean,System.Windows.Forms.Control[])">
            <summary>
            设置当前编辑界面是否为只读状态。
            </summary>
            <param name="bindingCtlList">需要进行设置的控件集合。</param>
            <param name="readOnly">是否设置为只读。</param>
            <param name="exclusiveCtls">排除不进行处理的控件</param>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceHelper.SetCtlByAllowEditStates(System.Collections.Generic.List{MB.WinBase.Binding.ColumnBindingInfo},MB.Util.Model.EntityState,System.Windows.Forms.Control[])">
            <summary>
            根据实体对象的状态改变编辑控件的编辑状态。
            </summary>
            <param name="bindingCtlList"></param>
            <param name="entityState"></param>
            <param name="exclusiveCtls"></param>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceHelper.FillCombox(System.Windows.Forms.Control,System.String,System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnEditCfgInfo},System.Boolean)">
            <summary>
            ComboBox 控件绑定。
            </summary>
            <param name="ctl"></param>
            <param name="propertyName"></param>
            <param name="columnEditInfoList"></param>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceHelper.FillComboxLookUp(System.Windows.Forms.Control,System.String,System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo},System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnEditCfgInfo},System.Boolean)">
            <summary>
             ComboBox 控件绑定(包含编码和名称的 ComboBox 绑定项)
            </summary>
            <param name="ctl"></param>
            <param name="propertyName"></param>
            <param name="columnEditInfoList"></param>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceHelper.FillComboCheckListBox(System.Windows.Forms.Control,System.String,System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo},System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnEditCfgInfo})">
            <summary>
            ComboCheckListBox 数据绑定。
            </summary>
            <param name="ctl"></param>
            <param name="propertyName"></param>
            <param name="editCfgColumns"></param>
            <param name="columnEditInfoList"></param>
        </member>
        <member name="P:MB.WinBase.Binding.BindingSourceHelper.CONTAINER_CONTROLS">
            <summary>
            可以进入进行遍历的容器类型名称。
            在其它地方调用时先要进行判断是否存在这种类型。
            在个性化非通用处理中 增加后要删除掉。
            </summary>
        </member>
        <member name="P:MB.WinBase.Binding.BindingSourceHelper.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="T:MB.WinBase.AbstractClientRule`2">
            <summary>
            连接客户端各界面之间的客户端规则类。
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IClientRule`2">
            <summary>
            客户端逻辑操作控制类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MB.WinBase.IFace.IClientRule">
            <summary>
            客户端逻辑操作控制类。
            没有业务类对应客户端都必须实现该接口，以满足公共框架知道应该调用什么服务类。
            以及对应客户端UI 处理的的策略。（包括 显示绑定的XML 文件，需要客户验证的说明 ）
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IClientRuleEditBase">
            <summary>
            编辑业务类。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRuleEditBase.GetCreateNewEntityIds(System.Int32,System.Int32)">
            <summary>
            批量获取新实体对象的ID。
            </summary>
            <param name="dataInDocType"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRuleEditBase.CreateNewEntityBatch(System.Int32,System.Int32)">
            <summary>
            根据类型批量创建实体对象。
            </summary>
            <param name="dataInDocType"></param>
            <param name="createCount"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRuleEditBase.CreateNewEntity(System.Int32)">
            <summary>
            创建一个新的数据实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRuleEditBase.AddToCache(System.ServiceModel.ICommunicationObject,System.Int32,System.Object,System.Boolean,System.String[])">
            <summary>
            把数据增加数据中间层的Cache 中。
            根据实体的状态决定操作的方式。
            </summary>
            <param name="dataInDocType">在单据中的数据类型,默认为主表的数据。</param>
            <param name="entity">需要增加的实体。</param>
            <param name="propertys">需要增加的该实体的指定属性。</param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRuleEditBase.Flush(System.ServiceModel.ICommunicationObject)">
            <summary>
            提示中间层服务期端执行永久化的操作并清空缓存中的数据。
            特殊说明：在具体的业务需求中需要修改为在保存后返回主表实体对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRuleEditBase.Submit(System.Object,System.Boolean)">
            <summary>
            对象数据提交。
            </summary>
            <param name="entity"></param>
            <param name="cancelSubmit"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRuleEditBase.BusinessFlowSubmit(System.Object,MB.Util.Model.DocOperateType,System.String)">
            <summary>
            业务操作提交
            Submit 提交只是数据进行提交。相应的业务操作提交要执行 BusinessOperateSubmit 操作。
            </summary>
            <param name="entity"></param>
            <param name="operateState"></param>
            <param name="remark"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRuleEditBase.CheckValueIsExists(System.Int32,System.Object,System.String[])">
            <summary>
            根据数据类型检查指定的值在数据库中是否已经存在
            </summary>
            <param name="dataInDocType">需要进行检查的数据类型</param>
            <param name="entity">需要检查的实体对象</param>
            <param name="checkPropertys">需要检查的属性名称</param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRule.RaiseAfterDocStateChanged(System.Object)">
            <summary>
            产生单据状态发生改变的事件。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRule.CreateServerCommunicationObject">
            <summary>
            创建WCF 客户端代理。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRule.RefreshEntity(System.Int32,System.Object)">
            <summary>
            在实体对象保存后可能需要进行一些属性信息的更新，通过该方法来完成。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRule.CreateMainBindList(System.Collections.IList)">
            <summary>
            创建客户端绑定列表。
            </summary>
            <param name="dataList"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRule.ShowDataImport(MB.WinBase.IFace.IViewGridForm,MB.WinBase.Binding.BindingSourceEx)">
            <summary>
            显示数据导入处理窗口。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRule.GetEditObjectByID(System.Int32)">
            <summary>
            通过ID获取可编辑的对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRule.GetEditObjectByKey(System.Object)">
            <summary>
            通过Key值获取可编辑的对象
            </summary>
            <returns></returns>
        </member>
        <member name="E:MB.WinBase.IFace.IClientRule.AfterDocStateChanged">
            <summary>
            单据状态发生改变时产生。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IClientRule.Description">
            <summary>
            单据描述。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IClientRule.BindingSource">
            <summary>
            自定义扩展绑定数据源
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IClientRule`2.CreateServerRuleProxy">
            <summary>
            创建WCF 客户端代理。
            </summary>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.IFace.IClientRule`2.CurrentEditObject">
            <summary>
            当前编辑对象
            </summary>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.Dispose">
            <summary>
            外部用户可直接调用
            </summary>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.GetDefaultFilterParams">
            <summary>
            获取默认设置的
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.#ctor(System.Object)">
            <summary>
            构造函数...
            </summary>
            <param name="mainDataTypeInDoc"></param>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.CreateServerCommunicationObject">
            <summary>
            WCF 服务客户端代理对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.CreateServerRuleProxy">
            <summary>
            WCF 服务客户端代理对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.GetCreateNewEntityIds(System.Int32,System.Int32)">
            <summary>
            批量获取新创建的实体对象ID.
            </summary>
            <param name="dataInDocType"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.CreateNewEntityBatch(System.Int32,System.Int32)">
            <summary>
            根据类型批量创建实体对象。
            </summary>
            <param name="dataInDocType"></param>
            <param name="createCount"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.CreateNewEntity(System.Int32)">
            <summary>
            根据类型创建一个新的实体对象。
            </summary>
            <param name="dataInDocType"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.CheckValueIsExists(System.Int32,System.Object,System.String[])">
            <summary>
            根据数据类型检查指定的值在数据库中是否已经存在
            </summary>
            <param name="dataInDocType">需要进行检查的数据类型</param>
            <param name="entity">需要检查的实体对象</param>
            <param name="checkPropertys">需要检查的属性名称</param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.GetDynamicGroupQueryData(MB.Util.Model.DynamicGroupSetting,MB.Util.Model.QueryParameterInfo[])">
            <summary>
            获取动态聚组的数据
            </summary>
            <param name="setting"></param>
            <param name="filterParams"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.GetObjectAsDataSet(System.Int32,MB.Util.Model.QueryParameterInfo[])">
            <summary>
            以DataSet 的格式获取选择指定类型的数据。
            </summary>
            <param name="queryParams"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.GetObjects(System.Int32,MB.Util.Model.QueryParameterInfo[])">
            <summary>
            以数据实体类集合的方式获取需要的数据。
            </summary>
            <param name="queryParams"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.AddToCache(System.ServiceModel.ICommunicationObject,System.Int32,System.Object,System.Boolean,System.String[])">
            <summary>
            把数据增加数据中间层的Cache 中。
            根据实体的状态决定操作的方式。
            </summary>
            <param name="dataInDocType">在单据中的数据类型,默认为主表的数据。</param>
            <param name="entity">需要增加的实体。</param>
            <param name="propertys">需要增加的该实体的指定属性。</param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.Flush(System.ServiceModel.ICommunicationObject)">
            <summary>
            提示中间层服务期端执行永久化的操作并清空缓存中的数据。
            </summary>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.GetCustomSummaryColValues(System.String[],MB.Util.Model.QueryParameterInfo[])">
            <summary>
            往自定义汇总列中填写汇总值，并且返回填好值的集合
            </summary>
            <param name="colsToGetValue">需要填写值的集合</param>
            <param name="queryParams">自定义汇总时客户端传入的条件</param>
            <returns>汇总完以后的结果列的集合</returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.CreateMainBindList(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="dataList"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.GetEditObjectByID(System.Int32)">
            <summary>
            通过ID获取可编辑的对象。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.GetEditObjectByKey(System.Object)">
            <summary>
            根据Key值获取对象
            动态加载数据 Grid列表加载与UI编辑界面数据源分离
            add by aifang 2012-08-01
            </summary>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.RefreshEntity(System.Int32,System.Object)">
            <summary>
             在实体对象保存后可能需要进行一些属性信息的更新，通过该方法来完成。
            </summary>
            <param name="dataInDocType"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.Submit(System.Object,System.Boolean)">
            <summary>
            对象数据提交。
            </summary>
            <param name="serverRuleProxy"></param>
            <param name="entity"></param>
            <param name="cancelSubmit"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.BusinessFlowSubmit(System.Object,MB.Util.Model.DocOperateType,System.String)">
            <summary>
            提交该单据对象相应的业务操作
            </summary>
            <param name="entity"></param>
            <param name="operateState"></param>
            <param name="remark"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.AbstractClientRule`2.ShowDataImport(MB.WinBase.IFace.IViewGridForm,MB.WinBase.Binding.BindingSourceEx)">
            <summary>
             显示数据导入处理窗口。
            </summary>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.AbstractClientRule`2.Description">
            <summary>
            单据描述。
            </summary>
        </member>
        <member name="P:MB.WinBase.AbstractClientRule`2.CurrentEditObject">
            <summary>
            
            </summary>
        </member>
        <member name="T:MB.WinBase.Binding.DataBindingProviderDesign">
            <summary>
            数据绑定
            </summary>
        </member>
        <member name="T:MB.WinBase.Binding.DesignColumnXmlCfgInfo">
            <summary>
            设计阶段列的描述信息。
            </summary>
        </member>
        <member name="M:MB.WinBase.Binding.DesignColumnXmlCfgInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.WinBase.Binding.DesignColumnXmlCfgInfo.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="columnDescription"></param>
        </member>
        <member name="P:MB.WinBase.Binding.DesignColumnXmlCfgInfo.ColumnName">
            <summary>
            列的名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Binding.DesignColumnXmlCfgInfo.ColumnDescription">
            <summary>
            列的描述。
            </summary>
        </member>
        <member name="T:MB.WinBase.Binding.IDataBindingProvider">
            <summary>
            设计时数据绑定提供接口。
            </summary>
        </member>
        <member name="P:MB.WinBase.Binding.IDataBindingProvider.DataBindings">
            <summary>
            已经提供的数据绑定集合。
            </summary>
        </member>
        <member name="P:MB.WinBase.Binding.IDataBindingProvider.ColumnXmlCfgs">
            <summary>
            实体对象的XML 列配置信息。
            </summary>
        </member>
        <member name="T:MB.WinBase.Binding.MyDataBindingProvider">
            <summary>
            设计窗口窗口控件数据绑定。
            </summary>
        </member>
        <member name="M:MB.WinBase.Binding.MyDataBindingProvider.#ctor">
            <summary>
            construct function...
            </summary>
        </member>
        <member name="M:MB.WinBase.Binding.MyDataBindingProvider.#ctor(System.ComponentModel.IContainer)">
            <summary>
            construct function...
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:MB.WinBase.Binding.MyDataBindingProvider.GetAdvanceDataBinding(System.Windows.Forms.Control)">
            <summary>
            设置控件绑订的信息
            </summary>
            <param name="ctl"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Binding.MyDataBindingProvider.SetAdvanceDataBinding(System.Windows.Forms.Control,MB.WinBase.Binding.DesignColumnXmlCfgInfo)">
            <summary>
            设置控件绑订的信息
            </summary>
            <param name="ctl"></param>
            <param name="column"></param>
        </member>
        <member name="M:MB.WinBase.Binding.MyDataBindingProvider.GetPropertyName(System.Windows.Forms.Control)">
            <summary>
            获取绑定的属性名称。
            </summary>
            <param name="ctl"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Binding.MyDataBindingProvider.CanExtend(System.Object)">
            <summary>
            
            </summary>
            <param name="extendee"></param>
            <returns></returns>
        </member>
        <member name="F:MB.WinBase.Binding.MyDataBindingProvider.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:MB.WinBase.Binding.MyDataBindingProvider.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:MB.WinBase.Binding.MyDataBindingProvider.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:MB.WinBase.Binding.MyDataBindingProvider.XmlConfigFile">
            <summary>
            列的配置XML描述信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Binding.MyDataBindingProvider.DataBindings">
            <summary>
            数据绑定的控件描述信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Binding.MyDataBindingProvider.ColumnXmlCfgs">
            <summary>
            数据列配置信息。
            </summary>
        </member>
        <member name="T:MB.WinBase.Binding.MyDataBindingProvider.DataBindingProviderDesign">
            <summary>
            数据绑定设计类。
            </summary>
        </member>
        <member name="T:MB.WinBase.Auditing.UserActivity">
            <summary>
            记录用户模块使用情况
            </summary>
        </member>
        <member name="T:MB.WinBase.Auditing.UserActivityTracker">
            <summary>
            跟踪用户对模块的使用情况
            </summary>
        </member>
        <member name="M:MB.WinBase.Auditing.UserActivityTracker.#ctor">
            <summary>
            私有构造函数
            </summary>
        </member>
        <member name="M:MB.WinBase.Auditing.UserActivityTracker.AddActivityToList(MB.WinBase.Auditing.UserActivity)">
            <summary>
            往活动列表中加活动
            </summary>
            <param name="activity"></param>
        </member>
        <member name="M:MB.WinBase.Auditing.UserActivityTracker.ArchiveToOnlineAsyn">
            <summary>
            异步保存用户操作至数据库
            </summary>
        </member>
        <member name="M:MB.WinBase.Auditing.UserActivityTracker.ArchiveToOnline">
            <summary>
            将用户操作保存至数据库
            </summary>
        </member>
        <member name="M:MB.WinBase.Auditing.UserActivityTracker.Archive(System.Boolean)">
            <summary>
            将用户操作保存至本地或者数据库，按照标志位指示操作
            <param name="isOfflineSave">True表示保存到本地, False表示保存到数据库</param>
            </summary>
        </member>
        <member name="M:MB.WinBase.Auditing.UserActivityTracker.publishArchiveMessage(System.String,System.String[])">
            <summary>
            输出在存储用户操作活动的时候的处理消息
            </summary>
        </member>
        <member name="M:MB.WinBase.Auditing.UserActivityTracker.checkLocalDirectorys">
            <summary>
             检查用户操作日志目录是否存在
            </summary>
        </member>
        <member name="M:MB.WinBase.Auditing.UserActivityTracker.isNeedToUpload">
            <summary>
            检查是否要上传操作日志
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Auditing.UserActivityTracker.loadUserActivities">
            <summary>
            加载本地的用户操作
            </summary>
        </member>
        <member name="M:MB.WinBase.Auditing.UserActivityTracker.mergeActivities(System.Collections.IList)">
            <summary>
            把存储到本地的用户操作日志，合并到内存中
            </summary>
            <param name="userActiviites"></param>
        </member>
        <member name="M:MB.WinBase.Auditing.UserActivityTracker.archiveOffline">
            <summary>
            保存到本地
            </summary>
        </member>
        <member name="M:MB.WinBase.Auditing.UserActivityTracker.onActionArchiveToOnline">
            <summary>
            触发保存操作日志到其他存储设备
            </summary>
        </member>
        <member name="P:MB.WinBase.Auditing.UserActivityTracker.Instance">
            <summary>
            单实例
            </summary>
        </member>
        <member name="E:MB.WinBase.Auditing.UserActivityTracker.ActionArchiveToOnline">
            <summary>
            需要外面注入方法来保存用户日志到线上
            </summary>
        </member>
        <member name="E:MB.WinBase.Auditing.UserActivityTracker.PublishArchiveOnlineMessage">
            <summary>
            保存日志过程中可以订阅保存的实时日志
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ChartMappingInfo.XColumn">
            <summary>
            X轴值的列名
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ChartMappingInfo.YColumn">
            <summary>
            Y轴值得列名
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ChartMappingInfo.SeriesColumn">
            <summary>
            系列值列名
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ChartMappingInfo.ArgumentType">
            <summary>
            图表值类型
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ChartArgumentType.Sum">
            <summary>
            求和
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ChartArgumentType.Count">
            <summary>
            求数量
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ChartArgumentType.MinValue">
            <summary>
            最小值
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ChartArgumentType.MaxValue">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ChartArgumentType.Extend">
            <summary>
            扩展值
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ChartArgumentType.Average">
            <summary>
            平均值
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ChartSeriesInfo.LabelsVisible">
            <summary>
            
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ChartSeriesInfo.Color">
            <summary>
            颜色
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ChartSeriesInfo.ArgumentScaleType">
            <summary>
            Qualitative
            Numerical,
            DateTime
            Auto
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ChartViewCfgInfo.Name">
            <summary>
             需要创建的图表名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ChartViewCfgInfo.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ChartViewCfgInfo.ViewType">
            <summary>
             需要创建的图表类型。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ChartViewCfgInfo.MappingType">
            <summary>
            映射的数据绑定类型
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ClientDataLoadType.Default">
            <summary>
            默认值：缓存加载
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ClientDataLoadType.Cache">
            <summary>
            本地缓存加载方式
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ClientDataLoadType.ReLoad">
            <summary>
            实时读取数据加载方式
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.ClientUIType">
            <summary>
            客户端UI 类型。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ClientUIType.GridViewForm">
            <summary>
            通用网格浏览的操作界面。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ClientUIType.ObjectEditForm">
            <summary>
            窗口编辑的操作界面。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ClientUIType.QueryFilter">
            <summary>
            查询编辑界面。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ClientUIType.ShowModelForm">
            <summary>
            独立模式对话窗口。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ClientUIType.MdiMainForm">
            <summary>
            Mdi 编辑主窗口。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ClientUIType.BatchDataImport">
            <summary>
            批量数据导入处理窗口
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ClientUIType.AsynViewForm">
            <summary>
            异步查询分析浏览窗口。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ClientUIType.TreeListViewForm">
            <summary>
            树型浏览窗口。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ClientUIType.GridViewEditForm">
            <summary>
            基于MDI 子窗口的网格浏览编辑窗口。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ClientUIType.Other">
            <summary>
            其它类型窗口。
            </summary>
        </member>
        <member name="T:MB.WinBase.Binding.BindingSourceEx">
            <summary>
            扩展 系统的BindingSource 满足自动绑定的功能。
            </summary>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceEx.OnPositionChanged(System.EventArgs)">
            <summary>
            OnPositionChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceEx.ClearOldValue">
            <summary>
            清除历史存储的数据 和 绑定到Windows 控件的绑定信息。
            </summary>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceEx.CheckExistsCurrentItem">
            <summary>
            判断是否存在当前项。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceEx.EndEditNoRaiseEvent">
            <summary>
            结束编辑但不响应事件。
            </summary>
        </member>
        <member name="M:MB.WinBase.Binding.BindingSourceEx.CurrentItemRejectChanges">
            <summary>
            撤消当前已做的更改。
            </summary>
        </member>
        <member name="P:MB.WinBase.Binding.BindingSourceEx.CurrentItemOldValue">
            <summary>
            CurrentItemOldValue
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.ColumnEditCfgInfo">
            <summary>
            ColumnEditCfgInfo 列编辑的描述信息。
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.ColumnEditCfgInfo.#ctor(System.String)">
            <summary>
            构造函数...
            </summary>
            <param name="colName"></param>
        </member>
        <member name="M:MB.WinBase.Common.ColumnEditCfgInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数...
            </summary>
            <param name="colName"></param>
            <param name="editControlType"></param>
            <param name="dataSource"></param>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.Name">
            <summary>
             需要设置的列的名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.EditControlType">
            <summary>
            绑定编辑的控件类型。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.DataSource">
            <summary>
            数据源。
            通过下拉框来进行选择的目前需要进行约束，只能接受DataSet 的数据集。
            该数据源的获取可以通过配置UI 层客户端的业务类来得到。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.TextFieldName">
            <summary>
            文本字段。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.ValueFieldName">
            <summary>
            需要进行关联存储的字段名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.InvokeDataSourceDesc">
            <summary>
            获取数据源的调用描述信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.ClickButtonShowForm">
            <summary>
            Click Button 点击后弹窗口的配置信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.FilterCfgName">
            <summary>
            编辑控件查询需要调用的过滤带名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.SaveLocalCache">
            <summary>
            判断获取到的列表值是否存储在本地 Cache中。 
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.InsertNullItem">
            <summary>
            判断是否插入空的选择行。
            
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.LookUpColumns">
            <summary>
            需要查找列的集合。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.EditCtlDataMappings">
            <summary>
            编辑控件的数据对应项绑定信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.DefaultBatchAdd">
            <summary>
            获取或者设置是否为批量增加的配置项。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.HideFilterPane">
            <summary>
            判断是否隐掉查询过滤界面。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.OrderByValueField">
            <summary>
            判断是否根据值字段进行排序。
            默认情况下为True。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.CharacterCasing">
            <summary>
            设置和显示的输入框的大小写。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.NeedCreate">
            <summary>
            是否需要每次创建查询助手对象  add by aifang 2012-3-27
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.MaxSelectRows">
            <summary>
            多选选择时配置的最大行数 add by aifang 2012-5-22
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.HideProperty">
            <summary>
            设置是否隐藏掉属性按钮显示
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.InvokeDataPropertyDesc">
            <summary>
            获取数据属性的调用描述信息。 add by aifang
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.Level">
            <summary>
            设置区域控件级别
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.DataAssistantContextMenu">
            <summary>
            获取数据属性的调用描述信息。 add by aifang 2012-08-22
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.HideContextMenu">
            <summary>
            是否隐藏右键菜单项  add by aifang 2012-08-22
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.IsValidateInputFromDataSource">
            <summary>
            是不是需要从DataSource中去验证 EditControlType.ComboCheckedListBox,EditControlType.LookUpEdit中的值
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnEditCfgInfo.CreateDataAssistant">
            <summary>
            创建数据助手的函数。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.InvokeDataSourceDescInfo">
            <summary>
            调用数据的描述信息。
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.InvokeDataSourceDescInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            调用数据的描述信息
            </summary>
            <param name="invokeType"></param>
            <param name="invokeMethod"></param>
            <param name="constructPar"></param>
        </member>
        <member name="P:MB.WinBase.Common.InvokeDataSourceDescInfo.Type">
            <summary>
            类型配置。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.InvokeDataSourceDescInfo.Method">
            <summary>
            调用方法配置。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.InvokeDataSourceDescInfo.TypeConstructParams">
            <summary>
            实例化类型需要的构函数参数。
            在配置的时候最好都配置成字符类型的参数。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.InvokeDataSourceDescInfo.ExistsFilterParams">
            <summary>
            判断调用的方法是否存在查询的参数。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.ClickButtonShowFormCfgInfo">
            <summary>
            单击button click 按钮时调用的窗口选择的数据配置信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ClickButtonShowFormCfgInfo.Type">
            <summary>
            调用的数据查询窗口。 
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ClickButtonShowFormCfgInfo.TypeConstructParams">
            <summary>
            实例化类型需要的构函数参数。
            在配置的时候最好都配置成字符类型的参数。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ClickButtonShowFormCfgInfo.ShowMessageOnValidated">
            <summary>
            判断ButtonInput 焦点离开数据验证后是否显示Message.
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.LookUpColumnInfo">
            <summary>
            LookUpColumnInfo 弹出列表框的描述信息。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.EditCtlDataMappingInfo">
            <summary>
            编辑控件列相关绑定信息
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.EditCtlDataMappingInfo.ColumnName">
            <summary>
            控件绑定列的名称
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.EditCtlDataMappingInfo.SourceColumnName">
            <summary>
             数据源的名称...
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.InvokeDataPropertyDescInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            调用数据的描述信息
            </summary>
            <param name="invokeType"></param>
            <param name="invokeMethod"></param>
            <param name="constructPar"></param>
        </member>
        <member name="P:MB.WinBase.Common.InvokeDataPropertyDescInfo.Type">
            <summary>
            类型配置。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.InvokeDataPropertyDescInfo.Method">
            <summary>
            调用方法配置。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.InvokeDataPropertyDescInfo.TypeConstructParams">
            <summary>
            实例化类型需要的构函数参数。
            在配置的时候最好都配置成字符类型的参数。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.DataAssistantContextMenuInfo">
            <summary>
            单击button click 按钮时调用的窗口选择的数据配置信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataAssistantContextMenuInfo.Type">
            <summary>
            调用的数据查询窗口。 
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataAssistantContextMenuInfo.TypeConstructParams">
            <summary>
            实例化类型需要的构函数参数。
            在配置的时候最好都配置成字符类型的参数。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.ColumnPropertyInfo">
            <summary>
            FieldPropertyInfo  描述数据库表字段的属性描述
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.ColumnPropertyInfo.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            构造函数。。。
            </summary>
            <param name="fieldCaption"></param>
            <param name="isNull"></param>
            <param name="length"></param>
        </member>
        <member name="M:MB.WinBase.Common.ColumnPropertyInfo.#ctor(System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            构造函数。。。
            </summary>
            <param name="fieldCaption"></param>
            <param name="isNull"></param>
            <param name="typeName"></param>
            <param name="length"></param>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.Name">
            <summary>
            字段名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.Description">
            <summary>
            描述。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.DataType">
            <summary>
            字段类型。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.MaxLength">
            <summary>
            字段存储在数据库中的最大长度。，
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.IsNull">
            <summary>
            判断是否可以为空。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.IsKey">
            <summary>
            判断是否为键值。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.Visibled">
            <summary>
            判断是否显示。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.VisibleWidth">
            <summary>
            在默认网格显示中的宽度。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.FitLength">
            <summary>
            字段定长的设置（设置后该字段的输入值只能是固定的长度。）
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.CanEdit">
            <summary>
            在网格编辑中判断该列是否参与编辑。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.OrderIndex">
            <summary>
            在默认创建时该列在Grid 控件中的顺序。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.CanGroup">
            <summary>
            判断该列是否可以分组。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.CanSort">
            <summary>
            判断该列是否可以排序。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.SummaryItem">
            <summary>
            判断是否为汇总列。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.SummaryItemType">
            <summary>
            设置用该字段进行分组汇总的信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.BandName">
            <summary>
            字段所属的Band 名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.SaveDefaultValue">
            <summary>
            保存为默认值
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.MinValue">
            <summary>
            最小值。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.MaxValue">
            <summary>
            最大值。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.AllowEditStates">
            <summary>
            允许编辑的实体对象状态。
            例如：New,Modified,
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.MaxDecimalPlaces">
            <summary>
            小数点最大位数
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.AdvanceFilter">
            <summary>
            判断该字段是否允许作为高级查询字段。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.AllowChartAxes">
            <summary>
             允许创建的图表区域
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.ChartDataType">
            <summary>
            列对应的图表数据类型
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.IsHavingCondition">
            <summary>
            Having条件.当为True时,该字段只用于查询条件
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.IsDynamic">
            <summary>
            判断该字段是否为动态加载列
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnPropertyInfo.IsPivotExpressionSourceColumn">
            <summary>
            判断该字段是否为多维视图推算列的数据源
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.SummaryItemType">
            <summary>
            列汇总的方式。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.SummaryInfo.Name">
            <summary>
            名字，随便填写，不能重复
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.SummaryInfo.InvokeDataSourceDesc">
            <summary>
            获取数据源的调用描述信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.SummaryInfo.DataSource">
            <summary>
            数据源。
            通过下拉框来进行选择的目前需要进行约束，只能接受DataSet 的数据集。
            该数据源的获取可以通过配置UI 层客户端的业务类来得到。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.SummaryInfo.ColumnSummaryInfos">
            <summary>
            汇总列的信息
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.ColumnSummaryInfo">
            <summary>
            数据汇总用的列配置信息
            该配置信息需要与ColumnPropertyInfo一起用，避免重复定义属性
            NAME属性用来和ColumnPropertyInfo做匹配
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnSummaryInfo.Name">
            <summary>
            列的名称
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnSummaryInfo.Description">
            <summary>
            列的描述
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnSummaryInfo.ColumnName">
            <summary>
            ColumnPropertyInfo中对应的NAME
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnSummaryInfo.IsSummaryCondition">
            <summary>
            是否创建汇总的列，表示根据这个列来汇总。默认是False。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnSummaryInfo.IsSummaryItem">
            <summary>
            是否是汇总列
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnSummaryInfo.SummaryItemType">
            <summary>
            汇总类型
            这个信息可以从ColumnPropertyInfo继承。如果没有设置，则继承，如果设置了，则覆盖
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnSummaryInfo.IncludeSummaryColumns">
            <summary>
            包含的聚组列的名称集合，以逗号隔开。"Name1,Name2"
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ColumnSummaryInfo.IncludeGroupByColumns">
            <summary>
            对非聚合列的处理集合
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.GroupByColumn">
            <summary>
            分组列配置信息
            现在提供了对分组列的截取
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GroupByColumn.Name">
            <summary>
            非汇总列的名称
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GroupByColumn.SubString">
            <summary>
            对列的值进行截取，截取的参数是 “截取起始位置,截取的长度”
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.CommunicationDataType">
            <summary>
            层之间数据传递的类型。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.CommunicationDataType.DataSet">
            <summary>
            通过DataSet 来进行传递。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.CommunicationDataType.ModelEntity">
            <summary>
            通过数据实体来进行传递。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.CommunicationDataType.DataCompression">
            <summary>
            在数据传递中是否需要压缩。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.DataBindingType">
            <summary>
            创建数据绑定的类型。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DataBindingType.None">
            <summary>
            没有设置数据绑定，或者用户直接通过代码来进行赋值。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DataBindingType.AutoByCtlName">
            <summary>
            通过控件名称自动创建数据绑定。
            默认情况下为这种模式。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DataBindingType.FromXmlCfg">
            <summary>
            通过XML 配置来创建自动绑定。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DataBindingType.ByUserUIDesign">
            <summary>
            通过用户UI 设计手工来绑定。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DataBindingType.Other">
            <summary>
            其它设置方法。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.DataFilterElementCfgInfo">
            <summary>
            查询过滤配置的
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.DataFilterElementCfgInfo.#ctor">
            <summary>
            construct function...
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.DataFilterElementCfgInfo.#ctor(System.String)">
            <summary>
            construct function...
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="P:MB.WinBase.Common.DataFilterElementCfgInfo.Name">
            <summary>
            列的名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataFilterElementCfgInfo.EditControlType">
            <summary>
             输入条件的控件类型。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataFilterElementCfgInfo.LimitColumn">
            <summary>
            判断是否为限制的列。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataFilterElementCfgInfo.Nullable">
            <summary>
            是否允许为空，默认情况下为 True
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataFilterElementCfgInfo.AllowMultiValue">
            <summary>
            判断是否允许输入多个值。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataFilterElementCfgInfo.FilterCondition">
            <summary>
            过滤条件。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataFilterElementCfgInfo.Formate">
            <summary>
            格式化
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataFilterElementCfgInfo.FilterLimits">
            <summary>
            查询条件限制列
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataFilterElementLimitInfo.Name">
            <summary>
            限制列名
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataFilterElementLimitInfo.SourceName">
            <summary>
            限制列源列名
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataFilterElementLimitInfo.FilterCondition">
            <summary>
            过滤条件
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataFilterElementLimitInfo.Nullable">
            <summary>
            是否允许为空，默认情况下为 True
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataFilterElementLimitInfo.AllowFilterValue">
            <summary>
            是否允许过滤数据
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.FilterElementCfgs">
            <summary>
            过滤条件配置元素集合。
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.FilterElementCfgs.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.FilterElementCfgs.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.DataFilterElementCfgInfo})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="lstData"></param>
        </member>
        <member name="P:MB.WinBase.Common.FilterElementCfgs.Name">
            <summary>
            查询带名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.FilterElementCfgs.AllowEmptyFilter">
            <summary>
            在条件为空的情况下是否允许进行查询。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.FilterElementCfgs.AllowQueryAll">
            <summary>
            允许查询的时候不分页,直接查询出所有数据库内容
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.FilterElementCfgs.Width">
            <summary>
            设置Filter查询框的长度
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.FilterElementCfgs.Height">
            <summary>
            设置Filter查询框的宽度
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.DataImportCfgInfo">
            <summary>
            数据导入相应的配置信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataImportCfgInfo.Operate">
            <summary>
            数据导入处理操作方式。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataImportCfgInfo.OverideKeys">
            <summary>
             在进行数据覆盖导入时的键值。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DataImportCfgInfo.OverideFields">
            <summary>
            进行覆盖的字段。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.DataImportOperate">
            <summary>
            数据导入处理操作方式。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DataImportOperate.AddNew">
            <summary>
            以新增的方式进行导入。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DataImportOperate.Overide">
            <summary>
            以覆盖的方式进行导入
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DataImportOperate.AddAndOveride">
            <summary>
            允许新增和覆盖的方式进行导入。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.DataViewStyle">
            <summary>
            数据浏览窗口显示的样式
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DataViewStyle.General">
            <summary>
            普通
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DataViewStyle.AdvBandGrid">
            <summary>
            多表头
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DataViewStyle.Multi">
            <summary>
            多维
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DataViewStyle.Chart">
            <summary>
            图表分析
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DataViewStyle.ModuleComment">
            <summary>
            模块评语
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgHelper">
            <summary>
            DynamicGroupCfgHelper 动态聚组网格分析配置信息
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgHelper.GetResultColPropertys">
            <summary>
            动态聚组结果显示列的配置
            1.先读取UI配置
            2.再读取动态聚组的配置
            3.合并配置，合并的优先级是动态聚组的配置优先, 动态聚组的配置的属性值优先
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgHelper.LoadDynamicGroupCfg(MB.WinBase.IFace.IClientRuleConfig)">
            <summary>
            加载动态列的配置文件
            </summary>
            <param name="ruleConfig"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgHelper.GetColProInfos(System.Boolean)">
            <summary>
            获取动态聚组，分组列或者汇总列的设置的配置信息
            </summary>
            <param name="isMainEntity">主对象则是True，从对象则是False</param>
            <returns>对象的列配置信息集合</returns>
        </member>
        <member name="M:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgHelper.GetEntityInfo(System.Boolean)">
            <summary>
            得到主/从实体的配置信息
            </summary>
            <param name="isMainEntity">主对象则是True，从对象则是False</param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgHelper.GetRelationInfo">
            <summary>
            获取动态聚组，两个实体之间的关系的配置信息
            </summary>
            <returns>主从对象之间的关系配置信息</returns>
        </member>
        <member name="M:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgHelper.validateColInfo(System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.DynamicGroup.DynamicGroupColumnPropertyInfo})">
            <summary>
            检查配置文件中的聚合字段属性是否正确
            </summary>
            <param name="colInfos">列配置信息</param>
        </member>
        <member name="T:MB.WinBase.Common.DynamicGroup.DynamicGroupColumnPropertyInfo">
            <summary>
            动态聚组列设定
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DynamicGroup.DynamicGroupColumnPropertyInfo.Name">
            <summary>
            字段名称, 需要与ColumnPropertyInfo中的NAME一致
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DynamicGroup.DynamicGroupColumnPropertyInfo.Description">
            <summary>
            字段描述
            如果该COLUMN已经在ColumnPropertyInfo定义，忽略该属性
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DynamicGroup.DynamicGroupColumnPropertyInfo.DataType">
            <summary>
            字段类型
            如果该COLUMN已经在ColumnPropertyInfo定义，忽略该属性
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DynamicGroup.DynamicGroupColumnPropertyInfo.ColArea">
            <summary>
            列的作用域，必须配置
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DynamicGroup.DynamicGroupColumnPropertyInfo.SummaryItemType">
            <summary>
            如果字段是聚合列，则需要填写聚合类型,如果是分组列，则是空
            聚合类型是Sum, Avg, Max, Min, Count
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.DynamicGroup.DynamicGroupColArea">
            <summary>
            动态聚组列的领域定义
            聚合或者分组
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DynamicGroup.DynamicGroupColArea.Group">
            <summary>
            分组列
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.DynamicGroup.DynamicGroupColArea.Aggregation">
            <summary>
            聚组列
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgInfo">
            <summary>
            动态聚组配置信息
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgInfo.GetColumnInfoByName(System.String,System.Boolean)">
            <summary>
            根据字段的名称获取配置对应的信息
            </summary>
            <param name="name">列名称</param>
            <param name="isMain">列是主对象还是从对象的</param>
            <returns>列配置信息</returns>
        </member>
        <member name="P:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgInfo.MainEntityColInfo">
            <summary>
            UI主查询对象中动态聚合列的配置
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgInfo.DetailEntityColInfo">
            <summary>
            从对象中的动态聚组列的配置信息
            从对象可以是个表。如果是多个表，可以先做成一个视图，然后再配置动态聚组
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgInfo.RelationInfo">
            <summary>
            UI主查询对象与从对象之间的关联关系配置
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgInfo.MainEntityInfo">
            <summary>
            主对象的配置信息
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.DynamicGroup.DynamicGroupCfgInfo.DetailEntityInfo">
            <summary>
            详细对象的配置信息
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.EditControlType">
            <summary>
            动态控件创建类型绑定。
            </summary>    
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.None">
            <summary>
            不设置
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.TextBox">
            <summary>
            文本输入框
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.Combox_DropDown">
            <summary>
            下拉可编辑列表框
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.Combox_DropDownList">
            <summary>
             下拉不可编辑列表框。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.LookUpEdit">
            <summary>
            下拉不可编辑并且根据代码查找名称。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.ComboCheckedListBox">
            <summary>
            下拉多选编辑控件
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.CheckBox">
            <summary>
            选择输入框
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.DateFilterCtl">
            <summary>
            日期过滤查找编辑框。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.ClickButtonInput">
            <summary>
             单击选择输入框。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.ImageIcoEdit">
            <summary>
            图标编辑控件。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.DBPictureBox">
            <summary>
            图片编辑控件。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.NumericUpDown">
            <summary>
             数字输入编辑狂。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.ColorEdit">
            <summary>
            颜色编辑。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.RichTextBox">
            <summary>
            富文本框编辑类型。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.EditControlType.PopupRegionEdit">
            <summary>
            富选择框
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.RegionEditInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.GeneralOperateMenus">
            <summary>
            单据通用操作菜单项。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.GeneralOperateMenus.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.GeneralOperateMenus.All">
            <summary>
            所有
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.GeneralOperateMenus.Approved">
            <summary>
            审核
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.GeneralOperateMenus.Completed">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.GeneralOperateMenus.Withdraw">
            <summary>
            撤消
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.GeneralOperateMenus.Suspended">
            <summary>
            挂起
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.GeneralOperateMenus.CancelSuspended">
            <summary>
            取消挂起
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.GetBufferByIndexCompletedEventArgs">
            <summary>
             异步调用查询分析调用完成响应的参数。
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.GetBufferByIndexCompletedEventArgs.#ctor(System.Byte[],System.Exception,System.Boolean,System.Object)">
            <summary>
            异步调用查询分析调用完成响应的参数。
            </summary>
            <param name="results"></param>
            <param name="exception"></param>
            <param name="cancelled"></param>
            <param name="userState"></param>
        </member>
        <member name="P:MB.WinBase.Common.GetBufferByIndexCompletedEventArgs.Result">
            <summary>
            获取的结果
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.ModuleOpennedFrom">
            <summary>
            枚举菜单是从哪里被打开，根据不同打开位置，有不同的处理
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ModuleOpennedFrom.Menu">
            <summary>
            从菜单打开，例如从ERP属性菜单，桌面菜单等
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ModuleOpennedFrom.Task">
            <summary>
            从任务栏打开，任务栏打开的任务
            这种情况可以在ClientRule中设定默认的查询条件，以便于打开时直接加载数据
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.ModuleOpenState">
            <summary>
            模块在通过OpenModuleById时
            需要注入的打开状态
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ModuleOpenState.OpennedFrom">
            <summary>
            模块是哪个位置打开的
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.ModuleOpenState.OpenState">
            <summary>
            模块打开时需要给入的参数，这个参数需要由提供方和调用方自行约定类型
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.TreeListViewCfgInfo">
            <summary>
            树型控件绑定配置处理类。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.TreeListViewCfgInfo.KeyFieldName">
            <summary>
            创建树型控件的键值名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.TreeListViewCfgInfo.DisplayFieldName">
            <summary>
            显示节点的字段名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.TreeListViewCfgInfo.ParentFieldName">
            <summary>
            创建树型控件关联父节点的字段名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.TreeListViewCfgInfo.OrderFieldName">
            <summary>
            节点的排序字段名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.TreeListViewCfgInfo.IcoFieldName">
            <summary>
            图标的字段名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.TreeListViewCfgInfo.OnlyLeafNodeSelectable">
            <summary>
            是否只有叶子节点才能被选中
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.UICommandType">
            <summary>
            UI Command 操作类型。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.None">
            <summary>
            Nono
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.AddNew">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.Open">
            <summary>
            浏览
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.Copy">
            <summary>
            复制
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.Submit">
            <summary>
            提交
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.CancelSubmit">
            <summary>
            取消提交
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.Print">
            <summary>
            打印
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.PrintPreview">
             <summary>
            打印浏览 
             </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.Exit">
            <summary>
            退出
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.SysSetting">
            <summary>
            系统设置
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.Individuality">
            <summary>
            个性化设置
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.HelpList">
            <summary>
            帮助
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.About">
            <summary>
            关于
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.OnlineMessage">
            <summary>
            在线消息
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.Calculator">
            <summary>
            显示计算器
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.FunctionTree">
             <summary>
            显示功能模块树 
             </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.Query">
            <summary>
            快速查询
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.SearchTemplet">
            <summary>
            查询摸板
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.Refresh">
            <summary>
            刷新
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.Aggregation">
            <summary>
            聚组
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.DataExport">
            <summary>
            导出
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.DataImport">
            <summary>
            导入
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.MdiSaveLayout">
            <summary>
            保存布局
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.Edit">
            <summary>
            对象修改
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.UICommandType.DynamicAggregation">
            <summary>
            动态聚组
            </summary>
        </member>
        <member name="T:MB.WinBase.Ctls.frmAddSheet">
            <summary>
            frmAddSheet 表格插入初始化。
            </summary>
        </member>
        <member name="F:MB.WinBase.Ctls.frmAddSheet.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.frmAddSheet.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.frmAddSheet.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要使用代码编辑器修改
            此方法的内容。
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.frmAddSheet.#ctor(System.Windows.Forms.RichTextBox)">
            <summary>
            构造函数.
            </summary>
        </member>
        <member name="T:MB.WinBase.Ctls.IRichTextTemplet">
            <summary>
            RichtextBox 控件的模板处理。
            </summary>
        </member>
        <member name="T:MB.WinBase.Ctls.RichTextBoxEx">
            <summary>
            扩展RichTextBox 控件，满足Word 文件编辑的需求。
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.OnStamp(System.EventArgs)">
            <summary>
            OnStamp event
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.tb1_ButtonClick(System.Object,System.Windows.Forms.ToolBarButtonClickEventArgs)">
            <summary>
                Handler for the toolbar button click event
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.UpdateToolbar">
            <summary>
                Update the toolbar button statuses
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.rtb1_SelectionChanged(System.Object,System.EventArgs)">
            <summary>
            	Change the toolbar buttons when new text is selected
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.Color_Click(System.Object,System.EventArgs)">
            <summary>
                Change the richtextbox color
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.Font_Click(System.Object,System.EventArgs)">
            <summary>
                Change the richtextbox font
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.FontSize_Click(System.Object,System.EventArgs)">
            <summary>
                Change the richtextbox font size
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.rtb1_LinkClicked(System.Object,System.Windows.Forms.LinkClickedEventArgs)">
            <summary>
            Starts the default browser if a link is clicked
            </summary>
        </member>
        <member name="F:MB.WinBase.Ctls.RichTextBoxEx.m_StampAction">
            <summary>
                Determines how the stamp button will respond
            </summary>
        </member>
        <member name="F:MB.WinBase.Ctls.RichTextBoxEx.m_StampColor">
            <summary>
                Color of the stamp text
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.InsertImage(System.Drawing.Image)">
            <summary>
            Inserts an image into the RichTextBox.  The image is wrapped in a Windows
            Format Metafile, because although Microsoft discourages the use of a WMF,
            the RichTextBox (and even MS Word), wraps an image in a WMF before inserting
            the image into a document.  The WMF is attached in HEX format (a string of
            HEX numbers).
            
            The RTF Specification v1.6 says that you should be able to insert bitmaps,
            .jpegs, .gifs, .pngs, and Enhanced Metafiles (.emf) directly into an RTF
            document without the WMF wrapper. This works fine with MS Word,
            however, when you don't wrap images in a WMF, WordPad and
            RichTextBoxes simply ignore them.  Both use the riched20.dll or msfted.dll.
            </summary>
            <remarks>
            NOTE: The image is inserted wherever the caret is at the time of the call,
            and if any text is selected, that text is replaced.
            </remarks>
            <param name="_image"></param>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.GetImagePrefix(System.Drawing.Image)">
            <summary>
            Creates the RTF control string that describes the image being inserted.
            This description (in this case) specifies that the image is an
            MM_ANISOTROPIC metafile, meaning that both X and Y axes can be scaled
            independently.  The control string also gives the images current dimensions,
            and its target dimensions, so if you want to control the size of the
            image being inserted, this would be the place to do it. The prefix should
            have the form ...
            
            {\pict\wmetafile8\picw[A]\pich[B]\picwgoal[C]\pichgoal[D]
            
            where ...
            
            A = current width of the metafile in hundredths of millimeters (0.01mm)
             = Image Width in Inches * Number of (0.01mm) per inch
             = (Image Width in Pixels / Graphics Context's Horizontal Resolution) * 2540
             = (Image Width in Pixels / Graphics.DpiX) * 2540
            
            B = current height of the metafile in hundredths of millimeters (0.01mm)
             = Image Height in Inches * Number of (0.01mm) per inch
             = (Image Height in Pixels / Graphics Context's Vertical Resolution) * 2540
             = (Image Height in Pixels / Graphics.DpiX) * 2540
            
            C = target width of the metafile in twips
             = Image Width in Inches * Number of twips per inch
             = (Image Width in Pixels / Graphics Context's Horizontal Resolution) * 1440
             = (Image Width in Pixels / Graphics.DpiX) * 1440
            
            D = target height of the metafile in twips
             = Image Height in Inches * Number of twips per inch
             = (Image Height in Pixels / Graphics Context's Horizontal Resolution) * 1440
             = (Image Height in Pixels / Graphics.DpiX) * 1440
            
            </summary>
            <remarks>
            The Graphics Context's resolution is simply the current resolution at which
            windows is being displayed.  Normally it's 96 dpi, but instead of assuming
            I just added the code.
            
            According to Ken Howe at pbdr.com, "Twips are screen-independent units
            used to ensure that the placement and proportion of screen elements in
            your screen application are the same on all display systems."
            
            Units Used
            ----------
            1 Twip = 1/20 Point
            1 Point = 1/72 Inch
            1 Twip = 1/1440 Inch
            
            1 Inch = 2.54 cm
            1 Inch = 25.4 mm
            1 Inch = 2540 (0.01)mm
            </remarks>
            <param name="_image"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.GdipEmfToWmfBits(System.IntPtr,System.UInt32,System.Byte[],System.Int32,MB.WinBase.Ctls.RichTextBoxEx.EmfToWmfBitsFlags)">
            <summary>
            Use the EmfToWmfBits function in the GDI+ specification to convert a 
            Enhanced Metafile to a Windows Metafile
            </summary>
            <param name="_hEmf">
            A handle to the Enhanced Metafile to be converted
            </param>
            <param name="_bufferSize">
            The size of the buffer used to store the Windows Metafile bits returned
            </param>
            <param name="_buffer">
            An array of bytes used to hold the Windows Metafile bits returned
            </param>
            <param name="_mappingMode">
            The mapping mode of the image.  This control uses MM_ANISOTROPIC.
            </param>
            <param name="_flags">
            Flags used to specify the format of the Windows Metafile returned
            </param>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.GetRtfImage(System.Drawing.Image)">
            <summary>
            Wraps the image in an Enhanced Metafile by drawing the image onto the
            graphics context, then converts the Enhanced Metafile to a Windows
            Metafile, and finally appends the bits of the Windows Metafile in HEX
            to a string and returns the string.
            </summary>
            <param name="_image"></param>
            <returns>
            A string containing the bits of a Windows Metafile in HEX
            </returns>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.GetFontTable(System.Drawing.Font)">
            <summary>
            Creates a font table from a font object.  When an Insert or Append 
            operation is performed a font is either specified or the default font
            is used.  In any case, on any Insert or Append, only one font is used,
            thus the font table will always contain a single font.  The font table
            should have the form ...
            
            {\fonttbl{\f0\[FAMILY]\fcharset0 [FONT_NAME];}
            </summary>
            <param name="_font"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.GetColorTable(MB.WinBase.Ctls.RichTextBoxEx.RtfColor,MB.WinBase.Ctls.RichTextBoxEx.RtfColor)">
            <summary>
            Creates a font table from the RtfColor structure.  When an Insert or Append
            operation is performed, _textColor and _backColor are either specified
            or the default is used.  In any case, on any Insert or Append, only three
            colors are used.  The default color of the RichTextBox (signified by a
            semicolon (;) without a definition), is always the first color (index 0) in
            the color table.  The second color is always the text color, and the third
            is always the highlight color (color behind the text).  The color table
            should have the form ...
            
            {\colortbl ;[TEXT_COLOR];[HIGHLIGHT_COLOR];}
            
            </summary>
            <param name="_textColor"></param>
            <param name="_backColor"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Ctls.RichTextBoxEx.RemoveBadChars(System.String)">
            <summary>
            Called by overrided RichTextBox.Rtf accessor.
            Removes the null character from the RTF.  This is residue from developing
            the control for a specific instant messaging protocol and can be ommitted.
            </summary>
            <param name="_originalRtf"></param>
            <returns>RTF without null character</returns>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.RichTextTemplet">
            <summary>
            模板处理。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.RtfContent">
            <summary>
            设置或者获取控件RTF格式的数据。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.Toolbar">
            <summary>
                The toolbar that is contained with-in the RichTextBoxExtened control
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.RichTextBox">
            <summary>
                The RichTextBox that is contained with-in the RichTextBoxExtened control
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowSave">
            <summary>
                Show the save button or not
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowOpen">
            <summary>
               Show the open button or not 
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowStamp">
            <summary>
                Show the stamp button or not
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowColors">
            <summary>
                Show the color button or not
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowUndo">
            <summary>
                Show the undo button or not
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowRedo">
            <summary>
                Show the redo button or not
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowBold">
            <summary>
                Show the bold button or not
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowItalic">
            <summary>
                Show the italic button or not
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowUnderline">
            <summary>
                Show the underline button or not
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowStrikeout">
            <summary>
                Show the strikeout button or not
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowLeftJustify">
            <summary>
                Show the left justify button or not
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowRightJustify">
            <summary>
                Show the right justify button or not
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowCenterJustify">
            <summary>
                Show the center justify button or not
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowFont">
            <summary>
                Show the font button or not
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.ShowFontSize">
            <summary>
                Show the font size button or not
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.RichTextBoxEx.DetectURLs">
            <summary>
                Detect URLs with-in the richtextbox
            </summary>
        </member>
        <member name="T:MB.WinBase.Ctls.ucClickButtonInput">
            <summary>
            点击查找数据编辑控件。
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ucClickButtonInput.#ctor">
            <summary>
             Click Button Input 自定义控件。
            </summary>
        </member>
        <member name="F:MB.WinBase.Ctls.ucClickButtonInput.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ucClickButtonInput.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MB.WinBase.Ctls.ucClickButtonInput.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucClickButtonInput.CharacterCasing">
            <summary>
            设置控件大小写。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucClickButtonInput.ColumnEditCfgInfo">
            <summary>
            获取或者设置Click Button 调用的方法描述。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucClickButtonInput.ReadOnly">
            <summary>
            获取或者设置控件是否允许编辑。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucClickButtonInput.MultiSelect">
            <summary>
            允许多选.在编辑窗口中,根据用户设置来决定;在查询窗口中,由配置文件决定
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucClickButtonInput.FilterElementInfo">
            <summary>
            配置文件中,该字段的查询方式的信息.查询条件决定了验证的方式,如果查询条件为Like,BeginWith等,则不验证
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucClickButtonInput.HideFilterPane">
            <summary>
            判断是否显示过滤带，如果为False 那么只显示数据选择列表项。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucClickButtonInput.AllowInput">
            <summary>
            判断文本框是否允许编辑。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucClickButtonInput.QueryFilterForm">
            <summary>
            获取点击默认调用的数据查找窗口,由于该窗口目前基本上满足所有数据的查找功能，暂时不提供扩展。
            </summary>
        </member>
        <member name="T:MB.WinBase.Ctls.ucDbPictureBox">
            <summary>
            DBPictureBox 图片的选择和显示。
            </summary>
        </member>
        <member name="F:MB.WinBase.Ctls.ucDbPictureBox.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ucDbPictureBox.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ucDbPictureBox.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要使用代码编辑器 
            修改此方法的内容。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucDbPictureBox.ImageFileName">
            <summary>
            设置或获取另存图片时的默认文件名
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucDbPictureBox.BorderStyle">
            <summary>
            设置或者获取图片信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucDbPictureBox.Image">
            <summary>
            设置或者获取图片信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucDbPictureBox.ImageData">
            <summary>
            获取或设置图片的数据。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucDbPictureBox.ReadOnly">
            <summary>
            设置控件的只读状态
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucDbPictureBox.SizeModel">
            <summary>
            控件图片框将如何显示图片
            </summary>
        </member>
        <member name="T:MB.WinBase.Ctls.ucEditDateFilter">
            <summary>
            日期选择编辑公共处理控件。
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ucEditDateFilter.#ctor">
             <summary>
            construct function...
             </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ucEditDateFilter.doCurrentEditFilterValidate">
            <summary>
            在某些情况下，DateEdit由于没有lose focus，所以改变的值备有被验证，也不能反映到查询条件中。
            显示调用DoValidate方法，使的改变的值生效。
            </summary>
        </member>
        <member name="F:MB.WinBase.Ctls.ucEditDateFilter.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ucEditDateFilter.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MB.WinBase.Ctls.ucEditDateFilter.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucEditDateFilter.CurrentSettingValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucEditDateFilter.DateFilterValue">
            <summary>
            获取数据过滤的值。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucEditDateFilter.DateFilterType">
            <summary>
             设置的条件。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucEditDateFilter.Formate">
            <summary>
            根据xml配置设置日期显示的格式
            </summary>
        </member>
        <member name="T:MB.WinBase.Ctls.ucEditDateFilter.DateFilterEditType">
            <summary>
            
            </summary>
        </member>
        <member name="T:MB.WinBase.Ctls.ucIamgeIcoEdit">
            <summary>
            Image Ico 图象编辑处理控件。
            </summary>
        </member>
        <member name="F:MB.WinBase.Ctls.ucIamgeIcoEdit.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ucIamgeIcoEdit.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:MB.WinBase.Ctls.ucIamgeIcoEdit.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucIamgeIcoEdit.Image">
            <summary>
            设置或者获取图片信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucIamgeIcoEdit.ImageData">
            <summary>
            获取或设置图片的数据。
            </summary>
        </member>
        <member name="F:MB.WinBase.Ctls.ucPopupRegionEdit.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ucPopupRegionEdit.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MB.WinBase.Ctls.ucPopupRegionEdit.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:MB.WinBase.Ctls.ucPopupRegionEdit.AfterLinkIsClicked">
            <summary>
            当点击区域控件的链接以后触发
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucPopupRegionEdit.ColumnEditCfgInfo">
            <summary>
            获取或者设置Click Button 调用的方法描述。
            </summary>
        </member>
        <member name="T:MB.WinBase.Ctls.UIRuler">
            <summary>
            DesignRuler 界面设计的尺子。
            </summary>
        </member>
        <member name="F:MB.WinBase.Ctls.UIRuler.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.UIRuler.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.UIRuler.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要使用代码编辑器 
            修改此方法的内容。
            </summary>
        </member>
        <member name="T:MB.WinBase.Ctls.WaitCursorDialog">
            <summary>
            程序处理的光标 
            </summary>
        </member>
        <member name="F:MB.WinBase.Ctls.WaitCursorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.WaitCursorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MB.WinBase.Ctls.WaitCursorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MB.WinBase.Data.HViewDataConvert`1">
            <summary>
            数据集合横向转换处理相关。
            </summary>
        </member>
        <member name="T:MB.WinBase.Data.HViewDataConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.WinBase.Data.HViewDataConvert.CreateDynamicColumnFieldName(System.String,System.Int32)">
            <summary>
            根据Mapping 的列名称和 Index 构建动态列的字段名称。
            </summary>
            <param name="mappingName"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Data.HViewDataConvert.GetIndexByColumnFieldName(System.String)">
            <summary>
            根据列的名称获取对应的Index。
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Data.HViewDataConvert.GetMappingFieldName(System.String)">
            <summary>
            根据动态列名获取对应Mapping 的列
            </summary>
            <param name="dynamicFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Data.HViewDataConvert`1.#ctor(MB.WinBase.Data.HViewConvertCfgParam)">
            <summary>
             数据集合横向转换处理相关。
            </summary>
        </member>
        <member name="M:MB.WinBase.Data.HViewDataConvert`1.Convert(System.Collections.Generic.List{`0},System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo})">
            <summary>
            数据横向转换。
            </summary>
            <param name="dataSource"></param>
            <param name="colPropertys"></param>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.Data.HViewDataConvert`1.DynamicColumns">
            <summary>
            转换过后的动态列信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.HViewDataConvert`1.DynamicColumnValueMappings">
            <summary>
            获取动态的横向转换的列并带有列的动态描述信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.HViewDataConvert`1.CurrentEditData">
            <summary>
            获取当前编辑绑定的数据集。
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.HViewDataConvert`1.DynamicColumnCount">
            <summary>
            最大列的数量。
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.HViewDataConvert`1.ConvertCfgParam">
            <summary>
            转换配置的信息。
            </summary>
        </member>
        <member name="T:MB.WinBase.Data.HViewConvertCfgParam">
            <summary>
            数据横向转换需要的参数设置。
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.HViewConvertCfgParam.DynamicColumnCaption">
            <summary>
            判断动态列的Caption 是否为随着行的不同而发生变化
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.HViewConvertCfgParam.ConvertKeyColumns">
            <summary>
            需要转换为动态列的键名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.HViewConvertCfgParam.ColumnAreaCfgInfo">
            <summary>
            动态列的配置区域。
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.HViewConvertCfgParam.RowAreaColumns">
            <summary>
            行列的配置区域。
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.HViewConvertCfgParam.EditableColumns">
            <summary>
            行列的配置区域可编辑的列。
            </summary>
        </member>
        <member name="T:MB.WinBase.Data.DynamicColumnCfgInfo">
            <summary>
            动态列的配置信息。
            </summary>
        </member>
        <member name="M:MB.WinBase.Data.DynamicColumnCfgInfo.#ctor">
            <summary>
             动态列的配置信息。
            </summary>
        </member>
        <member name="M:MB.WinBase.Data.DynamicColumnCfgInfo.#ctor(System.String)">
            <summary>
             动态列的配置信息。
            </summary>
            <param name="valueColumnName"></param>
        </member>
        <member name="P:MB.WinBase.Data.DynamicColumnCfgInfo.ValueColumnName">
            <summary>
            值列的名称
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.DynamicColumnCfgInfo.CaptionColumnName">
            <summary>
            描述列的名称
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.DynamicColumnCfgInfo.OrderColumnName">
            <summary>
            排序列的名称
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.DynamicColumnCfgInfo.MappingColumnName">
            <summary>
            横向转换后映射到列的名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.DynamicColumnCfgInfo.MappingColumnType">
            <summary>
            对应映射列的数据类型
            </summary>
        </member>
        <member name="T:MB.WinBase.Data.DynamicColumnValueMappingInfo`1">
            <summary>
            动态列并且是动态列Caption的列描述信息。
            </summary>
        </member>
        <member name="T:MB.WinBase.Data.DynamicColumnInfo">
            <summary>
            动态列描述信息
            </summary>
        </member>
        <member name="M:MB.WinBase.Data.DynamicColumnInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            动态列但是固定Caption 需要
            </summary>
            <param name="columnValueCode"></param>
            <param name="caption"></param>
        </member>
        <member name="P:MB.WinBase.Data.DynamicColumnInfo.ColumnValueCode">
            <summary>
            列对应的值。
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.DynamicColumnInfo.Caption">
            <summary>
            动态列对应的描述。
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.DynamicColumnInfo.SortValue">
            <summary>
            动态列对应的描述。
            </summary>
        </member>
        <member name="M:MB.WinBase.Data.DynamicColumnValueMappingInfo`1.#ctor(System.Int32,`0,System.String,System.String,System.String)">
            <summary>
            动态Caption 需要实例化的类。
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.DynamicColumnValueMappingInfo`1.Index">
            <summary>
            在动态列中的位置。
            </summary>
        </member>
        <member name="P:MB.WinBase.Data.DynamicColumnValueMappingInfo`1.DetailEntity">
            <summary>
            描述。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.ObjectEditType">
            <summary>
            对象编辑操作类型。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectEditType.AddNew">
            <summary>
            新增。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectEditType.CopyAsNew">
            <summary>
            复制新增。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectEditType.OpenEdit">
            <summary>
            打开编辑。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectEditType.OpenReadOnly">
            <summary>
            以只读方式打开对象。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectEditType.Delete">
            <summary>
            删除当前选择的数据。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectEditType.Save">
            <summary>
            保存。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectEditType.Submit">
            <summary>
            提交。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectEditType.CancelSubmit">
            <summary>
            取消提交。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectEditType.DesignDemo">
            <summary>
            设计演示
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectEditType.Other">
            <summary>
            其它。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.ObjectState">
            <summary>
            针对单据编辑的状态处理。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectState.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectState.New">
            <summary>
            新创建。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectState.Modified">
            <summary>
            保存但已经发生修改。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectState.Deleted">
            <summary>
            已删除。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectState.Validated">
            <summary>
            已提交。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectState.Approved">
            <summary>
            已审核通过。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectState.Completed">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectState.Withdraw">
            <summary>
            撤消
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectState.Suspended">
            <summary>
            挂起
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectState.Unchanged">
            <summary>
            已保存 并没有发生过改变。
            </summary>
        </member>
        <member name="F:MB.WinBase.Common.ObjectState.OverDocState">
            <summary>
            表示已进入扩展操作状态。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.StyleConditionInfo">
            <summary>
            StyleConditionInfo 网格列样式的条件描述。
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.StyleConditionInfo.#ctor">
            <summary>
             StyleConditionInfo 网格列样式的条件描述。
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.StyleConditionInfo.#ctor(System.String)">
            <summary>
             StyleConditionInfo 网格列样式的条件描述。
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MB.WinBase.Common.StyleConditionInfo.ToString">
            <summary>
            覆盖基类的方法，返回条件的名称。
            </summary>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.Common.StyleConditionInfo.Name">
            <summary>
            条件ID ,可以为空。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.StyleConditionInfo.ColumnName">
            <summary>
            对应列的名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.StyleConditionInfo.DispColName">
            <summary>
            显示Caption 的列的名称。可以为空
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.StyleConditionInfo.ApplyToRow">
            <summary>
            当前设置的条件是否应用到整行。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.StyleConditionInfo.Condition">
            <summary>
            数据比较的条件。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.StyleConditionInfo.StyleName">
            <summary>
            满足条件时，需要显示的样式的名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.StyleConditionInfo.Value">
            <summary>
            比较值。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.StyleConditionInfo.Value2">
            <summary>
            比较值2。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.StyleConditionInfo.IsByEvent">
            <summary>
            是否通过控件事件来控制。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.StyleConditionInfo.Expression">
            <summary>
            表达式
            (目前只支持简单的表达式) 例如：Col1 > Col2")
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.StyleConditionInfo.BackColor">
            <summary>
            背景颜色。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.StyleConditionInfo.ForeColor">
            <summary>
            字体颜色。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.StyleConditionInfo.ForeFont">
            <summary>
            字体。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.StyleConditionInfo.MarkImage">
            <summary>
            图片信息。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.UIRuleXmlConfigInfo">
            <summary>
            业务对象的XML配置信息.
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.UIRuleXmlConfigInfo.GetDefaultColumns">
            <summary>
            获取主表默认数值列信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Common.UIRuleXmlConfigInfo.GetDefaultStyleConditions">
            <summary>
            获取主表默认的样式信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Common.UIRuleXmlConfigInfo.GetDefaultChartViewCfg">
            <summary>
            获取图表默认的配置信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.Common.UIRuleXmlConfigInfo.ColumnsCfgEdit">
            <summary>
            UI层 控制业务类的编辑列信息。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.WorkWaitDialogArgs">
            <summary>
             参数说明当前正在处理的情况。
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.WorkWaitDialogArgs.#ctor(System.Object,System.Boolean)">
            <summary>
             参数说明当前正在处理的情况。
            </summary>
            <param name="_CurrentProcessContent"></param>
            <param name="processed"></param>
        </member>
        <member name="P:MB.WinBase.Common.WorkWaitDialogArgs.CurrentProcessContent">
            <summary>
            当前正在处理的内容。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.WorkWaitDialogArgs.Processed">
            <summary>
            判断是否已处理完成。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.WorkWaitDialogArgs.Cancel">
            <summary>
            判断是否为取消。
            </summary>
        </member>
        <member name="T:MB.WinBase.Ctls.ComboxExtenderHelper">
            <summary>
            常用Combox 方法处理。
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ComboxExtenderHelper.SaveSelected(System.Windows.Forms.ComboBox)">
            <summary>
            把用户选择的项存储起来。
            </summary>
            <param name="cobBox"></param>
            <param name="saveKey"></param>
        </member>
        <member name="M:MB.WinBase.Ctls.ComboxExtenderHelper.ResumeSelected(System.Windows.Forms.ComboBox)">
            <summary>
            恢复用户选择的项
            </summary>
            <param name="cobBox"></param>
            <param name="saveKey"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Ctls.ComboxExtenderHelper.SaveToFile(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            把Combox 的数据项加载到ini文件中
            </summary>
            <param name="cobBox"></param>
            <param name="saveKey"></param>
            <param name="currentInputVal"></param>
        </member>
        <member name="M:MB.WinBase.Ctls.ComboxExtenderHelper.ReadFromFile(System.Windows.Forms.ComboBox)">
            <summary>
            从保存的文件读取默认设置的值.
            </summary>
            <param name="cobBox"></param>
            <param name="saveKey"></param>
        </member>
        <member name="M:MB.WinBase.Ctls.frmEditDateFilter.ShowFilterForm(System.Windows.Forms.IWin32Window)">
            <summary>
            显示
            </summary>
            <param name="parent"></param>
        </member>
        <member name="F:MB.WinBase.Ctls.frmEditDateFilter.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.frmEditDateFilter.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MB.WinBase.Ctls.frmEditDateFilter.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MB.WinBase.Ctls.TreeViewDataBinding`1">
            <summary>
            提供树型控件需要的公共处理方法。
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.TreeViewDataBinding`1.#ctor(System.Windows.Forms.TreeView,System.String,System.String,System.String)">
            <summary>
            树型控件数据绑定处理相关。
            </summary>
            <param name="treeViewCtl"></param>
            <param name="textFieldName"></param>
            <param name="keyName"></param>
            <param name="prevKeyName"></param>
        </member>
        <member name="M:MB.WinBase.Ctls.TreeViewDataBinding`1.RefreshDataSource(System.Collections.Generic.List{`0})">
            <summary>
            刷新数据源
            </summary>
            <param name="entitys"></param>
        </member>
        <member name="P:MB.WinBase.Ctls.TreeViewDataBinding`1.CurrentFormate">
            <summary>
            当前自定义树型节点格式化器。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.TreeViewDataBinding`1.RootNodePrevKeyValue">
            <summary>
            最顶层节点上级节点的键值
            </summary>
        </member>
        <member name="T:MB.WinBase.Ctls.ITreeViewDataBindingFormate`1">
            <summary>
            数据绑定时 格式化树型节点需要实现的接口。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MB.WinBase.Ctls.ITreeViewDataBindingFormate`1.Format(System.Windows.Forms.TreeNode,`0)">
            <summary>
             格式化当前创建的树型节点。
            </summary>
            <param name="tNode"></param>
            <param name="createNodeEntity"></param>
        </member>
        <member name="T:MB.WinBase.Ctls.ucComboCheckedListBox">
            <summary>
            下拉多选Combox。
            </summary>
        </member>
        <member name="F:MB.WinBase.Ctls.ucComboCheckedListBox.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ucComboCheckedListBox.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:MB.WinBase.Ctls.ucComboCheckedListBox.SetItemsChecked(System.Collections.IList)">
            <summary>
            通过Keys值设置items 的Checked 
            </summary>
            <param name="pKeys"></param>
        </member>
        <member name="M:MB.WinBase.Ctls.ucComboCheckedListBox.SetItemsAllChecked(System.Boolean)">
            <summary>
            让所有的Items 在Checked 或者UnChecked 状态
            </summary>
            <param name="pChecked"></param>
        </member>
        <member name="M:MB.WinBase.Ctls.ucComboCheckedListBox.SetItemsChecked(System.Int32,System.Boolean)">
            <summary>
            通过Index 来设置Item 的Checked 状态
            </summary>
            <param name="pIndex"></param>
            <param name="pCheched"></param>
        </member>
        <member name="M:MB.WinBase.Ctls.ucComboCheckedListBox.GetAllCheckedItemsKey">
            <summary>
            得到checked 的item 的key值
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Ctls.ucComboCheckedListBox.GetAllCheckedItems">
            <summary>
            得到所有的checked 的item
            </summary>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.Ctls.ucComboCheckedListBox.ValueMember">
            <summary>
            数据显示键值
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucComboCheckedListBox.DisplayMember">
            <summary>
            数据显示名称
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucComboCheckedListBox.DataSource">
            <summary>
            绑定数据源。
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucComboCheckedListBox.OnlyItemChecked">
            <summary>
            判断是否只有一个商品是选择的
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucComboCheckedListBox.FilterByCode">
            <summary>
            判断是否只有一个商品是选择的
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucComboCheckedListBox.ListObject">
             <summary>
            得到或者编辑一个树的节点集合 
             </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucComboCheckedListBox.Text">
            <summary>
            得到或者设置这个控件的文本
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucComboCheckedListBox.TextReadOnly">
            <summary>
            设置控件的文本是否为只读
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucComboCheckedListBox.BranchSeparator">
            <summary>
            得到或者设置节点之间的分割符
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucComboCheckedListBox.CaptionText">
            <summary>
             标题描述
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucComboCheckedListBox.CaptionVisible">
            <summary>
             是否显示控件标题
            </summary>
        </member>
        <member name="P:MB.WinBase.Ctls.ucComboCheckedListBox.Items">
            <summary>
            得到CheckedListItem的所有项 
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ucComboCheckedListBox.LabelEx.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ucComboCheckedListBox.LabelEx.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MB.WinBase.Ctls.ucComboCheckedListBox.ButtonEx.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ucComboCheckedListBox.ButtonEx.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MB.WinBase.Ctls.ucComboCheckedListBox.ButtonEx.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MB.WinBase.Ctls.ucComboCheckedListBox.ButtonEx.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:MB.WinBase.Ctls.ucComboCheckedListBox.CheckListItem">
            <summary>
            CheckListItem  下拉列表框增加需要的结构
            </summary>
        </member>
        <member name="M:MB.WinBase.Ctls.ucComboCheckedListBox.CheckListItem.ToString">
            <summary>
            覆盖该方法是为了使该对象的值在下拉列表框中显示出来
            </summary>
            <returns></returns>
        </member>
        <member name="T:MB.WinBase.DesignEditor.AbstractComboBoxEditor">
            <summary>
            提供下拉选择编辑的方法。
            </summary>
        </member>
        <member name="T:MB.WinBase.DesignEditor.ConvertToDropDownList">
            <summary>
             约束编辑的属性是否可以进行输入。
            </summary>
        </member>
        <member name="T:MB.WinBase.DesignEditor.BaseEditorObject">
            <summary>
            编辑对象的抽象基类。
            </summary>
        </member>
        <member name="T:MB.WinBase.DesignEditor.EditorDescription">
            <summary>
            编辑属性的中文描述。
            </summary>
        </member>
        <member name="M:MB.WinBase.Design.MyComboxRememberProvider.GetComboxSaveMaxCount(System.Windows.Forms.ComboBox)">
            <summary>
            
            </summary>
            <param name="combox"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Design.MyComboxRememberProvider.SetComboxSaveMaxCount(System.Windows.Forms.ComboBox,System.Int32)">
            <summary>
            
            </summary>
            <param name="box"></param>
            <param name="maxItem"></param>
        </member>
        <member name="F:MB.WinBase.Design.MyComboxRememberProvider.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:MB.WinBase.Design.MyComboxRememberProvider.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:MB.WinBase.Design.MyComboxRememberProvider.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:MB.WinBase.Design.MyNullValueProvider">
            <summary>
            空值提示描述 
            </summary>
        </member>
        <member name="M:MB.WinBase.Design.MyNullValueProvider.IsNullValue(System.Windows.Forms.Control)">
            <summary>
            判断当前控件是否为空值。
            </summary>
            <param name="txtBox"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Design.MyNullValueProvider.GetNullValueDescription(System.Windows.Forms.Control)">
            <summary>
             获取或者设置控值的描述信息
            </summary>
            <param name="txtBox"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Design.MyNullValueProvider.SetNullValueDescription(System.Windows.Forms.Control,System.String)">
            <summary>
             获取或者设置控值的描述信息
            </summary>
            <param name="txtBox"></param>
            <param name="nullValueDesc"></param>
        </member>
        <member name="F:MB.WinBase.Design.MyNullValueProvider.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:MB.WinBase.Design.MyNullValueProvider.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:MB.WinBase.Design.MyNullValueProvider.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="M:MB.WinBase.Design.MyTableLayoutPanelProvider.GetAutoLayoutPanel(System.Windows.Forms.TableLayoutPanel)">
            <summary>
             获取或者设置TableLayoutPanel 的布局
            </summary>
            <param name="panel"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Design.MyTableLayoutPanelProvider.SetAutoLayoutPanel(System.Windows.Forms.TableLayoutPanel,System.Boolean)">
            <summary>
             获取或者设置TableLayoutPanel 的布局
            </summary>
            <param name="panel"></param>
            <param name="autoLayout"></param>
        </member>
        <member name="F:MB.WinBase.Design.MyTableLayoutPanelProvider.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:MB.WinBase.Design.MyTableLayoutPanelProvider.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:MB.WinBase.Design.MyTableLayoutPanelProvider.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:MB.WinBase.Exceptions.DataBindingException">
            <summary>
            数据自动绑定异常。
            </summary>
        </member>
        <member name="T:MB.WinBase.Exceptions.NotAllowImplementedException">
            <summary>
            当前对象不能执行该项操作，可能该操作未实现或不能执行
            </summary>
        </member>
        <member name="T:MB.WinBase.Exceptions.RuleClientConfigException">
            <summary>
            客户端异常配置出错！
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.GridViewLayoutInfo">
            <summary>
             网格列布局的描述信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridViewLayoutInfo.Name">
            <summary>
             网格布局的名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridViewLayoutInfo.GridViewType">
            <summary>
             网格类型。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridViewLayoutInfo.GridLayoutColumns">
            <summary>
            列的描述信息
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridViewLayoutInfo.ReadOnly">
            <summary>
            判断当前创建的网格是否为只读。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridViewLayoutInfo.DataSource">
            <summary>
            需要绑定的数据源。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.GridColumnLayoutInfo">
            <summary>
            网格列布局的描述信息。
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.GridColumnLayoutInfo.CloneWithoutChilds">
            <summary>
            创建当前不带Childs 的副表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.Common.GridColumnLayoutInfo.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.Common.GridColumnLayoutInfo.Name">
            <summary>
            布局列名称
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridColumnLayoutInfo.Text">
            <summary>
            文本描述
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridColumnLayoutInfo.Type">
            <summary>
            创建列的类型
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridColumnLayoutInfo.ForeColor">
            <summary>
            字体颜色
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridColumnLayoutInfo.BackColor">
            <summary>
            背景颜色。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridColumnLayoutInfo.ForeFontSize">
            <summary>
            字体大小。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridColumnLayoutInfo.VisibleWidth">
            <summary>
            显示宽度
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridColumnLayoutInfo.Index">
            <summary>
            位置。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridColumnLayoutInfo.DisplayFormat">
            <summary>
            字段值显示的格式。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridColumnLayoutInfo.Fixed">
            <summary>
            是否以该列作为
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridColumnLayoutInfo.DynamicChild">
            <summary>
            判断子对象是否为动态列。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridColumnLayoutInfo.ColumnXmlCfgName">
            <summary>
            对应XML列配置的信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.Common.GridColumnLayoutInfo.Childs">
            <summary>
            子列信息设置。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.DisplayFormat">
            <summary>
            DisplayFormat 格式化显示数据.
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.DisplayFormat.#ctor">
            <summary>
            构造函数...
            </summary>
        </member>
        <member name="M:MB.WinBase.Common.DisplayFormat.#ctor(System.String,MB.WinBase.Common.FormatType)">
            <summary>
            构造函数...
            </summary>
            <param name="formatString"></param>
            <param name="formatType"></param>
        </member>
        <member name="T:MB.WinBase.Common.FormatType">
            <summary>
            FormatType 字符窜格式化显示的类型。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.GridViewType">
            <summary>
            网格视图类型。
            </summary>
        </member>
        <member name="T:MB.WinBase.Common.FixedStyle">
            <summary>
            Fixed 样式。
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IAsynClientQueryRule">
            <summary>
            异步查询分析需要实现的接口。
            默认的查询分析Client 端业务类必须实现的接口。
            主要针对返回值是dataSet 的解决方案。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IAsynClientQueryRule.BeginRunWorker(MB.Util.Model.QueryParameterInfo[])">
            <summary>
            开始调用方法之前。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IAsynClientQueryRule.GetBufferCount">
            <summary>
            获取本次需要下载的数据块总数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IAsynClientQueryRule.BeginGetBufferByIndex(System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="callback"></param>
            <param name="asyncState"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IAsynClientQueryRule.EndGetBufferByIndex(System.IAsyncResult)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IAsynClientQueryRule.WorkerCompleted">
            <summary>
            在调用结束后调用的方法。
            </summary>
        </member>
        <member name="E:MB.WinBase.IFace.IAsynClientQueryRule.GetBufferByIndexCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IBaseClientArea">
            <summary>
            自定义客户端UI 必须要实现的接口。
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IBaseDataBindingEdit">
            <summary>
            基于绑定窗口的控件实现。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IBaseDataBindingEdit.CurrentEditEntity">
            <summary>
            当前对象编辑实体，可以为dataRow.
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IBaseDataBindingEdit.BindingSource">
            <summary>
            数据绑定的List。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IBaseDataBindingEdit.DataBindingProvider">
            <summary>
            数据绑定提供的对象。
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IBaseEditForm">
            <summary>
            编辑窗口类必须要实现的接口。
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IForm">
            <summary>
            创建的窗口必须要实现的接口。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IForm.Close">
            <summary>
            关闭当前窗口。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IForm.ClientRuleObject">
            <summary>
            客户端关联处理类，连接浏览，编辑，查询的 桥梁。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IForm.ActiveUIType">
            <summary>
            当前窗口的类型。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IBaseEditForm.AddNew">
            <summary>
            创建一个新的数据实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IBaseEditForm.Save">
            <summary>
            保存当前窗口编辑的数据到缓存中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IBaseEditForm.Cancel">
            <summary>
            撤消，如果已经保存那么就不能再撤消，只能删除。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IBaseEditForm.Delete">
            <summary>
            删除当前选择的行。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IBaseEditForm.Submit">
            <summary>
            提交保存的数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IBaseEditForm.CancelSubmit">
            <summary>
            撤消已经提交的数据。
            </summary>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.IFace.IBaseEditForm.CurrentEditType">
            <summary>
            当前编辑窗口对象编辑状态。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IBaseEditForm.BeforeSaveDetailEntityCache">
            <summary>
            明细数据编辑临时存储的集合，
            每次数据存储处理时都要从该集合中获取明细的数据进行处理，
            完成后再清空该集合为下次存储处理做准备。
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IBfModuleCommentClient">
            <summary>
            模块评论客户端需要实现的接口。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IBfModuleCommentClient.GetObjects(MB.Util.Model.QueryParameterInfo[])">
            <summary> 
            获取主表数据。 
            </summary> 
            <param name="xmlFilterParams"></param> 
            <returns></returns> 
        </member>
        <member name="M:MB.WinBase.IFace.IBfModuleCommentClient.AddObject(MB.Util.Model.BfModuleCommentInfo)">
            <summary> 
            增加数据到Cache 中。 
            </summary> 
            <param name="dataInDocType">在单据中的数据类型,默认为主表的数据。</param> 
            <param name="entity">需要增加的实体。</param> 
            <param name="propertys">需要增加的该实体的指定属性。</param> 
            <returns></returns> 
        </member>
        <member name="M:MB.WinBase.IFace.IBfModuleCommentClient.DeleteObject(System.Int32)">
            <summary>
            直接删除评语。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IBfModuleCommentClient.ClearObject(System.String,System.String)">
            <summary>
            清除指定模块的所有评语。
            </summary>
            <param name="applicationIdentity"></param>
            <param name="moduleIdentity"></param>
            <returns></returns>
        </member>
        <member name="T:MB.WinBase.IFace.IChartViewControl">
            <summary>
             图表自定义控件必须要实现的接口
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IChartViewControl.CreateDataBinding(MB.WinBase.IFace.IClientRuleConfig,System.Data.DataSet)">
            <summary>
            将数据源绑定到 MB.WinChart.ChartView 控件.
            </summary>
            <param name="clientRule">当前分析的业务对象</param>
            <param name="dsData">数据源</param>
        </member>
        <member name="M:MB.WinBase.IFace.IChartViewControl.RefreshLayout">
            <summary>
            刷新控件.
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.ICustomQueryViewRule">
            <summary>
            对于想要自动以查询结果的窗口，需要实现的rule
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.ICustomQueryViewRule.CustomViewType">
            <summary>
            创建自定义的控件，返回的控件需要从System.Windows.Forms.Control继承而来
            </summary>
            <returns></returns>
        </member>
        <member name="T:MB.WinBase.IFace.ICustomViewControl">
            <summary>
            自定义查询控件需要实现的接口
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.ICustomViewControl.CreateDataBinding(MB.WinBase.IFace.IClientRuleQueryBase,System.Object)">
            <summary>
            将数据源绑定到自定义控件.
            </summary>
            <param name="clientRule">当前分析的业务对象</param>
            <param name="dataSource">数据源</param>
        </member>
        <member name="M:MB.WinBase.IFace.ICustomViewControl.Export">
            <summary>
            导出数据
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IDataAssistantListControl">
            <summary>
            获取数据帮助窗口中调用浏览数据列表的控件必须实现的接口。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IDataAssistantListControl.SetDataSource(MB.WinBase.IFace.IClientRuleQueryBase,System.Object)">
            <summary>
            设置列表数据源。
            </summary>
            <param name="clientRule"></param>
            <param name="dataSource"></param>
        </member>
        <member name="M:MB.WinBase.IFace.IDataAssistantListControl.CheckListViewItem(System.Boolean)">
            <summary>
            选择当前列表中的数据。
            </summary>
            <param name="checkAll"></param>
        </member>
        <member name="M:MB.WinBase.IFace.IDataAssistantListControl.GetSelectRows">
            <summary>
            获取选择的数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IDataAssistantListControl.GetSelectRowsWithIndex">
            <summary>
            获取选择的数据。
            </summary>
            <returns></returns>
        </member>
        <member name="E:MB.WinBase.IFace.IDataAssistantListControl.AfterSelectData">
            <summary>
            双击选择列表数据源后产生的事件。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IDataAssistantListControl.MultiSelect">
            <summary>
            判断是否为多选。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IDataAssistantListControl.ColumnEditCfgInfo">
            <summary>
            XML 配置信息。
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IDataFilterElementHoster">
            <summary>
            业务类可选需要实现的接口以满足个性化设置的需要。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IDataFilterElementHoster.AfterCreateFilterCtl(System.Windows.Forms.Control,MB.WinBase.Common.DataFilterElementCfgInfo)">
            <summary>
            创建查询过滤控件后调用的方法。
            </summary>
            <param name="editCtl"></param>
            <param name="cfgInfo"></param>
        </member>
        <member name="T:MB.WinBase.IFace.IFilterConditionCtl">
            <summary>
            自定义查询控件必须要实现的接口
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IFilterConditionCtl.GetQueryParameters">
            <summary>
             获取输入的查询条件。
            </summary>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.IFace.IFilterConditionCtl.AllowEmptyFilter">
            <summary>
            判断是否可以查询所有数据。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IPreFilterConditionCtl.GetPreQueryParameters">
            <summary>
             获取已输入的查询条件。
            </summary>
            <returns></returns>
        </member>
        <member name="T:MB.WinBase.IFace.IInvokeDataAssistantHoster">
            <summary>
            数据过滤助手在执行获取数据的过程中需要调用的方法, 需要在承载的主窗口中实现该接口。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IInvokeDataAssistantHoster.BeforeShowDataAssistant(System.Object,MB.WinBase.IFace.InvokeDataAssistantHosterEventArgs)">
            <summary>
            在显示查询窗口前发生。
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:MB.WinBase.IFace.IInvokeDataAssistantHoster.BeforeGetFilterData(System.Object,MB.WinBase.IFace.InvokeDataAssistantHosterEventArgs)">
            <summary>
            在根据用户输入的过滤条件获取数据前发生。
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:MB.WinBase.IFace.IDataAssistant">
            <summary>
            获取数据帮助窗口必须实现的接口。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IDataAssistant.GetFilterObjects(System.Int32,System.Collections.Generic.List{MB.Util.Model.QueryParameterInfo})">
            <summary>
             获取对象数据。
            </summary>
            <param name="dataInDocType"></param>
            <param name="filterParameters"></param>
            <returns></returns>
        </member>
        <member name="E:MB.WinBase.IFace.IDataAssistant.AfterGetObjectData">
            <summary>
            选择数据后相应的实践。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IDataAssistant.MultiSelect">
            <summary>
            是否可以多选。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IDataAssistant.QueryObject">
            <summary>
             执行获取数据的查询对象。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IDataAssistant.HideFilterPane">
            <summary>
            获取或设置是否显示过滤Panel。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IDataAssistant.FilterParametersIfNoFiterPanel">
            <summary>
            当隐藏过滤的Panel的时候，可以默认注入查询过滤条件
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IDataAssistant.MaxSelectRows">
            <summary>
            多选最大行数
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IGetObjectDataAssistant">
            <summary>
            获取数据助手控件需要必须实现的接口。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IGetObjectDataAssistant.FilterClientRule">
            <summary>
             业务类。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IGetObjectDataAssistant.ClumnEditCfgInfo">
            <summary>
            XML 配置信息。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IGetObjectDataAssistant.InvokeDataSourceDesc">
            <summary>
            调用的描述
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IGetObjectDataAssistant.InvokeFilterParentFormHoster">
            <summary>
            在通过数据助手获取数据时需要通知的对象。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IGetObjectDataAssistant.InvokeParentControl">
            <summary>
            调用它的主控件。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IGetObjectDataAssistant.CurrentEditObject">
            <summary>
            当前编辑对象
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.GetObjectDataAssistantEventHandle">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="arg"></param>
        </member>
        <member name="P:MB.WinBase.IFace.GetObjectDataAssistantEventArgs.SelectedRows">
            <summary>
            当前选择的数据。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.GetObjectDataAssistantEventArgs.Handed">
            <summary>
            判断是否已经处理。
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IMdiMainForm">
            <summary>
            MDI 窗口必须要实现的接口。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IMdiMainForm.Exit">
            <summary>
            退出应用程序。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IMdiMainForm.GetActiveMdiChildForm">
            <summary>
            获取当前活动的窗口。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IMdiMainForm.ShowFunctionTree">
            <summary>
            显示功能模块树。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IMdiMainForm.ShowOnlineMessage">
            <summary>
            显示在线消息。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IMdiMainForm.ShowUserSetting">
            <summary>
            显示个人设置。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IMdiMainForm.ShowApplicationSetting">
            <summary>
            显示系统设置。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IMdiMainForm.SaveMdiLayput">
            <summary>
            保持MDI 布局
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IMdiMainForm.ValidatedColumns(MB.WinBase.IFace.IForm)">
            <summary>
            验证列.
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IMdiMainForm.ValidatedEditForm(MB.WinBase.IFace.IForm)">
            <summary>
            验证当前活动编辑的窗口.
            </summary>
            <param name="activeEditForm"></param>
        </member>
        <member name="T:MB.WinBase.IFace.IQueryFilterForm">
            <summary>
            过滤查询窗口必须实现的接口
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IQueryFilterForm.IniCreateFilterElements">
            <summary>
            初始化创建
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IQueryFilterForm.DataFilterElementsName">
            <summary>
             DataFilterElements 配置名称。
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IQueryFilterForm.ViewGridForm">
            <summary>
            主浏览窗口。
            </summary>
        </member>
        <member name="E:MB.WinBase.IFace.IQueryFilterForm.AfterInputQueryParameter">
            <summary>
            条件编辑确认后响应的事件。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.QueryFilterInputEventArgs.#ctor(MB.Util.Model.QueryParameterInfo[])">
            <summary>
            
            </summary>
            <param name="_QueryParamters"></param>
        </member>
        <member name="P:MB.WinBase.IFace.QueryFilterInputEventArgs.QueryParamters">
            <summary>
            当前选择的数据。
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IQueryObject">
            <summary>
            获取数据对象需要实现的接口。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IQueryObject.GetFilterObjects(MB.Util.Model.QueryParameterInfo[])">
            <summary>
             获取对象数据。
            </summary>
            <param name="dataInDocType"></param>
            <param name="filterParameters"></param>
            <returns></returns>
        </member>
        <member name="T:MB.WinBase.IFace.IViewGridForm">
            <summary>
            网纲浏览窗口必须要实现的接口。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IViewGridForm.Save">
            <summary>
            数据保存。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IViewGridForm.AddNew">
            <summary>
            创建新对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IViewGridForm.CopyAsNew">
            <summary>
            复制一个新行。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IViewGridForm.Open">
            <summary>
            打开一个数据实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IViewGridForm.Delete">
            <summary>
            删除当前选择的行。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IViewGridForm.Query">
            <summary>
            查询处理。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IViewGridForm.Refresh">
            <summary>
            刷新。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IViewGridForm.DataImport">
            <summary>
            数据导入处理。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.IFace.IViewGridForm.GetCurrentMainGridView(System.Boolean)">
            <summary>
            当前浏览数据的网格窗口。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IViewGridForm.ExistsUnSaveData">
            <summary>
            判断是否存在未保存的数据。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IViewGridForm.DataExport">
            <summary>
            数据导出。
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IViewGridForm.ReloadData">
            <summary>
            刷新浏览界面，重新加载列及数据
            </summary>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.IFace.IViewGridForm.IsTotalPageDisplayed">
            <summary>
            是否显示所有页数
            </summary>
        </member>
        <member name="M:MB.WinBase.IFace.IViewDynamicGroupGridForm.OpenDynamicSettingForm">
            <summary>
            打开动态聚组设计的界面
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IViewDynamicGroupGridForm.IsDynamicGroupIsActive">
            <summary>
            动态聚组是否被激活
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IViewDynamicGroupGridForm.DynamicGroupSettingForQuery">
            <summary>
            动态聚组的条件设定
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IViewGridFormWithGreatData">
            <summary>
            支持大数据查询的模块需要实现的接口
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IViewGridFormWithGreatData.IsQueryAll">
            <summary>
            是否查询出全部数据，不分页
            这个值在客户端配置 "DataFilter/Elements -> AllowQueryAll"属性
            </summary>
        </member>
        <member name="T:MB.WinBase.IFace.IWaitDialogFormHoster">
            <summary>
            等待窗口调用的需要实现的接口
            </summary>
        </member>
        <member name="P:MB.WinBase.IFace.IWaitDialogFormHoster.ProcessState">
            <summary>
            异步调用等待处理窗口需要接收的状态参数。
            </summary>
        </member>
        <member name="M:MB.WinBase.Images.ImageHelper.CreateBitmapFromResources(System.String)">
            <summary>
            从资源中创建一个位图。
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:MB.WinBase.InvokeMethodWithWaitCursor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.WinBase.InvokeMethodWithWaitCursor.#ctor(System.Action)">
            <summary>
            InvokeMethodWithWaitCursor
            </summary>
            <param name="exectute">需要被执行的操作</param>
        </member>
        <member name="M:MB.WinBase.InvokeMethodWithWaitCursor.#ctor(System.Action,System.String)">
            <summary>
            InvokeMethodWithWaitCursor
            </summary>
            <param name="exectute">需要被执行的操作</param>
            <param name="waitingMessage">等待操作过程中显示在客户端的消息</param>
        </member>
        <member name="M:MB.WinBase.InvokeMethodWithWaitCursor.InvokeWithWait(System.Action)">
            <summary>
            InvokeWithWait.
            </summary>
            <param name="exectute"></param>
        </member>
        <member name="M:MB.WinBase.InvokeMethodWithWaitCursor.InvokeWithWait(System.Action,System.String)">
            <summary>
            InvokeWithWait.
            </summary>
            <param name="exectute"></param>
        </member>
        <member name="M:MB.WinBase.InvokeMethodWithWaitCursor.InvokeWithWait(System.Action,System.Windows.Forms.IWin32Window)">
            <summary>
            InvokeWithWait.
            </summary>
            <param name="exectute"></param>
            <param name="winParent"></param>
        </member>
        <member name="M:MB.WinBase.InvokeMethodWithWaitCursor.InvokeWithWait(System.Action,System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            InvokeWithWait.
            </summary>
            <param name="exectute"></param>
            <param name="winParent"></param>
        </member>
        <member name="M:MB.WinBase.InvokeMethodWithWaitCursor.Invoke(System.Windows.Forms.IWin32Window)">
            <summary>
            
            </summary>
            <param name="winParent"></param>
        </member>
        <member name="M:MB.WinBase.InvokeMethodWithWaitCursor.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:MB.WinBase.LayoutXmlConfigHelper">
            <summary>
            获取UI 层 客户端XML 配置信息相关。 
            </summary>
        </member>
        <member name="F:MB.WinBase.LayoutXmlConfigHelper.COLUMN_CONFIG_NODE">
            <summary>
            字段对应列的配置信息
            </summary>
        </member>
        <member name="F:MB.WinBase.LayoutXmlConfigHelper.EDIT_UI_CONFIG_NODE">
            <summary>
            Edit UI 的列配置信息。
            </summary>
        </member>
        <member name="F:MB.WinBase.LayoutXmlConfigHelper.SUMMARY_COLUMN_CONFIG_NODE">
            <summary>
            汇总的列配置信息
            </summary>
        </member>
        <member name="F:MB.WinBase.LayoutXmlConfigHelper.SUMMARY_INFO_CONFIG_NODE">
            <summary>
            汇总的列配置信息
            </summary>
        </member>
        <member name="F:MB.WinBase.LayoutXmlConfigHelper.GROUP_FIELDS_CONFIG_NODE">
            <summary>
            Group Info 的字段配置信息。
            </summary>
        </member>
        <member name="F:MB.WinBase.LayoutXmlConfigHelper.STYLE_CONDITION_CONFIG_NODE">
            <summary>
            列表样式列配置信息。
            </summary>
        </member>
        <member name="F:MB.WinBase.LayoutXmlConfigHelper.HVIEW_UI_CONFIG_NODE">
            <summary>
            纵向转横向需要配置的列配置信息。
            </summary>
        </member>
        <member name="F:MB.WinBase.LayoutXmlConfigHelper.QUERY_ELEMENTS">
            <summary>
            用户查询配置的信息。
            </summary>
        </member>
        <member name="F:MB.WinBase.LayoutXmlConfigHelper.GRID_VIEW_COLUMN_CONFIG_NODE">
            <summary>
             获取网格列布局的配置信息。
            </summary>
        </member>
        <member name="F:MB.WinBase.LayoutXmlConfigHelper.HVIEW_CONVERT_CFG">
            <summary>
            横向动态转换的配置信息。
            </summary>
        </member>
        <member name="F:MB.WinBase.LayoutXmlConfigHelper.DATA_IMPORT_CFG">
            <summary>
            数据导入配置相关。
            </summary>
        </member>
        <member name="F:MB.WinBase.LayoutXmlConfigHelper.TREE_LIST_VIEW_CONFIG_NODE">
            <summary>
            树型控件的节点配置信息
            </summary>
        </member>
        <member name="F:MB.WinBase.LayoutXmlConfigHelper.CHART_VIEW_CFG">
            <summary>
            图表的配置信息
            </summary>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.CreateNULLDataByFieldPropertys(System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo})">
            <summary>
            根据配置的XML文件得到一个空的DataSet
            </summary>
            <param name="colPropertys"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetLogicKeys(System.String)">
            <summary>
            获取指定 XML 文件逻辑主键。
            </summary>
            <param name="xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetExistsCheckFields(System.String)">
            <summary>
            获取需要进行数据库存在判断的字段名称。
            </summary>
            <param name="xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetMainGridViewRowHeight(System.String)">
            <summary>
            获取主窗口行的高度
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetTreeListViewCfgInfo(System.String,System.String)">
            <summary>
            获取树型控件的节点配置名称。
            </summary>
            <param name="xmlFileName"></param>
            <param name="cfgName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetHViewConvertCfgParam(System.String,System.String)">
            <summary>
            获取横向动态转换的配置信息。
            </summary>
            <param name="xmlFileName"></param>
            <param name="cfgName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetDataImportCfgInfo(System.String,System.String)">
            <summary>
            获取数据导入配置相关信息。
            </summary>
            <param name="xmlFileName"></param>
            <param name="cfgName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetGridColumnLayoutInfo(System.Xml.XmlDocument,System.String)">
            <summary>
            获取网格列布局的配置信息。
            </summary>
            <param name="xmlFileName"></param>
            <param name="cfgName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetGridColumnLayoutInfo(System.String,System.String)">
            <summary>
            获取网格列布局的配置信息。
            </summary>
            <param name="xmlFileName"></param>
            <param name="cfgName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetDataFilterCfgElements(System.String,System.String)">
            <summary>
             根据xml文件名称 获取相应的对象查询配置信息。
            </summary>
            <param name="xmlFileName"></param>
            <param name="cfgName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetStyleConditions(System.String)">
            <summary>
            根据xml文件名称 获取相应的列表 Style Info 的信息。
            </summary>
            <param name="mapXmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetColumnPropertys(System.Xml.XmlDocument)">
            <summary>
            获取XML 文件配置中列的配置信息。
            </summary>
            <param name="xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetColumnPropertys(System.String)">
            <summary>
            获取XML 文件配置中列的配置信息。
            </summary>
            <param name="xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetColumnEdits(System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo},System.Xml.XmlDocument)">
            <summary>
            根据XML 文件获取 对应列需要的编辑配置信息。
            </summary>
            <param name="columnPropertys"></param>
            <param name="xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetColumnEdits(System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo},System.String)">
            <summary>
            根据XML 文件获取 对应列需要的编辑配置信息。
            </summary>
            <param name="columnPropertys"></param>
            <param name="xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.GetSummaryInfo(System.String)">
            <summary>
            得到汇总信息
            </summary>
            <param name="xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.getColumnSummary(System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo},System.String)">
            <summary>
            根据XML 文件获取 对应列需要的编辑配置信息。
            </summary>
            <param name="columnPropertys"></param>
            <param name="xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.getChartViewCfg(System.String)">
            <summary>
            根据XML 文件获取 图表需要的配置信息。
            </summary>
            <param name="columnPropertys"></param>
            <param name="xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.fillSummaryInfoDataSource(MB.WinBase.Common.SummaryInfo)">
            <summary>
            填充汇总UI的数据源
            </summary>
            <param name="summaryInfo"></param>
        </member>
        <member name="M:MB.WinBase.LayoutXmlConfigHelper.handleSummaryCols(System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo},System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnSummaryInfo})">
            <summary>
            处理汇总的列的信息
            包括了从ColumnPropertyInfo填充一些信息，处理一些误加入空格的情况
            </summary>
            <param name="colPropertys"></param>
            <param name="summaryCols"></param>
        </member>
        <member name="P:MB.WinBase.LayoutXmlConfigHelper.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="T:MB.WinBase.MessageBoxEx">
            <summary>
            MessageBoxEx 用户提示消息框。
            </summary>
        </member>
        <member name="M:MB.WinBase.MessageBoxEx.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.WinBase.MessageBoxEx.Show(System.String,System.String[])">
            <summary>
            显示用户消息。
            </summary>
            <param name="pMsg"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.MessageBoxEx.Show(System.String,System.Windows.Forms.MessageBoxIcon,System.String[])">
            <summary>
            显示用户消息。
            </summary>
            <param name="pMsg"></param>
            <param name="msgIco"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.MessageBoxEx.Show(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pMsg"></param>
            <param name="mustShowByMsgBox"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.MessageBoxEx.Show(System.String,System.Windows.Forms.MessageBoxIcon,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pMsg"></param>
            <param name="mustShowByMsgBox">是否必须用MessageBox来显示</param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxIcon,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pOwner"></param>
            <param name="pMsg"></param>
            <param name="mustShowByMsgBox">是否必须用MessageBox来显示</param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.MessageBoxEx.Question(System.String,System.String[])">
            <summary>
            提问消息。
            </summary>
            <param name="pMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.MessageBoxEx.Question(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            
            </summary>
            <param name="pOwner"></param>
            <param name="pMsg"></param>
            <returns></returns>
        </member>
        <member name="T:MB.WinBase.MyCodeRunTrackInjection">
            <summary>
            存在于WCF 服务端的代码运行跟踪器。
            </summary>
        </member>
        <member name="M:MB.WinBase.MyCodeRunTrackInjection.BeginProcess(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            方法调用之前。
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:MB.WinBase.MyCodeRunTrackInjection.EndProcess(System.DateTime,System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            方法调用之后。
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:MB.WinBase.ObjectDataFilterAssistantHelper.CreateDataAssistantObject(System.Object,MB.WinBase.Common.ColumnEditCfgInfo,System.Windows.Forms.Control)">
            <summary>
            创建数据获取帮助窗口。
            </summary>
            <param name="cfgInfo"></param>
            <param name="parentForm"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.ObjectDataFilterAssistantHelper.CreateDataAssistantObject(System.Object,MB.WinBase.Common.ColumnEditCfgInfo,System.Windows.Forms.Control,MB.WinBase.IFace.IClientRuleQueryBase@)">
            <summary>
            创建数据获取帮助窗口。
            </summary>
            <param name="cfgInfo"></param>
            <param name="parentForm"></param>
            <param name="clientQueryRule"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.ObjectDataFilterAssistantHelper.CreateDataAssistantObject(System.Object,System.Object,MB.WinBase.Common.ColumnEditCfgInfo,MB.WinBase.IFace.IClientRuleQueryBase)">
            <summary>
            创建数据获取帮助窗口。
            </summary>
            <param name="cfgInfo"></param>
            <param name="parentForm"></param>
            <param name="clientQueryRule"></param>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.ObjectDataFilterAssistantHelper.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="T:MB.WinBase.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MB.WinBase.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MB.WinBase.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:MB.WinBase.ShareLib">
            <summary>
            UI 层操作相关的Public 函数。
            </summary>
        </member>
        <member name="M:MB.WinBase.ShareLib.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.WinBase.ShareLib.GetPropertyDescription(System.String[],System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo})">
            <summary>
            获取多个字段的描述。
            </summary>
            <param name="propertyName"></param>
            <param name="colPropertys"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.ShareLib.GetMultiEntityValueDescription(System.String[],System.Object)">
            <summary>
            获取实体对象中多个值做为描述。
            </summary>
            <param name="propertyName"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.ShareLib.GetControlParentForm(System.Windows.Forms.Control)">
            <summary>
            获取控件所在的父窗口。
            </summary>
            <param name="ctl"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.ShareLib.GetInvokeDataHosterControl(System.Windows.Forms.Control)">
            <summary>
              获取调用的 InvokeDataAssistantHoster
            </summary>
            <param name="ctl"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.ShareLib.ShowFocusControl(System.Windows.Forms.Control)">
            <summary>
            显示焦点控件。
            </summary>
            <param name="ctl"></param>
        </member>
        <member name="M:MB.WinBase.ShareLib.SelectedFile(System.String)">
            <summary>
            文件选择处理
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.ShareLib.IniMBBaseFrameForWindows">
            <summary>
            执行Windows 应用程序初始化。
            </summary>
        </member>
        <member name="M:MB.WinBase.ShareLib.BuildXmlConfigFileFullName(System.String)">
            <summary>
            根据XML 文件名称构建完整的XML 配置文件完整路径。
            </summary>
            <param name="xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.ShareLib.LoadXmlConfigFile(System.String)">
            <summary>
            加载XML 配置文档。
            </summary>
            <param name="xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.ShareLib.ConvertEntityToDataSet(System.Type,System.Collections.IList,System.String[])">
            <summary>
            把数据实体集合类转换为 客户可分析DataSet 的格式。
            </summary>
            <param name="entityType">实体类型</param>
            <param name="entitys"></param>
            <param name="convertPropertysName">需要转换的属性名称 (为空 将转换所有可读的类型)</param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.ShareLib.ConvertEntityToDataSet(System.Collections.IList,System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo},System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnEditCfgInfo})">
            <summary>
             把数据实体集合类转换为 客户可分析DataSet 的格式。
            </summary>
            <param name="entitys"></param>
            <param name="propertys"></param>
            <param name="columnsEdit"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.ShareLib.ConvertEntityToDataSet(System.Collections.IList,System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo},System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnEditCfgInfo},System.Boolean)">
            <summary>
             把数据实体集合类转换为 客户可分析DataSet 的格式。
            </summary>
            <param name="entitys"></param>
            <param name="propertys"></param>
            <param name="columnsEdit"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.ShareLib.ConvertDataSetToQaDataSet(System.Data.DataView,System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo},System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnEditCfgInfo})">
            <summary>
            把数据集合   客户可分析DataSet 的格式。 (主要把存在 ID 转换为文本描述的格式)
            </summary>
            <param name="dvData"></param>
            <param name="propertys"></param>
            <param name="columnsEdit"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.ShareLib.CreateBitmapFromResources(System.Reflection.Assembly,System.String)">
            <summary>
            从资源中创建一个位图。
            </summary>
            <param name="assembly">资源文件所在的配件。</param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.ShareLib.CreateImageListFromResources(System.Reflection.Assembly,System.String[])">
            <summary>
            从资源文件中创建ImageList
            </summary>
            <param name="assembly">资源文件所在的配件</param>
            <param name="files">包含完整命名空间的文件名称。</param>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.ShareLib.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="T:MB.WinBase.UIDataEditHelper">
            <summary>
            缺省默认UI 层 数据编辑 公共处理方法。
            </summary>
        </member>
        <member name="M:MB.WinBase.UIDataEditHelper.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.WinBase.UIDataEditHelper.AppendLoginUserInfo(System.Object)">
            <summary>
            在编辑实体中追加登录用户的信息。
            </summary>
            <param name="editEntity"></param>
        </member>
        <member name="M:MB.WinBase.UIDataEditHelper.BuildEditEntitys(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.Object}},System.Int32,System.Collections.IList)">
            <summary>
            把数据编辑到符合数据存储的集合类中。
            </summary>
            <param name="detailEditEntitys"></param>
            <param name="dataInDocType"></param>
            <param name="lstData"></param>
        </member>
        <member name="M:MB.WinBase.UIDataEditHelper.MergeChangedValue(System.Object,System.Object)">
            <summary>
            比较两个数据实体的值。修改不同的部分。
            </summary>
            <param name="orgEntity">源数据</param>
            <param name="destEntity">目标数据 被更新</param>
        </member>
        <member name="M:MB.WinBase.UIDataEditHelper.CheckCurrentEntityIsInEditting(System.Object)">
            <summary>
            判断当前的数据实体对象正在编辑状态。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.UIDataEditHelper.GetObjectState(System.Object)">
            <summary>
            获取当前编辑单据的状态。
            特殊说明： 在UI 层操作时 由于该方法要频繁进行调用，所以把它实现在UI层 而非作为服务来提供。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.UIDataEditHelper.GetEntityDocState(System.Object)">
            <summary>
            获取实体对象的单据状态。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.UIDataEditHelper.CheckTypeExistsDocState(System.Type)">
            <summary>
            判断指定的类型中是否包含单据状态类型。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.UIDataEditHelper.CheckExistsDocState(System.Object)">
            <summary>
            判断实体对象的是否存在单据状态。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.UIDataEditHelper.CheckExistsEntityState(System.Object)">
            <summary>
            判断实体对象的是否存在单据状态。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.UIDataEditHelper.GetEntityID(System.Object)">
            <summary>
            获取实体对象的ID.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.UIDataEditHelper.GetEntityState(System.Object)">
            <summary>
            获取实体对象的状态。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.UIDataEditHelper.SetEntityState(System.Object,MB.Util.Model.EntityState)">
            <summary>
            设置实体对象的状态。
            </summary>
            <param name="entity"></param>
            <param name="state"></param>
        </member>
        <member name="P:MB.WinBase.UIDataEditHelper.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="T:MB.WinBase.UIDataInputValidated">
            <summary>
            数据输入验证处理相关...
            </summary>
        </member>
        <member name="M:MB.WinBase.UIDataInputValidated.#ctor(System.Windows.Forms.ContainerControl)">
            <summary>
            构造函授数...
            </summary>
        </member>
        <member name="M:MB.WinBase.UIDataInputValidated.ClearErrorMessage(System.Collections.Generic.List{MB.WinBase.Binding.ColumnBindingInfo})">
            <summary>
            清空显示的错误提示信息。
            </summary>
            <param name="editColumnCtls"></param>
        </member>
        <member name="M:MB.WinBase.UIDataInputValidated.Validated(System.Collections.Generic.List{MB.WinBase.Binding.ColumnBindingInfo})">
            <summary>
            根据控件的输入值进行判断。
            </summary>
            <param name="editColumnCtls"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.UIDataInputValidated.DataValidated(MB.WinBase.IFace.IClientRule,System.Collections.Generic.List{MB.WinBase.Binding.ColumnBindingInfo},System.Object)">
            <summary>
            针对实体类的数据验证。
            </summary>
            <param name="clientRule"></param>
            <param name="editColumnCtls"></param>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.UIDataInputValidated.DataRowValidated(System.Collections.Generic.Dictionary{System.String,MB.WinBase.Common.ColumnPropertyInfo},System.Data.DataRow,System.String@)">
            <summary>
            检查DataRow 的数据是否满足XML 配置信息中的需求。
            </summary>
            <param name="colPropertys"></param>
            <param name="drData"></param>
            <param name="errMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.UIDataInputValidated.SingleDataValidated(MB.WinBase.Common.ColumnPropertyInfo,System.Object,System.String@)">
            <summary>
            根据XML 配置的单个列进行验证
            </summary>
            <param name="colPropertyInfo"></param>
            <param name="inputValue"></param>
            <param name="errMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.UIDataInputValidated.DetailGridDataValidated(System.String,System.Object,System.String)">
            <summary>
            根据配置XML文件验证输入的明细是否合法。
            主要针对网格数据的检验。
            </summary>
            <param name="xmlFileName"></param>
            <param name="detailData"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.UIDataInputValidated.validatedDateTime(MB.WinBase.Common.ColumnPropertyInfo,System.Object,System.String@)">
            <summary>
            验证日期格式的字段
            </summary>
            <param name="colPropertyInfo">对该字段列的客户端配置属性</param>
            <param name="inputValue">该列的值</param>
            <param name="errMsg">错误信息，ref参数，在方法中定义错误信息并传出</param>
            <returns>验证字段值是否正确，true表示验证正确，false表示验证错误</returns>
        </member>
        <member name="P:MB.WinBase.UIDataInputValidated.DefaultInstance">
            <summary>
            默认 主要针对明细数据的检验
            </summary>
        </member>
        <member name="T:MB.WinBase.UIEditEntityList">
            <summary>
            UI 层 实体对象编辑明细处理。
            </summary>
        </member>
        <member name="M:MB.WinBase.UIEditEntityList.RaiseBeforeDataSave">
            <summary>
            抛出数据保存之前的事件。
            </summary>
        </member>
        <member name="M:MB.WinBase.UIEditEntityList.AcceptChanges">
            <summary>
            以相同的状态改变数据实体
            </summary>
        </member>
        <member name="M:MB.WinBase.UIEditEntityList.AddAndDeleteEquals(System.Collections.Generic.KeyValuePair{System.Int32,System.Object})">
            <summary>
            在新增的时候如果存在相同的那么就把已存在的删除掉。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MB.WinBase.UIEditEntityList.ClearByClassType(System.Int32)">
            <summary>
            根据数据类型删除集合中存储的数据。
            edit by chendc 2010-08-19
            </summary>
            <param name="classType"></param>
        </member>
        <member name="E:MB.WinBase.UIEditEntityList.BeforeDataSave">
            <summary>
            在数据保存之前产生。
            </summary>
        </member>
        <member name="T:MB.WinBase.VersionAutoUpdate.IClientVersionUpdate">
            <summary>
             版本自动更新需要实现的接口。
            </summary>
        </member>
        <member name="M:MB.WinBase.VersionAutoUpdate.IClientVersionUpdate.CheckExistsNewVersion">
            <summary>
             检查是否需要存在新的版本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.VersionAutoUpdate.IClientVersionUpdate.GetServerPackClientVersion">
            <summary>
            获取服务端发布的当前活动版本号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.VersionAutoUpdate.IClientVersionUpdate.GetVersionFileNames(System.Double)">
            <summary>
            获取需要下载的版本文件名称。
            </summary>
            <param name="versionNumber"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.VersionAutoUpdate.IClientVersionUpdate.GetFileBuffer(System.Double,System.String,System.Int64)">
            <summary>
             获取单个Buffer。
            </summary>
            <param name="versionNumber"></param>
            <param name="fileName"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:MB.WinBase.WcfClient.MessageHeaderHelper">
            <summary>
            WCF 消息头处理相关。
            </summary>
        </member>
        <member name="M:MB.WinBase.WcfClient.MessageHeaderHelper.AppendUserLoginInfo">
            <summary>
            追加当前登录用户的信息到消息头上。
            </summary>
        </member>
        <member name="M:MB.WinBase.WcfClient.MessageHeaderHelper.AppendQueryBehavior(MB.Util.Model.QueryBehavior,System.String)">
            <summary>
            追加当前查询的行为信息
            </summary>
            <param name="queryBehavior"></param>
        </member>
        <member name="M:MB.WinBase.WcfClient.MessageHeaderHelper.AppendQueryBehavior(MB.Util.Model.QueryBehavior)">
            <summary>
            追加当前查询的行为信息
            </summary>
            <param name="queryBehavior"></param>
        </member>
        <member name="M:MB.WinBase.WcfClient.MessageHeaderHelper.AppendMessageHeader(System.String,System.String)">
            <summary>
            在当前通道的消息头同追加信息
            </summary>
            <param name="headerKey"></param>
            <param name="context"></param>
        </member>
        <member name="M:MB.WinBase.WcfClient.MessageHeaderHelper.GetMessageHeaderResponseInfo">
            <summary>
            获取当前查询的ResponseInfo
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.WcfClient.MessageHeaderHelper.GetMessageHeaderContext(System.String)">
            <summary>
            在当前通道中获取指定消息头的信息
            </summary>
            <param name="headerKey"></param>
            <returns></returns>
        </member>
        <member name="T:MB.WinBase.WebClient.ClientChannel">
            <summary>
            Rest服务客户端调用通道
            </summary>
        </member>
        <member name="M:MB.WinBase.WebClient.ClientChannel.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.WinBase.WebClient.ClientChannel.Get(System.String)">
            <summary>
            Get调用
            </summary>
            <param name="methodUrl"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.WebClient.ClientChannel.Get``1(System.String)">
            <summary>
             Get调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodUrl"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.WebClient.ClientChannel.Post(System.String,System.String)">
            <summary>
            Post调用
            </summary>
            <param name="jsonData"></param>
            <param name="methodUrl"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.WebClient.ClientChannel.Post``2(``0,System.String)">
            <summary>
            Post调用
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="data"></param>
            <param name="methodUrl"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.WebClient.ClientChannel.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:MB.WinBase.WebClient.ClientChannel.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="T:MB.WinBase.WebClient.ClientChannelFactory">
            <summary>
            Web服务客户端调用通道
            </summary>
        </member>
        <member name="F:MB.WinBase.WebClient.ClientChannelFactory.WEB_URL_ROOT_PATH">
            <summary>
            Web Url地址
            </summary>
        </member>
        <member name="M:MB.WinBase.WebClient.ClientChannelFactory.RegisterTypeIfMissing(System.Type,System.String)">
            <summary>
            WCF 服务调用注册.
            </summary>
            <param name="iServiceType"></param>
            <param name="relativeUrlPath"></param>
        </member>
        <member name="M:MB.WinBase.WebClient.ClientChannelFactory.InvokeWebMethod``2(``0,System.Func{``0,``1})">
            <summary>
            反射调用方法
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="t"></param>
            <param name="execute"></param>
            <returns></returns>
        </member>
        <member name="T:MB.WinBase.WebClient.WebGetHelper`1">
            <summary>
            Rest服务客户端调用封装
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MB.WinBase.WebClient.WebGetHelper`1.InvokeWebMethod``1(System.String,System.Object[])">
            <summary>
            Rest服务不带TInput参数的Invoke方法
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="method"></param>
            <param name="objParams"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WinBase.WebClient.WebGetHelper`1.InvokeWebMethod``2(System.String,``0,System.Object[])">
            <summary>
            Rest服务带TInput参数的Invoke方法
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="method"></param>
            <param name="objParams"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:MB.WinBase.WebClient.WebGetHelper`1.NewInstance">
            <summary>
            实例化对象
            </summary>
        </member>
    </members>
</doc>
