<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MB.Util</name>
    </assembly>
    <members>
        <member name="T:MB.Util.Aops.MyCodeRunTrackInjection">
            <summary>
            存在于WCF 服务端的代码运行跟踪器。
            </summary>
        </member>
        <member name="M:MB.Util.Aops.MyCodeRunTrackInjection.BeginProcess(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            方法调用之前。
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:MB.Util.Aops.MyCodeRunTrackInjection.EndProcess(System.DateTime,System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            方法调用之后。
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:MB.Util.APPException">
            <summary>
            APPException 应用程序异常时产生的错误。
            </summary>
        </member>
        <member name="M:MB.Util.APPException.#ctor(System.Exception)">
            <summary>
            构造函数...
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:MB.Util.APPException.#ctor(System.String)">
            <summary>
            构造函数...
            </summary>
            <param name="pMsg">抛出异常的信息</param>
        </member>
        <member name="M:MB.Util.APPException.#ctor(System.String,MB.Util.APPMessageType)">
            <summary>
            构造函数...
            </summary>
            <param name="pMsg"></param>
            <param name="pMsgLever"></param>
        </member>
        <member name="M:MB.Util.APPException.#ctor(System.String,MB.Util.APPMessageType,System.String)">
            <summary>
            构造函数...
            </summary>
            <param name="pMsg">抛出异常的信息</param>
            <param name="pMsgLever">异常信息的类型等级</param>
        </member>
        <member name="M:MB.Util.APPException.#ctor(System.String,MB.Util.APPMessageType,System.Exception)">
            <summary>
             构造函数...
            </summary>
            <param name="clientMsg"></param>
            <param name="msgLever"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:MB.Util.APPException.MsgLever">
            <summary>
            异常消息的类型
            </summary>
        </member>
        <member name="P:MB.Util.APPException.ErrorCode">
            <summary>
            产生异常的错误编码数值。
            </summary>
        </member>
        <member name="T:MB.Util.APPExceptionHandlerHelper">
            <summary>
            异常提升方法处理类。
            </summary>
        </member>
        <member name="M:MB.Util.APPExceptionHandlerHelper.PromoteException(System.Exception,System.String)">
            <summary>
            创建异常
            </summary>
            <param name="message"></param>
            <param name="msgLever"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.APPExceptionHandlerHelper.PromoteException(System.Exception,MB.Util.APPMessageType)">
            <summary>
            创建异常。
            </summary>
            <param name="ex"></param>
            <param name="msgLever"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.APPExceptionHandlerHelper.CreateDisplayToUser(System.String,System.String[])">
            <summary>
            创建显示给用户的消息。
            </summary>
            <param name="message"></param>
            <param name="pars"></param>
            <returns></returns>
        </member>
        <member name="T:MB.Util.APPMessageType">
            <summary>
            出错提示信息的等级
            </summary>
        </member>
        <member name="T:MB.Util.AsynWorkThread">
            <summary>
            提供异步调用的后台工作线程。
            </summary>
        </member>
        <member name="M:MB.Util.AsynWorkThread.#ctor">
            <summary>
            提供异步调用的后台工作线程。
            </summary>
        </member>
        <member name="T:MB.Util.AppConfigSetting">
            <summary>
            ConfigSeting 应该程序配置文件处理相关。
            </summary>
        </member>
        <member name="M:MB.Util.AppConfigSetting.SetKeyValue(System.String,System.String)">
            <summary>
            设置配置文件中值（每一个配置的信息都以这样的方式(key = " + pKeyName +" ,value =)）
            </summary>
            <param name="pKeyName">得到的键值的名称</param>
            <param name="pKeyValue">要设置的键值</param>
        </member>
        <member name="M:MB.Util.AppConfigSetting.SetKeyValue(System.String,System.String,System.String)">
            <summary>
            设置配置文件中值（每一个配置的信息都以这样的方式(key = " + pKeyName +" ,value =)）
            </summary>
            <param name="pKeyName">得到的键值的名称</param>
            <param name="pKeyValue"> 要设置的键值</param>
            <param name="pFullPathName">配置文件完整的路径</param>
        </member>
        <member name="M:MB.Util.AppConfigSetting.SetKeyValue(System.String,System.String,System.String,System.String)">
            <summary>
            设置配置文件中值（每一个配置的信息都以这样的方式(key = " + pKeyName +" ,value =)）
            </summary>
            <param name="pKeyName">得到的键值的名称</param>
            <param name="pKeyValue"></param>
            <param name="pFullPathName">配置文件完整的路径</param>
            <param name="pNodesPath">Node在XML配置文件的路径></param>
        </member>
        <member name="M:MB.Util.AppConfigSetting.GetKeyValue(System.String)">
            <summary>
            得到配置文件中值（每一个配置的信息都以这样的方式(key = " + pKeyName +" ,value =)）
            </summary>
            <param name="pKeyName">得到的键值的名称</param>
            <returns> 返回 Key对应的值</returns>
        </member>
        <member name="M:MB.Util.AppConfigSetting.GetKeyValue(System.String,System.String)">
            <summary>
             得到配置文件中值（每一个配置的信息都以这样的方式(key = " + pKeyName +" ,value =)）
            </summary>
            <param name="pKeyName">得到的键值的名称</param>
            <param name="pFullPathName">配置文件完整的路径</param>
            <returns>返回 Key对应的值</returns>
        </member>
        <member name="M:MB.Util.AppConfigSetting.GetKeyValue(System.String,System.String,System.String)">
            <summary>
             得到配置文件中值（每一个配置的信息都以这样的方式(key = " + pKeyName +" ,value =)）
            </summary>
            <param name="pKeyName">得到的键值的名称</param>
            <param name="pFullPathName">配置文件完整的路径</param>
            <param name="pNodesPath">Node在XML配置文件的路径</param>
            <returns>返回 Key对应的值</returns>
        </member>
        <member name="M:MB.Util.DateTimeUtil.GetToday(System.DateTime@,System.DateTime@)">
            <summary>
            今天的起始和结束
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
        </member>
        <member name="M:MB.Util.DateTimeUtil.GetDay(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            得到某一天的起始和结束
            </summary>
            <param name="dt"></param>
            <param name="begin"></param>
            <param name="end"></param>
        </member>
        <member name="M:MB.Util.DateTimeUtil.GetWeek(System.DateTime@,System.DateTime@)">
            <summary>
            得到本周的起始和结束
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
        </member>
        <member name="M:MB.Util.DateTimeUtil.GetMonth(System.DateTime@,System.DateTime@)">
            <summary>
            得到本月的起始和结束
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
        </member>
        <member name="P:MB.Util.DateTimeUtil.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="T:MB.Util.Model.Chart.ChartLayoutItemInfo">
            <summary> 
            文件生成时间 2012-12-26 02:50 
            </summary> 
        </member>
        <member name="T:MB.Util.Model.Chart.ChartLayoutTemplateInfo">
            <summary> 
            文件生成时间 2012-12-26 02:34 
            </summary> 
        </member>
        <member name="T:MB.Util.Model.Chart.ChartTemplateInfo">
            <summary> 
            文件生成时间 2012-12-26 10:39 
            </summary> 
        </member>
        <member name="T:MB.Util.Common.DefaultCodeRunTrackInjection">
            <summary>
            默认的代码运行跟踪器。
            </summary>
        </member>
        <member name="M:MB.Util.Common.DefaultCodeRunTrackInjection.BeginProcess(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            方法调用之前。
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:MB.Util.Common.DefaultCodeRunTrackInjection.EndProcess(System.DateTime,System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            方法调用之后。
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:MB.Util.Common.QueryParameterHelper">
            <summary>
            提供对象数组转换为集合类的处理。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MB.Util.Common.QueryParameterHelper.#ctor">
            <summary>
            提供对象数组转换为集合类的处理。
            </summary>
        </member>
        <member name="M:MB.Util.Common.QueryParameterHelper.#ctor(System.String)">
            <summary>
            提供对象数组转换为集合类的处理。
            </summary>
            <param name="xmlFilterParams">查询参数系列化字符窜</param>
        </member>
        <member name="M:MB.Util.Common.QueryParameterHelper.#ctor(MB.Util.Model.QueryParameterInfo[])">
            <summary>
            提供对象数组转换为集合类的处理。
            </summary>
            <param name="dataArray">查询参数数组</param>
        </member>
        <member name="M:MB.Util.Common.QueryParameterHelper.GetParameterInfo(System.String)">
            <summary>
            根据参数名称
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Common.QueryParameterHelper.AddParameterInfo(System.String,System.Object,MB.Util.DataFilterConditions)">
            <summary>
            追加参数。
            </summary>
            <param name="paramName"></param>
            <param name="value"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Common.QueryParameterHelper.AddParameterInfo(System.String,System.Object,MB.Util.DataFilterConditions,System.Type)">
            <summary>
            追加参数。
            </summary>
            <param name="paramName"></param>
            <param name="value"></param>
            <param name="condition"></param>
            <param name="dataType">System 下对应的数据类型。</param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Common.QueryParameterHelper.AddParameterGroup(MB.Util.Model.QueryGroupLinkType)">
            <summary>
            追加分组节点。
            </summary>
            <param name="linkType"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Common.QueryParameterHelper.RemoveParameterInfo(System.String)">
            <summary>
            删除参数。
            </summary>
            <param name="paramName"></param>
        </member>
        <member name="M:MB.Util.Common.QueryParameterHelper.ToArray">
            <summary>
            以数组形式返回。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Common.QueryParameterHelper.SerializerToXmlString">
            <summary>
            系列为XML 字符窜。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Common.QueryParameterHelper.ToDateStruct(MB.Util.Common.DateFilterType)">
            <summary>
            日期类型转换为具体的时间段。
            </summary>
            <param name="filterType"></param>
            <returns></returns>
        </member>
        <member name="T:MB.Util.Common.DateFilterType">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.Util.Cryptography.Encryptor.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.Util.Cryptography.Encryptor.MD5Hash(System.String)">
            <summary>
            对传入的字符串进行MD5 HASH计算，并将最终结果每一个字节都转化成2位16进制
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Cryptography.Encryptor.SHA1Hash(System.String)">
            <summary>
            对传入的字符串进行SHA1 HASH计算，并将最终结果每一个字节都转化成2位16进制
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:MB.Util.Cryptography.Encryptor.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="T:MB.Util.CustomComparaer`1">
            <summary>
            自定义的比较对象，用于泛型中需要比较对象的函数
            比如Union
            该类可以被继承
            </summary>
            <typeparam name="T">传入的类型，在传入的类型中，作为比较键的属性需要附上[DataMemeber]</typeparam>
        </member>
        <member name="M:MB.Util.CustomComparaer`1.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="propNames">需要用作比较键的属性名集合</param>
        </member>
        <member name="M:MB.Util.CustomComparaer`1.Equals(`0,`0)">
            <summary>
             Determines whether the specified objects are equal.
            </summary>
            <param name="x">对象1</param>
            <param name="y">对象2</param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.CustomComparaer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="t">The T for which a hash code is to be returned.</param>
            <returns></returns>
        </member>
        <member name="T:MB.Util.DataHelper">
            <summary>
            数据加工处理帮助类
            </summary>
        </member>
        <member name="M:MB.Util.DataHelper.GetMultiFieldValue(System.Data.DataRow,System.String[])">
            <summary>
            获取多个字段的值。
            </summary>
            <param name="drData"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="P:MB.Util.DataHelper.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="T:MB.Util.DllContainer">
            <summary>
            提供组件之间松耦合互相调用的方法，不要项目相互引用
            </summary>
        </member>
        <member name="M:MB.Util.DllContainer.Registry(System.Type,System.String,System.String,System.String)">
            <summary>
            注册业务对象
            </summary>
            <param name="interfaceType">父类或者接口类型</param>
            <param name="assemblyName">程序集名称</param>
            <param name="typeFullName">类型名称</param>
            <param name="aliasName">类型别名</param>
        </member>
        <member name="M:MB.Util.DllContainer.Registry(System.Type,System.String,System.String)">
            <summary>
            注册业务对象
            </summary>
            <param name="interfaceType">父类或者接口类型</param>
            <param name="assemblyName">程序集名称</param>
            <param name="typeFullName">类型名称</param>
        </member>
        <member name="M:MB.Util.DllContainer.Registry``1(System.String,System.String)">
            <summary>
            泛型注册业务对象方法
            </summary>
            <typeparam name="T">父类或者接口类型</typeparam>
            <param name="assemblyName">程序集名称</param>
            <param name="typeFullName">类型名称</param>
        </member>
        <member name="M:MB.Util.DllContainer.Registry``1(System.String,System.String,System.String)">
            <summary>
            泛型注册业务对象方法
            </summary>
            <typeparam name="T">父类或者接口类型</typeparam>
            <param name="assemblyName">程序集名称</param>
            <param name="typeFullName">类型名称</param>
            <param name="aliasName">类型别名</param>
        </member>
        <member name="M:MB.Util.DllContainer.CreateInstance``1(System.String)">
            <summary>
            创建调用对象
            </summary>
            <typeparam name="T">服务业务父类或者接口类型</typeparam>
            <param name="typeAliasName">类型名称</param>
            <returns>服务业务父类或者接口类型</returns>
        </member>
        <member name="M:MB.Util.DllContainer.CreateInstance``1">
            <summary>
            创建调用对象
            </summary>
            <typeparam name="T">服务业务父类或者接口类型</typeparam>
            <returns>服务业务父类或者接口类型</returns>
        </member>
        <member name="T:MB.Util.NamedTypeBuildKey">
            <summary>
            Build key used to combine a type object with a string name. Used by
            ObjectBuilder to indicate exactly what is being built.
            </summary>
        </member>
        <member name="M:MB.Util.NamedTypeBuildKey.#ctor(System.Type,System.String)">
            <summary>
            Create a new <see cref="T:MB.Util.NamedTypeBuildKey"/> instance with the given
            type and name.
            </summary>
            <param name="type"><see cref="P:MB.Util.NamedTypeBuildKey.Type"/> to build.</param>
            <param name="name">Key to use to look up type mappings and singletons.</param>
        </member>
        <member name="M:MB.Util.NamedTypeBuildKey.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:MB.Util.NamedTypeBuildKey"/> instance for the default
            buildup of the given type.
            </summary>
            <param name="type"><see cref="P:MB.Util.NamedTypeBuildKey.Type"/> to build.</param>
        </member>
        <member name="M:MB.Util.NamedTypeBuildKey.Make``1">
            <summary>
            This helper method creates a new <see cref="T:MB.Util.NamedTypeBuildKey"/> instance. It is
            initialized for the default key for the given type.
            </summary>
            <typeparam name="T">Type to build.</typeparam>
            <returns>A new <see cref="T:MB.Util.NamedTypeBuildKey"/> instance.</returns>
        </member>
        <member name="M:MB.Util.NamedTypeBuildKey.Make``1(System.String)">
            <summary>
            This helper method creates a new <see cref="T:MB.Util.NamedTypeBuildKey"/> instance for
            the given type and key.
            </summary>
            <typeparam name="T">Type to build</typeparam>
            <param name="name">Key to use to look up type mappings and singletons.</param>
            <returns>A new <see cref="T:MB.Util.NamedTypeBuildKey"/> instance initialized with the given type and name.</returns>
        </member>
        <member name="M:MB.Util.NamedTypeBuildKey.Equals(System.Object)">
            <summary>
            Compare two <see cref="T:MB.Util.NamedTypeBuildKey"/> instances.
            </summary>
            <remarks>Two <see cref="T:MB.Util.NamedTypeBuildKey"/> instances compare equal
            if they contain the same name and the same type. Also, comparing
            against a different type will also return false.</remarks>
            <param name="obj">Object to compare to.</param>
            <returns>True if the two keys are equal, false if not.</returns>
        </member>
        <member name="M:MB.Util.NamedTypeBuildKey.GetHashCode">
            <summary>
            Calculate a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:MB.Util.NamedTypeBuildKey.op_Equality(MB.Util.NamedTypeBuildKey,MB.Util.NamedTypeBuildKey)">
            <summary>
            Compare two <see cref="T:MB.Util.NamedTypeBuildKey"/> instances for equality.
            </summary>
            <remarks>Two <see cref="T:MB.Util.NamedTypeBuildKey"/> instances compare equal
            if they contain the same name and the same type.</remarks>
            <param name="left">First of the two keys to compare.</param>
            <param name="right">Second of the two keys to compare.</param>
            <returns>True if the values of the keys are the same, else false.</returns>
        </member>
        <member name="M:MB.Util.NamedTypeBuildKey.op_Inequality(MB.Util.NamedTypeBuildKey,MB.Util.NamedTypeBuildKey)">
            <summary>
            Compare two <see cref="T:MB.Util.NamedTypeBuildKey"/> instances for inequality.
            </summary>
            <remarks>Two <see cref="T:MB.Util.NamedTypeBuildKey"/> instances compare equal
            if they contain the same name and the same type. If either field differs
            the keys are not equal.</remarks>
            <param name="left">First of the two keys to compare.</param>
            <param name="right">Second of the two keys to compare.</param>
            <returns>false if the values of the keys are the same, else true.</returns>
        </member>
        <member name="M:MB.Util.NamedTypeBuildKey.ToString">
            <summary>
            Formats the build key as a string (primarily for debugging).
            </summary>
            <returns>A readable string representation of the build key.</returns>
        </member>
        <member name="P:MB.Util.NamedTypeBuildKey.Type">
            <summary>
            Return the <see cref="P:MB.Util.NamedTypeBuildKey.Type"/> stored in this build key.
            </summary>
            <value>The type to build.</value>
        </member>
        <member name="P:MB.Util.NamedTypeBuildKey.Name">
            <summary>
            Returns the name stored in this build key.
            </summary>
            <remarks>The name to use when building.</remarks>
        </member>
        <member name="M:MB.Util.HttpUtility.HtmlDecode(System.String)">
            <summary>
            Decodes an HTML-encoded string andreturns the decoded string.
            </summary>
            <param name="s">The HTML string todecode. </param>
            <returns>The decoded text.</returns>
        </member>
        <member name="M:MB.Util.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            Decodes an HTML-encoded string andsends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The HTML string todecode</param>
            <param name="output">The TextWriteroutput stream containing the decoded string. </param>
        </member>
        <member name="M:MB.Util.HttpUtility.HtmlEncode(System.String)">
            <summary>
            HTML-encodes a string and returns theencoded string.
            </summary>
            <param name="s">The text string toencode. </param>
            <returns>The HTML-encodedtext.</returns>
        </member>
        <member name="M:MB.Util.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            HTML-encodes a string and sends theresulting output to a TextWriter output stream.
            </summary>
            <param name="s">The string to encode.</param>
            <param name="output">The TextWriteroutput stream containing the encoded string. </param>
        </member>
        <member name="T:MB.Orm.Common.BaseModel">
            <summary>
            所有数据对象必须继承的抽象基类。
            </summary>
        </member>
        <member name="P:MB.Orm.Common.BaseModel.EntityState">
            <summary>
            当前实体的状态。
            </summary>
        </member>
        <member name="P:MB.Orm.Common.BaseModel.Selected">
            <summary>
            实体对象模型的附加属性。
            判断当前实体对象是否在选中状态。
            </summary>
        </member>
        <member name="T:MB.Util.Model.DataBaseQueryResult">
            <summary>
            数据库查询的结果
            </summary>
        </member>
        <member name="M:MB.Util.Model.DataBaseQueryResult.SetTotalRows(System.Int32)">
            <summary>
            设定数据库返回的总记录数
            </summary>
            <param name="rows"></param>
        </member>
        <member name="P:MB.Util.Model.DataBaseQueryResult.TotalRows">
            <summary>
            数据库查询结果的总记录数
            </summary>
        </member>
        <member name="T:MB.Util.Model.DataAreaField">
            <summary>
            动态聚组聚合字段
            </summary>
        </member>
        <member name="T:MB.Util.Model.DynamicGroupEntityInfos">
            <summary>
            动态聚组查询对象信息，可以是表或者视图，支持两层（主从关系）
            </summary>
        </member>
        <member name="T:MB.Util.Model.DynamicGroupRelationInfo">
            <summary>
            支持的关系定义，现在只支持两层关系，用left join链接
            </summary>
        </member>
        <member name="T:MB.Util.Model.DynamicGroupSetting">
            <summary>
            动态聚组分组列的信息
            </summary>
        </member>
        <member name="T:MB.Util.Model.SummaryItemType">
            <summary>
            动态聚组，聚合的条件
            </summary>
        </member>
        <member name="T:MB.Util.Model.QueryBehavior">
            <summary>
            数据库查询分析的行为描述信息。
            </summary>
        </member>
        <member name="M:MB.Util.Model.QueryBehavior.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.Util.Model.QueryBehavior.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
        </member>
        <member name="P:MB.Util.Model.QueryBehavior.DefaultBehavior">
            <summary>
            缺省默认查询
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryBehavior.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryBehavior.PageSize">
            <summary>
            每页数量
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryBehavior.Columns">
            <summary>
            需要查找的字段
            多个字段之间用逗号分开
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryBehavior.GroupColumns">
            <summary>
            分处理的字段
            多个字段之间用逗号分开
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryBehavior.IsTotalPageDisplayed">
            <summary>
            显示最大页数
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryBehavior.IsQueryAll">
            <summary>
            查询全部记录，不分页
            </summary>
        </member>
        <member name="T:MB.Util.Model.ResponseHeaderInfo">
            <summary>
            服务返回的一些信息
            </summary>
        </member>
        <member name="M:MB.Util.Model.ResponseHeaderInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.Util.Model.ResponseHeaderInfo.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="totalRecordCount"></param>
        </member>
        <member name="P:MB.Util.Model.ResponseHeaderInfo.DefaultResponseInfo">
            <summary>
            缺省默认返回值
            </summary>
        </member>
        <member name="P:MB.Util.Model.ResponseHeaderInfo.TotalRecordCount">
            <summary>
            返回的总记录数
            </summary>
        </member>
        <member name="T:MB.Util.Model.SMSEntity">
            <summary>
            短消息实体
            </summary>
        </member>
        <member name="P:MB.Util.Model.SMSEntity.SendUserName">
            <summary>
            发送者名称
            </summary>
        </member>
        <member name="P:MB.Util.Model.SMSEntity.MsgGroup">
            <summary>
            短信分组信息，例如广告，促销
            </summary>
        </member>
        <member name="P:MB.Util.Model.SMSEntity.MobileNumbers">
            <summary>
            批量的移动号码
            </summary>
        </member>
        <member name="P:MB.Util.Model.SMSEntity.MessageEntity">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.DBCommandProcessMonitorInfo.CommandText">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="M:MB.Util.Monitors.DBProcessMonitorInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.DBProcessMonitorInfo.CurrentDBCommandProcessMonitorInfo">
            <summary>
            当前正在处理的DB Command
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.DBProcessMonitorInfo.DBCommandProcessMonitorInfos">
            <summary>
            在一个数据库连接中处理的所有commands
            </summary>
        </member>
        <member name="T:MB.Util.Monitors.WcfPerformanceMonitorMessageInspector">
            <summary>
            消息检测器用来记录一些性能指标
            </summary>
        </member>
        <member name="T:MB.Util.Monitors.WcfPerformaceMonitorContext">
            <summary>
            Wcf性能检测的数据
            </summary>
        </member>
        <member name="M:MB.Util.Monitors.WcfPerformaceMonitorContext.#ctor">
            <summary>
            constructer...
            </summary>
        </member>
        <member name="M:MB.Util.Monitors.WcfPerformaceMonitorContext.ToString">
            <summary>
            重写ToString方法，打印出检测性能指标的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Monitors.WcfPerformaceMonitorContext.CalculateCompressionRate(System.Double,System.Double)">
            <summary>
            计算压缩比
            </summary>
            <param name="size"></param>
            <param name="compressedSize"></param>
            <returns></returns>
        </member>
        <member name="P:MB.Util.Monitors.WcfPerformaceMonitorContext.Current">
            <summary>
            当前的性能检测的数据
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.WcfPerformaceMonitorContext.CurrentWcfProcessMonitorInfo">
            <summary>
            返回当前正在发生的WCF的监测对象
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.WcfPerformaceMonitorContext.WcfProcessMonitorInfos">
            <summary>
            WCF处理的性能指标的集合，因为一个操作可能包含错个WCF操作
            </summary>
        </member>
        <member name="T:MB.Util.Monitors.WcfPerformanceMonitorScope">
            <summary>
            与WCF有关的性能观测
            </summary>
        </member>
        <member name="M:MB.Util.Monitors.WcfPerformanceMonitorScope.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MB.Util.Monitors.WcfPerformanceMonitorScope.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:MB.Util.Monitors.WcfPerformanceMonitorServiceBehaviorElement">
            <summary>
            WCF性能指标监控的行为配置节点，主要用来配置服务端的Service behavior
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.WcfRequestMonitorInfo.RequestURI">
            <summary>
            请求的资源地址
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.WcfRequestMonitorInfo.RequestAction">
            <summary>
            SOAP协议的Action
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.WcfRequestMonitorInfo.RequestSize">
            <summary>
            请求的大小
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.WcfRequestMonitorInfo.CompressedRequestSize">
            <summary>
            压缩后的请求的大小
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.WcfRequestMonitorInfo.CompressedResponseSize">
            <summary>
            压缩响应的大小
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.WcfRequestMonitorInfo.ResponseSize">
            <summary>
            解压后响应的大小
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.WcfRequestMonitorInfo.WcfRequestWatch">
            <summary>
            观察整个请求的监视器
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.WcfRequestMonitorInfo.WcfProcessTime">
            <summary>
            Wcf整个处理时间
            </summary>       
        </member>
        <member name="P:MB.Util.Monitors.WcfRequestMonitorInfo.DBRequestCount">
            <summary>
            数据库请求的次数
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.WcfRequestMonitorInfo.WcfProcessTimeOnServer">
            <summary>
            中间层完成wcf请求的时间跨度
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.WcfRequestMonitorInfo.DBProcessMonitorInfos">
            <summary>
            在一个wcf请求中，所有数据库的请求
            </summary>
        </member>
        <member name="P:MB.Util.Monitors.WcfRequestMonitorInfo.CurrentDBProcessMonitorInfo">
            <summary>
            返回当前正在发生的WCF的监测对象
            </summary>
        </member>
        <member name="T:MB.Util.MyCompressor">
            <summary>
            压缩器，利用.net基础类支持GZip和Deflate算法
            </summary>
        </member>
        <member name="M:MB.Util.MyCompressor.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MB.Util.MyCompressor.#ctor(MB.Util.CompressionAlgorithm)">
            <summary>
            构造函数
            </summary>
            <param name="algorithm">压缩算法</param>
        </member>
        <member name="M:MB.Util.MyCompressor.Compress(System.Byte[])">
            <summary>
            压缩原始字节
            </summary>
            <param name="decompressedData">需要压缩的字节数组</param>
            <returns>压缩以后的字节数组</returns>
        </member>
        <member name="M:MB.Util.MyCompressor.Decompress(System.Byte[])">
            <summary>
            对压缩的数据进行解压
            </summary>
            <param name="compressedData">需要解压的字节</param>
            <returns>解压以后的结果</returns>
        </member>
        <member name="M:MB.Util.MyCompressor.loadToBuffer(System.IO.Stream)">
            <summary>
            从解压以后的流中，转换到内存流中，并变成byte数组
            </summary>
            <param name="stream">解压以后的流</param>
            <returns>解压以后的字节数组</returns>
        </member>
        <member name="P:MB.Util.MyCompressor.Instance">
            <summary>
            获取GZIP算法的压缩器
            </summary>
        </member>
        <member name="T:MB.Util.CompressionAlgorithm">
            <summary>
            压缩算法
            </summary>
        </member>
        <member name="T:MB.Util.RegularExpressionsHelper">
            <summary>
            正则表达式的帮助类
            </summary>
        </member>
        <member name="M:MB.Util.RegularExpressionsHelper.IsDigital(System.String)">
            <summary>
            验证是不是纯数字
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:MB.Util.RESTServiceHelper">
            <summary>
            REST Service访问帮助类
            </summary>
        </member>
        <member name="M:MB.Util.RESTServiceHelper.Get``1(System.String)">
            <summary>
            通过HTTP GET的方式访问RESTFUL服务并获取Response
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="methodName"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.RESTServiceHelper.Post``1(System.String,System.Byte[],System.String)">
            <summary>
            通过HTTP POST的方式访问RESTFUL服务
            </summary>
            <typeparam name="TRequest"></typeparam>
            <param name="methodName"></param>
            <param name="data"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="T:MB.Util.DataContractJsonSerializerExternsion">
            <summary>
            该类是对DataContractJsonSerializer一个扩展
            </summary>
        </member>
        <member name="M:MB.Util.DataContractJsonSerializerExternsion.Serializer``1(System.Runtime.Serialization.Json.DataContractJsonSerializer,``0)">
            <summary>
            Json序列化
            </summary>
        </member>
        <member name="M:MB.Util.DataContractJsonSerializerExternsion.Deserialize``1(System.Runtime.Serialization.Json.DataContractJsonSerializer,System.String)">
            <summary>
            Json反序列化
            </summary>
        </member>
        <member name="T:MB.Util.Serializer.DataContractFileSerializer`1">
            <summary>
            数据系列化到文件的处理类。
            </summary>
        </member>
        <member name="M:MB.Util.Serializer.DataContractFileSerializer`1.#ctor(System.String)">
            <summary>
            实例化数据系列化操作类
            </summary>
            <param name="fileFullName">需要系列化得文件名称</param>
        </member>
        <member name="M:MB.Util.Serializer.DataContractFileSerializer`1.#ctor(System.String,System.String)">
            <summary>
            实例化数据系列化操作类.
            </summary>
            <param name="fileFullName">需要系列化得文件名称</param>
            <param name="synKey">在多线程访问中进行同步控制的键值</param>
        </member>
        <member name="M:MB.Util.Serializer.DataContractFileSerializer`1.Write(`0)">
            <summary>
            系列数据对象到指定的XML 文件.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MB.Util.Serializer.DataContractFileSerializer`1.Read">
            <summary>
            从指定的XML文件中反系列化数据对象.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Serializer.DataContractJsonSerializeHelper.Serializer``1(``0)">
            <summary>
            Json序列化
            </summary>
            <param name="data">需要序列化的数据</param>
        </member>
        <member name="M:MB.Util.Serializer.DataContractJsonSerializeHelper.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="T:MB.Util.Serializer.DataContractSerializeHelper">
            <summary>
            WCF序列化帮助类,包含泛型方法与非泛型方法
            </summary>
        </member>
        <member name="M:MB.Util.Serializer.DataContractSerializeHelper.Serialize(System.Type,System.Object)">
            <summary>
            非泛型方法序列化某对象.该方法通常在基类中使用
            </summary>
            <param name="t">对象类型</param>
            <param name="value">对象实例</param>
            <returns>序列化结果</returns>
        </member>
        <member name="M:MB.Util.Serializer.DataContractSerializeHelper.Serialize``1(System.Object)">
            <summary>
            泛型方法序列化某对象.
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">对象实例</param>
            <returns>序列化结果</returns>
        </member>
        <member name="M:MB.Util.Serializer.DataContractSerializeHelper.Deserialize``1(System.String)">
            <summary>
            泛型方法反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">序列化字符串</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:MB.Util.Serializer.DataContractSerializeHelper.Deserialize(System.Type,System.String)">
            <summary>
            非泛型方法反序列化
            </summary>
            <param name="t">对象类型</param>
            <param name="value">序列化字符串</param>
            <returns>对象实例</returns>
        </member>
        <member name="T:MB.Aop.SoftRegistry.AuthDataEncrypt">
            <summary>
            AuthDataEncrypt 授权工作业务处理类。
            </summary>
        </member>
        <member name="M:MB.Aop.SoftRegistry.AuthDataEncrypt.#ctor">
            <summary>
            add private construct function to prevent instance.
            </summary>
        </member>
        <member name="M:MB.Aop.SoftRegistry.AuthDataEncrypt.GetRandKey">
            <summary>
            获取加密的随机数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.Aop.SoftRegistry.AuthDataEncrypt.DescryptHDString(System.String)">
            <summary>
            加密硬盘系列号。
            </summary>
            <param name="serialNumber"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Aop.SoftRegistry.AuthDataEncrypt.EncryptHDString(System.String)">
            <summary>
            解密硬盘系列号。
            </summary>
            <param name="serialNumber"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Aop.SoftRegistry.AuthDataEncrypt.ToHex(System.Int32,System.Int32)">
            <summary>
            十进制转换为固定长度的十六进制，不足地方用特殊字符来代替。
            </summary>
            <param name="number"></param>
            <param name="fixLenth"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Aop.SoftRegistry.AuthDataEncrypt.ToDec(System.String)">
            <summary>
            把特殊的十六进制转换为十进制。
            </summary>
            <param name="hexStr"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Aop.SoftRegistry.AuthDataEncrypt.GetHd">
            <summary>
            获取硬盘系列号
            </summary>
            <returns></returns>
        </member>
        <member name="T:MB.Aop.SoftRegistry.AuthHelper">
            <summary>
            AuthHelper 系统系列号鉴定。
            </summary>
        </member>
        <member name="M:MB.Aop.SoftRegistry.AuthHelper.#ctor">
            <summary>
            add private construct function to prevent instance.
            </summary>
        </member>
        <member name="M:MB.Aop.SoftRegistry.AuthHelper.AuthRight(System.String)">
            <summary>
            系统系列号鉴定。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.Aop.SoftRegistry.AuthHelper.GetAuthInfo(System.String)">
            <summary>
            获取用户当前鉴权的信息。
            </summary>
            <param name="privateName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Aop.SoftRegistry.AuthHelper.AuthDataRight(System.String)">
            <summary>
            鉴定并分析授权码字符窜。
            </summary>
            <param name="autoString"></param>
            <returns></returns>
        </member>
        <member name="T:MB.Aop.SoftRegistry.AuthRightInfo">
            <summary>
            AuthRightInfo 权限鉴定的描述信息。
            </summary>
        </member>
        <member name="M:MB.Aop.SoftRegistry.AuthRightInfo.#ctor">
            <summary>
            构造函数...
            </summary>
        </member>
        <member name="M:MB.Aop.SoftRegistry.AuthRightInfo.ToString">
            <summary>
            获取描述的字符窜。
            </summary>
            <returns></returns>
        </member>
        <member name="T:MB.Aop.SoftRegistry.FrmAuthorization">
            <summary>
            FrmAuthorization 授权鉴定窗口。
            </summary>
        </member>
        <member name="F:MB.Aop.SoftRegistry.FrmAuthorization.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:MB.Aop.SoftRegistry.FrmAuthorization.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
        </member>
        <member name="M:MB.Aop.SoftRegistry.FrmAuthorization.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要使用代码编辑器修改
            此方法的内容。
            </summary>
        </member>
        <member name="M:MB.Aop.SoftRegistry.FrmAuthorization.#ctor(MB.Aop.SoftRegistry.AuthRightInfo)">
            <summary>
            构造函数
            </summary>
            <param name="pRightData"></param>
        </member>
        <member name="T:MB.Aop.SoftRegistry.Tools">
            <summary>
            Tools 的摘要说明。
            </summary>
        </member>
        <member name="T:MB.Util.DataValidated">
            <summary>
            常用数据验证处理相关。
            </summary>
        </member>
        <member name="M:MB.Util.DataValidated.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.Util.DataValidated.ValidatedDataType(System.Type,System.Object)">
            <summary>
            检验输入是否为合法的数据类型。
            </summary>
            <param name="sType"></param>
            <param name="dataValue"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.DataValidated.ValidatedLength(System.Int32,System.String)">
            <summary>
            检验输入的数据长度。
            </summary>
            <param name="limitLen"></param>
            <param name="dataValue"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.DataValidated.ValidatedFitLength(System.Int32,System.String)">
            <summary>
            检查字段的输入值最适合的长度。不能长也不能短。
            </summary>
            <param name="limitLen"></param>
            <param name="dataValue"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.DataValidated.GetTypeValidatedErrMsg(System.Type)">
            <summary>
            获取类型的中文描述信息。
            </summary>
            <param name="sType"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.DataValidated.CheckEntityDataExists(System.Collections.IList,System.String[],System.String[],System.Object@)">
            <summary>
            检查指定的值在集合中是否已存在。
            </summary>
            <param name="lstEntitys"></param>
            <param name="logicPropertys"></param>
            <param name="checkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.DataValidated.CheckExistsDataRow(System.Data.DataRow[],System.String[],System.String[],System.Data.DataRow@)">
            <summary>
            检查指定的值在集合中是否已存在。
            </summary>
            <param name="drsData"></param>
            <param name="logicPropertys"></param>
            <param name="findDataRow"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.DataValidated.CheckDataExists(System.Data.DataRow[],System.String[],System.String[])">
            <summary>
            根据指定的字段判断值在集合中是否已经存在。
            </summary>
            <param name="drsData"></param>
            <param name="logicFields"></param>
            <param name="checkValues"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.DataValidated.RemoveNULLRowData(System.Data.DataSet)">
            <summary>
             移除空行数据。
            </summary>
            <param name="dsData"></param>
        </member>
        <member name="M:MB.Util.DataValidated.RowIsNull(System.Data.DataRow)">
            <summary>
            判断整行的数据是否都为空。在新增的时候，如果是空行，将忽略不进行处理。
            </summary>
            <param name="drData"></param>
            <returns></returns>
        </member>
        <member name="P:MB.Util.DataValidated.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="T:MB.Util.DESDataEncrypt">
            <summary>
            基于常量密钥的简单字符加密处理。
            </summary>
        </member>
        <member name="M:MB.Util.DESDataEncrypt.DecryptString(System.String)">
            <summary>
            解密字符窜
            </summary>
            <param name="pDecryptStr"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.DESDataEncrypt.EncryptString(System.String)">
            <summary>
            加密字符窜
            </summary>
            <param name="pEncryptedStr"></param>
            <returns></returns>
        </member>
        <member name="T:MB.Util.Emit.DynamicPropertyAccessor">
            <summary>
            通过指定类型,动态获取对象的属性信息。
            </summary>
        </member>
        <member name="T:MB.Util.Emit.IDynamicPropertyAccessor">
             <summary>
            定义一个动态获取属性的接口
             </summary>
        </member>
        <member name="M:MB.Util.Emit.IDynamicPropertyAccessor.Get(System.Object)">
            <summary>
            从目标对象中获取属性的值。
            </summary>
            <param name="target">属性所在的目标对象</param>
            <returns>属性值.</returns>
        </member>
        <member name="M:MB.Util.Emit.IDynamicPropertyAccessor.Set(System.Object,System.Object)">
            <summary>
            为目标对象设置属性值。
            </summary>
            <param name="target">属性所在的目标对象</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:MB.Util.Emit.DynamicPropertyAccessor.CreateDynamicProperyAccessOnObjType(System.Type)">
            <summary>
            创建动态对象的属性访问器，以便快速的动态访问
            </summary>
            <param name="typeObject">对象的类型</param>
            <returns>属性访问器，以字段存储</returns>
        </member>
        <member name="M:MB.Util.Emit.DynamicPropertyAccessor.#ctor(System.Type,System.String)">
            <summary>
            创建一个新的属性获取器.
            </summary>
            <param name="targetType">目标对象类型</param>
            <param name="property">属性名称</param>
        </member>
        <member name="M:MB.Util.Emit.DynamicPropertyAccessor.#ctor(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            创建一个新的属性获取器
            </summary>
            <param name="targetType">目标对象类型</param>
            <param name="propertyInfo">属性</param>
        </member>
        <member name="M:MB.Util.Emit.DynamicPropertyAccessor.#ctor(System.Type,System.String,System.Reflection.PropertyInfo)">
            <summary>
            创建一个新的属性获取器.
            </summary>
            <param name="targetType">目标对象类型.</param>
            <param name="propertyInfo">属性.</param>
        </member>
        <member name="M:MB.Util.Emit.DynamicPropertyAccessor.Get(System.Object)">
            <summary>
            从目标中获取属性的值
            </summary>
            <param name="target">目标对象.</param>
            <returns>属性值</returns>
        </member>
        <member name="M:MB.Util.Emit.DynamicPropertyAccessor.Set(System.Object,System.Object)">
            <summary>
            设置目标对象的属性值
            </summary>
            <param name="target">目标对象</param>
            <param name="value">需要设置的值</param>
        </member>
        <member name="M:MB.Util.Emit.DynamicPropertyAccessor.InitTypes">
            <summary>
            建立一个哈稀表存储Msil 语法和类型之间的关系
            </summary>
        </member>
        <member name="T:MB.Util.Emit.DynamicPropertyAccessorException">
            <summary>
             动态属性获取异常。
            </summary>
        </member>
        <member name="M:MB.Util.Emit.DynamicPropertyAccessorException.#ctor(System.String)">
            <summary>
            动态属性获取异常。
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MB.Util.Expressions.ExpressionHelper">
            <summary>
            ExpressionHelper. 从表达式中获取属性或者方法的名称。
            </summary>
        </member>
        <member name="M:MB.Util.Expressions.ExpressionHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            从Action 中获取属性名称。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Expressions.ExpressionHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            从函数中获取属性名称。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Expressions.ExpressionHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            从函数中获取属性名称。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Expressions.ExpressionHelper.GetMethodName``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            从方法中获取名称。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:MB.Util.ExtendMessageHelper">
             <summary>
            美邦移动短信发送。
             </summary>
        </member>
        <member name="M:MB.Util.ExtendMessageHelper.SendMobileMessage(MB.Util.Model.SMSEntity)">
            <summary>
            发送短信信息。
            </summary>
            <param name="msgInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.ExtendMessageHelper.SendMobileMessage(MB.Util.Model.MobileMessageInfo)">
            <summary>
            发送短信信息。
            </summary>
            <param name="msgInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.ExtendMessageHelper.ReceiveMobileMessage">
            <summary>
            短信接收
            </summary>
        </member>
        <member name="M:MB.Util.ExtendMessageHelper.SendEmail(System.String,System.String,System.String,System.Boolean,System.String[])">
            <summary>
            邮件发送
            </summary>
            <param name="touser">指定的用户</param>
            <param name="subject">标题</param>
            <param name="body">内容</param>
            <param name="isBodyHtml">是否为html 格式</param>
            <param name="attaachFiles">附件(完整的路径名称)</param>
        </member>
        <member name="M:MB.Util.ExtendMessageHelper.SendEmail(System.Net.Mail.MailMessage)">
            <summary>
            邮件发送
            </summary>
            <param name="mailMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.ExtendMessageHelper.ReceiveEmail">
            <summary>
            邮件接收
            </summary>
            <returns></returns>
        </member>
        <member name="P:MB.Util.ExtendMessageHelper.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="T:MB.Util.Model.BfModuleCommentInfo">
            <summary> 
            文件生成时间 2009-08-24 10:37 
            模块评论描述信息。
            </summary> 
        </member>
        <member name="M:MB.Util.Model.BfModuleCommentInfo.#ctor">
            <summary>
            模块评论描述信息。
            </summary>
        </member>
        <member name="F:MB.Util.Model.BfModuleCommentInfo._COMMENT_TYPE">
            <summary>
            评语类型。
            </summary>
        </member>
        <member name="P:MB.Util.Model.BfModuleCommentInfo.ID">
            <summary>
            评论ID。
            </summary>
        </member>
        <member name="P:MB.Util.Model.BfModuleCommentInfo.APPLICATION_IDENTITY">
            <summary>
            应用程序标识。
            </summary>
        </member>
        <member name="P:MB.Util.Model.BfModuleCommentInfo.MODULE_IDENTITY">
            <summary>
            模块标识。
            </summary>
        </member>
        <member name="P:MB.Util.Model.BfModuleCommentInfo.COMMENT_CONTENT">
            <summary>
            评论内容。
            </summary>
        </member>
        <member name="P:MB.Util.Model.BfModuleCommentInfo.USER_ID">
            <summary>
            用户ID 。
            </summary>
        </member>
        <member name="P:MB.Util.Model.BfModuleCommentInfo.CREATE_DATE">
            <summary>
            发表评论日期。
            </summary>
        </member>
        <member name="P:MB.Util.Model.BfModuleCommentInfo.LAST_MODIFIED_DATE">
            <summary>
            最后修改日期。
            </summary>
        </member>
        <member name="T:MB.Util.Model.CodeNameInfo">
            <summary>
            代码名称描述。
            </summary>
        </member>
        <member name="P:MB.Util.Model.CodeNameInfo.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:MB.Util.Model.CodeNameInfo.CODE">
            <summary>
            编码。
            </summary>
        </member>
        <member name="P:MB.Util.Model.CodeNameInfo.NAME">
            <summary>
            名称。
            </summary>
        </member>
        <member name="T:MB.Util.Model.DateFilterStruct">
            <summary>
            日期类型。
            </summary>
        </member>
        <member name="P:MB.Util.Model.DateFilterStruct.BeginDate">
            <summary>
            开始时间。
            </summary>
        </member>
        <member name="P:MB.Util.Model.DateFilterStruct.EndDate">
            <summary>
            结束日期。
            </summary>
        </member>
        <member name="T:MB.Util.Model.DocOperateType">
            <summary>
            单据操作类型。
            在数据库中存储对应的int 数值
            </summary>
        </member>
        <member name="F:MB.Util.Model.DocOperateType.Save">
            <summary>
            录入保存
            </summary>
        </member>
        <member name="F:MB.Util.Model.DocOperateType.Validated">
            <summary>
            确认
            </summary>
        </member>
        <member name="F:MB.Util.Model.DocOperateType.Approved">
            <summary>
            审核
            </summary>
        </member>
        <member name="F:MB.Util.Model.DocOperateType.Completed">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:MB.Util.Model.DocOperateType.Withdraw">
            <summary>
            撤消
            </summary>
        </member>
        <member name="F:MB.Util.Model.DocOperateType.Suspended">
            <summary>
            挂起
            </summary>
        </member>
        <member name="F:MB.Util.Model.DocOperateType.CancelSuspended">
            <summary>
            取消挂起
            </summary>
        </member>
        <member name="F:MB.Util.Model.DocOperateType.OverDocState">
            <summary>
            表示已进入扩展操作状态。
            </summary>
        </member>
        <member name="T:MB.Util.Model.DocState">
            <summary>
            单据编辑状态。
            </summary>
        </member>
        <member name="F:MB.Util.Model.DocState.Progress">
            <summary>
            录入中。
            </summary>
        </member>
        <member name="F:MB.Util.Model.DocState.Validated">
            <summary>
            已确认。
            </summary>
        </member>
        <member name="F:MB.Util.Model.DocState.Approved">
            <summary>
            已审核通过。
            </summary>
        </member>
        <member name="F:MB.Util.Model.DocState.Completed">
             <summary>
            已完成
             </summary>
        </member>
        <member name="F:MB.Util.Model.DocState.Withdraw">
            <summary>
            已撤消
            </summary>
        </member>
        <member name="F:MB.Util.Model.DocState.Suspended">
            <summary>
            已挂起
            </summary>
        </member>
        <member name="T:MB.Util.Model.EntityState">
            <summary>
            永久性操作中的实体对象状态。
            </summary>
        </member>
        <member name="F:MB.Util.Model.EntityState.Transient">
            <summary>
             瞬时的。
            </summary>
        </member>
        <member name="F:MB.Util.Model.EntityState.New">
            <summary>
            新建。
            </summary>
        </member>
        <member name="F:MB.Util.Model.EntityState.Modified">
            <summary>
            已永久存储并已经发生修改。
            </summary>
        </member>
        <member name="F:MB.Util.Model.EntityState.Persistent">
            <summary>
            已永久存储。
            </summary>
        </member>
        <member name="F:MB.Util.Model.EntityState.Deleted">
            <summary>
            已删除。
            </summary>
        </member>
        <member name="T:MB.Util.Model.GreatCapacityInvokeParamInfo">
            <summary>
            大数据调用的参数描述信息。
            </summary>
        </member>
        <member name="M:MB.Util.Model.GreatCapacityInvokeParamInfo.#ctor(System.Int32)">
            <summary>
            在获取数据时传入的参数。
            默认情况下IsBeginWorking = false;
            </summary>
            <param name="dataIndex">数据块Index</param>
        </member>
        <member name="M:MB.Util.Model.GreatCapacityInvokeParamInfo.#ctor(System.Int32,System.String)">
            <summary>
            异步调用输入的参数。
            初始化执行时调用。
            默认情况下IsBeginWorking = true;
            </summary>
            <param name="dataInDocType">数据在单据定义中的类型</param>
            <param name="xmlFilterParams">过滤的参数</param>
        </member>
        <member name="P:MB.Util.Model.GreatCapacityInvokeParamInfo.IsBeginWorking">
            <summary>
            判断是否为初始化执行操作。
            初始化执行操作时将从数据库中获取数据并根据默认的块容量进行计算。
            </summary>
        </member>
        <member name="P:MB.Util.Model.GreatCapacityInvokeParamInfo.DataIndex">
            <summary>
            执行获取数据的偏移量（dataIndex * 单个数据块大小）。
            </summary>
        </member>
        <member name="P:MB.Util.Model.GreatCapacityInvokeParamInfo.DataInDocType">
            <summary>
            当前获取数据在单据中的数据类型(兼容单据处理默认提供的方法)。
            </summary>
        </member>
        <member name="P:MB.Util.Model.GreatCapacityInvokeParamInfo.ParamValues">
            <summary>
            以值的方式传递参数。
            </summary>
        </member>
        <member name="P:MB.Util.Model.GreatCapacityInvokeParamInfo.XmlFilterParams">
            <summary>
            MB.Util.Model.QueryParameterInfo[] 系列化后的XML 参数字符窜。
            </summary>
        </member>
        <member name="T:MB.Util.Model.GreatCapacityResult">
            <summary>
            大数据量获取返回值。
            </summary>
        </member>
        <member name="M:MB.Util.Model.GreatCapacityResult.#ctor">
            <summary>
            大数据量获取返回值。
            </summary>
        </member>
        <member name="M:MB.Util.Model.GreatCapacityResult.#ctor(System.Int32)">
            <summary>
            大数据量获取返回值。
            初始化时调用。
            </summary>
            <param name="maxSegment">最大的数据块</param>
        </member>
        <member name="M:MB.Util.Model.GreatCapacityResult.#ctor(System.Collections.IList)">
            <summary>
             大数据量获取返回值。
             根据Index 得到返回值时调用。
            </summary>
            <param name="segmentData">当前得到的集合</param>
        </member>
        <member name="P:MB.Util.Model.GreatCapacityResult.MaxSegment">
            <summary>
            当前获取数据的最大数据块。
            </summary>
        </member>
        <member name="P:MB.Util.Model.GreatCapacityResult.SegmentData">
            <summary>
            根据Index 返回的数据集合。
            </summary>
        </member>
        <member name="T:MB.BaseFrame.MBShareDataProvider">
            <summary>
            框架公共数据提供。
            </summary>
        </member>
        <member name="M:MB.BaseFrame.MBShareDataProvider.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.BaseFrame.MBShareDataProvider.GetSysCodeNameFromXml(System.String,System.String)">
            <summary>
            从配置的XML 文件中获取系统编码。
            </summary>
            <param name="xmlFileName"></param>
            <param name="codeNameType"></param>
            <returns></returns>
        </member>
        <member name="P:MB.BaseFrame.MBShareDataProvider.DocStates">
            <summary>
            系统单据状态。
            </summary>
        </member>
        <member name="T:MB.Util.Model.MobileMessageInfo">
             <summary>
            短信消息描述信息
             </summary>
        </member>
        <member name="M:MB.Util.Model.MobileMessageInfo.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="content">短信内容</param>
            <param name="mobile">电话号码</param>
        </member>
        <member name="M:MB.Util.Model.MobileMessageInfo.ToString">
            <summary>
            转换为
            </summary>
            <returns></returns>
        </member>
        <member name="P:MB.Util.Model.MobileMessageInfo.Autor">
            <summary>
            作者
            </summary>
        </member>
        <member name="P:MB.Util.Model.MobileMessageInfo.Content">
            <summary>
            短信内容。
            </summary>
        </member>
        <member name="P:MB.Util.Model.MobileMessageInfo.Mobile">
            <summary>
            手机电话。
            </summary>
        </member>
        <member name="P:MB.Util.Model.MobileMessageInfo.Pri">
            <summary>
            优先级。
            </summary>
        </member>
        <member name="P:MB.Util.Model.MobileMessageInfo.ToName">
            <summary>
            对方名称
            </summary>
        </member>
        <member name="T:MB.Util.Model.ModuleCommandInfo">
            <summary>
            模块相应操作的描述信息。
            </summary>
        </member>
        <member name="M:MB.Util.Model.ModuleCommandInfo.#ctor">
            <summary>
            构造函数...
            </summary>
        </member>
        <member name="M:MB.Util.Model.ModuleCommandInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="commandID">命令操作的标记</param>
            <param name="clientRule">客户端的业务类</param>
            <param name="uiView">客户端操作界面</param>
        </member>
        <member name="P:MB.Util.Model.ModuleCommandInfo.CommandID">
            <summary>
            命令操作的标记。
            </summary>
        </member>
        <member name="P:MB.Util.Model.ModuleCommandInfo.ClientRule">
            <summary>
            客户端的业务类。
            完整的类型配置信息，类型，配件名称之间用分号隔开。
            </summary>
        </member>
        <member name="P:MB.Util.Model.ModuleCommandInfo.UIView">
            <summary>
            客户端操作界面。
            完整的类型配置信息，类型，配件名称之间用分号隔开。
            </summary>
        </member>
        <member name="P:MB.Util.Model.ModuleCommandInfo.RuleCreateParams">
            <summary>
            业务类创建需要的参数说明。
            </summary>
        </member>
        <member name="P:MB.Util.Model.ModuleCommandInfo.UICreateParams">
            <summary>
            UI 创建需要的参数说明。
            </summary>
        </member>
        <member name="T:MB.Util.Model.ModuleTreeNodeInfo">
            <summary>
            功能模块树型节点描述信息。
            </summary>
        </member>
        <member name="M:MB.Util.Model.ModuleTreeNodeInfo.#ctor(System.Int32,System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="id"></param>
            <param name="name"></param>
        </member>
        <member name="P:MB.Util.Model.ModuleTreeNodeInfo.ID">
            <summary>
            模块ID.
            </summary>
        </member>
        <member name="P:MB.Util.Model.ModuleTreeNodeInfo.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:MB.Util.Model.ModuleTreeNodeInfo.Name">
            <summary>
            模块名称。
            </summary>
        </member>
        <member name="P:MB.Util.Model.ModuleTreeNodeInfo.PrevID">
            <summary>
            上级节点。
            </summary>
        </member>
        <member name="P:MB.Util.Model.ModuleTreeNodeInfo.LevelNum">
            <summary>
            所在层的编号。
            </summary>
        </member>
        <member name="P:MB.Util.Model.ModuleTreeNodeInfo.Index">
            <summary>
            节点在所在层的Index.
            </summary>
        </member>
        <member name="P:MB.Util.Model.ModuleTreeNodeInfo.ImageIndex">
            <summary>
            模块图标。
            </summary>
        </member>
        <member name="P:MB.Util.Model.ModuleTreeNodeInfo.PriID">
            <summary>
            配置的权限Key。
            </summary>
        </member>
        <member name="P:MB.Util.Model.ModuleTreeNodeInfo.RejectCommands">
            <summary>
            否决的操作Commands。
            </summary>
        </member>
        <member name="P:MB.Util.Model.ModuleTreeNodeInfo.IsGroupNode">
            <summary>
            判断是否为分组节点。
            </summary>
        </member>
        <member name="P:MB.Util.Model.ModuleTreeNodeInfo.Commands">
            <summary>
            客户端业务类。
            </summary>
        </member>
        <member name="T:MB.Util.Model.QueryParameterInfo">
            <summary>
            数据查询过滤属性定义。
            该实体类 的系列化有专门的方法来处理 。
            </summary>
        </member>
        <member name="M:MB.Util.Model.QueryParameterInfo.#ctor">
            <summary>
            创建需要进行过滤查询的字段描述信息。
            </summary>
        </member>
        <member name="M:MB.Util.Model.QueryParameterInfo.#ctor(MB.Util.Model.QueryGroupLinkType)">
            <summary>
            新创建一个分组节点。
            </summary>
            <param name="groupNodeLinkType">分组节点类型</param>
        </member>
        <member name="M:MB.Util.Model.QueryParameterInfo.#ctor(System.String,System.Object,MB.Util.DataFilterConditions)">
            <summary>
            创建需要进行过滤查询的字段描述信息。
            </summary>
            <param name="propertyName"></param>
            <param name="queryValue"></param>
            <param name="filterCondition"></param>
        </member>
        <member name="M:MB.Util.Model.QueryParameterInfo.#ctor(System.String,System.Object,MB.Util.DataFilterConditions,System.Boolean)">
            <summary>
            创建需要进行过滤查询的字段描述信息。
            </summary>
            <param name="propertyName"></param>
            <param name="queryValue"></param>
            <param name="filterCondition">过滤条件</param>
            <param name="limited">是否为限制列</param>
        </member>
        <member name="P:MB.Util.Model.QueryParameterInfo.PropertyName">
            <summary>
            属性的完整名称包含类名称和属性名称。
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryParameterInfo.Description">
            <summary>
            查询对应字段或者属性的描述。
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryParameterInfo.Value">
            <summary>
            需要进行查询比较的值。
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryParameterInfo.Value2">
            <summary>
            需要查询进行比较的值。 
            只在查询在什么和什么之间的时候有用。
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryParameterInfo.Condition">
            <summary>
            查询条件。
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryParameterInfo.DataType">
            <summary>
            查询值的类型。
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryParameterInfo.OrderIndex">
            <summary>
            排序顺序。
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryParameterInfo.Limited">
            <summary>
            判断该参数是否做为限定的参数，限制的参数将不发送给数据库服务器。
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryParameterInfo.IsGroupNode">
            <summary>
            判断是否为分组节电。
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryParameterInfo.MultiValue">
            <summary>
            判断Value 是否为多个值的组合，不同值之间用逗号分开。
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryParameterInfo.GroupNodeLinkType">
            <summary>
            分组内节点连接类型。
            </summary>
        </member>
        <member name="P:MB.Util.Model.QueryParameterInfo.Childs">
            <summary>
            分组内子节点。
            </summary>
        </member>
        <member name="T:MB.Util.Model.QueryGroupLinkType">
            <summary>
            分组节点类型。
            </summary>
        </member>
        <member name="F:MB.Util.Model.QueryGroupLinkType.AND">
            <summary>
            组内的所有节点以 AND 关联。
            </summary>
        </member>
        <member name="F:MB.Util.Model.QueryGroupLinkType.OR">
            <summary>
            组内的所有节点以 OR 进行关联。
            </summary>
        </member>
        <member name="F:MB.Util.Model.QueryGroupLinkType.AndNot">
            <summary>
            组内的所有节点以 Not AND 关联。
            </summary>
        </member>
        <member name="F:MB.Util.Model.QueryGroupLinkType.OrNot">
            <summary>
            组内的所有节点以 Not OR 进行关联。
            </summary>
        </member>
        <member name="T:MB.BaseFrame.SOD">
            <summary>
            通用常量定义。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.LOG_PARAMTER_VALUE_MAX_LENGTH">
            <summary>
            在方法调用中日记记录中参数的最大长度。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.OVER_DOC_STATE_LIMIT">
            <summary>
            表示该值以下的都是通用类型，超过或等于该值的为扩展类型。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.DYNAMC_SEPARATOR_CHAR">
            <summary>
            动态列分隔符
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.NULLABLE_VALUE_TYPE">
            <summary>
            允许为 空的值类型。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.DYNAMIC_COL_LEFT_NAME">
            <summary>
            动态列左边的名称
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.DYNAMIC_COLUMN_NAME">
            <summary>
            动态列的左边名称。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.MODULE_COMMAND_OPEN">
            <summary>
            打开模块
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.MODULE_COMMAND_ADD">
            <summary>
            模块对象新增加
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.MODULE_COMMAND_EDIT">
            <summary>
            模块对象修改
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.MODULE_COMMAND_QUERY">
            <summary>
            模块对象查询
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.MODULE_COMMAND_DELETE">
            <summary>
            模块对象删除
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.MODULE_COMMAND_SAVE">
            <summary>
            模块对象保存
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.MODULE_COMMAND_SUBMIT">
            <summary>
            模块数据提交。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.MODULE_COMMAND_CANCEL_SUBMIT">
            <summary>
            模块数据取消提交。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.MODULE_COMMAND_IMPORT">
            <summary>
            模块数据导入。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.PARAM_CURRENT_USER_ID">
            <summary>
            当前用户ID      
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.PARAM_DATETIME_NOW">
            <summary>
            当前系统时间。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.CURRENT_USER_IDENTITY">
            <summary>
            当前登录用户。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.QUERY_BEHAVIOR_MESSAGE_HEADER">
            <summary>
            获取当前用户查询的行为信息
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.QUERY_RESPONSE_INFO">
            <summary>
            获取当前查询的总记录数
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.PERFORMANCE_MONITOR_SWITCH_MESSAGE_HEADER">
            <summary>
            性能检测消息头开关，表示客户端是否开启性能检测
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.PERFORMANCE_MONITOR_RESPONSE_MESSAGE_HEADER">
            <summary>
             中间层性能检测数据
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.MESSAGE_HEADER_NAME_SPACE">
            <summary>
            消息头传递的默认namespace
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.OBJECT_PROPERTY_ID">
            <summary>
            对象键值。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.ENTITY_LAST_MODIFIED_DATE">
            <summary>
            实体类的最后修改时间。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.L_SINGLE_PACK_MAX_LENGTH">
            <summary>
            基于WCF 数据传输单个包的数据长度。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.L_SINGLE_MAX_LOG_LENGTH">
            <summary>
            在日志记录中单行记录的最大字节数长度。
            超过将不做日志记录处理。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.DATE_TIME_FORMATE">
            <summary>
            以中国式为标准的非区域性时间格式
            带时间格式
            System.Globalization.DateTimeFormatInfo.InvariantInfo
            在数据库操作中使用 DATABASE_DATE_TIME_FORMATE
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.DATE_WITHOUT_TIME_FORMATE">
            <summary>
             以中国式为标准的非区域性时间格式
            不带时间的日期格式
            在数据库操作中使用 DATABASE_WITHOUT_DATE_TIME_FORMATE
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.DATABASE_DATE_TIME_FORMATE">
            <summary>
            数据库中具体到秒的时间格式，只能在SQL 中使用。
            在代码中使用 DATE_TIME_FORMATE
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.DATABASE_WITHOUT_DATE_TIME_FORMATE">
            <summary>
            数据库操作中不带时间秒的数据格式
            在代码中使用 DATE_WITHOUT_TIME_FORMATE 格式。
            </summary>
        </member>
        <member name="F:MB.BaseFrame.SOD.ADMINISTRATOR_USER_CODE">
            <summary>
            登录用户管理人员编码。
            </summary>
        </member>
        <member name="T:MB.Util.Model.SysLoginUserInfo">
            <summary> 
            文件生成时间 2009-05-12 10:50 
            当前登录用户的描述信息。
            </summary> 
        </member>
        <member name="M:MB.Util.Model.SysLoginUserInfo.#ctor">
            <summary>
             当前登录用户的描述信息。
            </summary>
        </member>
        <member name="F:MB.Util.Model.SysLoginUserInfo._USER_ID">
            <summary>
            为了兼容老ERP 而定义为 string 类型。
            在新的解决方案中存储的是int类型
            </summary>
        </member>
        <member name="F:MB.Util.Model.SysLoginUserInfo._DFLT_TREE_ID">
            <summary>
            在新的解决方案中存储的是int类型。
            </summary>
        </member>
        <member name="F:MB.Util.Model.SysLoginUserInfo._AU_UNIT_ID">
            <summary>
            在新的解决方案中存储的是int类型
            </summary>
        </member>
        <member name="F:MB.Util.Model.SysLoginUserInfo._OWNER_ID">
            <summary>
            在新的解决方案中存储的是int类型
            </summary>
        </member>
        <member name="F:MB.Util.Model.SysLoginUserInfo._SUPERIOR_ID">
            <summary>
            在新的解决方案中存储的是int类型
            </summary>
        </member>
        <member name="T:MB.Util.Model.SysUserPrivInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.Util.Model.SysUserPrivInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:MB.Util.Model.SysUserPrivInfo._UNIT_ID">
            <summary>
            在新的解决方案中存储的是int类型
            </summary>
        </member>
        <member name="F:MB.Util.Model.SysUserPrivInfo._PRIV_ID">
            <summary>
            在新的解决方案中存储的是int类型
            </summary>
        </member>
        <member name="T:MB.Util.Model.VersionUpdateFileInfo">
            <summary>
            版本更新的文件描述信息。
            </summary>
        </member>
        <member name="M:MB.Util.Model.VersionUpdateFileInfo.#ctor">
            <summary>
             版本更新的文件描述信息。
            </summary>
        </member>
        <member name="P:MB.Util.Model.VersionUpdateFileInfo.FileName">
            <summary>
            需要下载的文件名称。
            </summary>
        </member>
        <member name="P:MB.Util.Model.VersionUpdateFileInfo.Description">
            <summary>
            文件描述。
            </summary>
        </member>
        <member name="P:MB.Util.Model.VersionUpdateFileInfo.FileExtension">
            <summary>
            文件扩展名称。
            </summary>
        </member>
        <member name="P:MB.Util.Model.VersionUpdateFileInfo.FileLength">
            <summary>
            文件总长度。
            </summary>
        </member>
        <member name="P:MB.Util.Model.VersionUpdateFileInfo.HasDownLoad">
            <summary>
            已经下载的文件大小。
            </summary>
        </member>
        <member name="P:MB.Util.Model.VersionUpdateFileInfo.Completed">
            <summary>
            判断是否已下载完成。
            </summary>
        </member>
        <member name="P:MB.Util.Model.VersionUpdateFileInfo.ChildDirectoryName">
            <summary>
            文件存储的路径。
            如果为空表示存储在当前目录下。
            </summary>
        </member>
        <member name="P:MB.Util.Model.VersionUpdateFileInfo.Remark">
            <summary>
            版本文件描述的备注信息。
            </summary>
        </member>
        <member name="T:MB.Util.Model.WcfCredentialInfo">
            <summary>
            服务项配置信息。
            </summary>
        </member>
        <member name="M:MB.Util.Model.WcfCredentialInfo.#ctor">
            <summary>
            
            </summary>
            <param name="serverInfo"></param>
        </member>
        <member name="M:MB.Util.Model.WcfCredentialInfo.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="baseAddress"></param>
            <param name="userName"></param>
            <param name="pwd"></param>
            <param name="start"></param>
        </member>
        <member name="P:MB.Util.Model.WcfCredentialInfo.BaseAddress">
            <summary>
            WCF 基准地址。
            </summary>
        </member>
        <member name="P:MB.Util.Model.WcfCredentialInfo.UserName">
            <summary>
            用户名称。
            </summary>
        </member>
        <member name="P:MB.Util.Model.WcfCredentialInfo.Password">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="P:MB.Util.Model.WcfCredentialInfo.Domain">
            <summary>
            域
            </summary>
        </member>
        <member name="P:MB.Util.Model.WcfCredentialInfo.StartWindowsCredential">
            <summary>
            只有本地调式的服务才不需要，远程都需要启动安全证书，直到用户反复抱怨为止。
            </summary>
        </member>
        <member name="P:MB.Util.Model.WcfCredentialInfo.HostType">
            <summary>
            服务承载类型
            </summary>
        </member>
        <member name="P:MB.Util.Model.WcfCredentialInfo.EndpointFormatString">
            <summary>
            WCF 终节点的格式化字符窜。 
            例如： http://192.168.125.70:8089/MyServices/{0}.svc
            </summary>
        </member>
        <member name="P:MB.Util.Model.WcfCredentialInfo.ReplaceRelativePathLastDot">
            <summary>
            是否需要 修改终节点的相对路径
            </summary>
        </member>
        <member name="T:MB.Util.Model.WcfServiceHostType">
            <summary>
            
            </summary>
        </member>
        <member name="F:MB.Util.Model.WcfServiceHostType.SELF">
            <summary>
            自承载     developer
            </summary>
        </member>
        <member name="F:MB.Util.Model.WcfServiceHostType.DEVELOPER">
            <summary>
            开发过程VS.NET 自启动服务。
            </summary>
        </member>
        <member name="F:MB.Util.Model.WcfServiceHostType.WS">
            <summary>
            Windows Server   
            </summary>
        </member>
        <member name="F:MB.Util.Model.WcfServiceHostType.WAS">
            <summary>
            Windows 击活服务
            </summary>
        </member>
        <member name="F:MB.Util.Model.WcfServiceHostType.IIS">
            <summary>
            Web IIS
            </summary>
        </member>
        <member name="T:MB.Util.Model.WcfServiceBindingType">
            <summary>
            服务绑定的类型。 
            </summary>
        </member>
        <member name="F:MB.Util.Model.WcfServiceBindingType.wsHttp">
            <summary>
            WsHttp
            </summary>
        </member>
        <member name="F:MB.Util.Model.WcfServiceBindingType.netTcp">
            <summary>
            NetTcp
            </summary>
        </member>
        <member name="T:MB.Util.Model.WcfFaultMessage">
            <summary>
            WCF SOAP 消息体定义。
            </summary>
        </member>
        <member name="M:MB.Util.Model.WcfFaultMessage.#ctor(System.String)">
            <summary>
            构造函数...
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:MB.Util.Model.WcfFaultMessage.#ctor(System.String,MB.Util.APPMessageType)">
            <summary>
            构造函数...
            </summary>
            <param name="strMessage"></param>
            <param name="messageType"></param>
        </member>
        <member name="M:MB.Util.Model.WcfFaultMessage.#ctor(System.String,System.String,MB.Util.APPMessageType)">
            <summary>
            构造函数...
            </summary>
            <param name="strMessage"></param>
            <param name="errorCode"></param>
            <param name="messageType"></param>
        </member>
        <member name="P:MB.Util.Model.WcfFaultMessage.Message">
            <summary> 
            异常消息文本 
            </summary> 
        </member>
        <member name="P:MB.Util.Model.WcfFaultMessage.ErrorCode">
            <summary> 
            异常编码 
            </summary> 
        </member>
        <member name="P:MB.Util.Model.WcfFaultMessage.MessageType">
            <summary>
            
            </summary>
        </member>
        <member name="T:MB.Util.Model.ServerConfigInfo">
            <summary>
            服务项配置信息
            </summary>
        </member>
        <member name="P:MB.Util.Model.ServerConfigInfo.ServerIP">
            <summary>
            服务IP地址
            </summary>
        </member>
        <member name="P:MB.Util.Model.ServerConfigInfo.Credential">
            <summary>
            证书。
            </summary>
        </member>
        <member name="T:MB.Util.MyFileStream">
            <summary>
            主要针对文本硬盘操作的简单读写。
            </summary>
        </member>
        <member name="M:MB.Util.MyFileStream.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.Util.MyFileStream.StreamReader(System.String)">
            <summary>
             以UTF8 的格式从文本文件中读取字符窜。
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyFileStream.StreamWriter(System.String,System.String)">
            <summary>
            把字符窜文本以覆盖的方式写到本地硬盘中。
            </summary>
            <param name="fileFullName"></param>
            <param name="strText"></param>
        </member>
        <member name="P:MB.Util.MyFileStream.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="T:MB.Util.MyHashtable`2">
            <summary>
            扩展的哈希存储表。
             继承Dictionary 是因为 Dictionary 类是作为一个哈希表来实现的 所以它的查询速度还是非常快的。
            </summary>
        </member>
        <member name="M:MB.Util.MyHashtable`2.#ctor">
            <summary>
            扩展的哈希存储表
            </summary>
        </member>
        <member name="M:MB.Util.MyHashtable`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            扩展的哈希存储表
            </summary>
            <param name="dictionary">包含的初始化元素</param>
            <param name="comparer">比较键值时需要</param>
        </member>
        <member name="T:MB.Util.MyNetworkCredential">
            <summary>
            提供创建Windows 访问的凭证。
            </summary>
        </member>
        <member name="M:MB.Util.MyNetworkCredential.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.Util.MyNetworkCredential.CreateNetworkCredential(MB.Util.Model.WcfCredentialInfo)">
            <summary>
            创建另外一种windows 凭证。
            </summary>
            <param name="cfgInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyNetworkCredential.CreateWcfClientWithCredential``1">
            <summary>
            创建带有Windows 安全访问Wcf 客户端代理。
            </summary>
            <param name="wcfClient"></param>
            <returns></returns>
        </member>
        <member name="P:MB.Util.MyNetworkCredential.CurrentSelectedServerInfo">
            <summary>
            当前选择的服务配置信息。
            </summary>
        </member>
        <member name="T:MB.Util.MyInvokeWebServiceHelper">
            <summary>
            Web Service 动态调用处理。
            </summary>
        </member>
        <member name="M:MB.Util.MyInvokeWebServiceHelper.InvokeWebService(System.String,System.String,System.Object[])">
            <summary>
            根据Url 调用web services
            </summary>
            <param name="url"></param>
            <param name="methodname"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyInvokeWebServiceHelper.InvokeWebService(System.String,System.String,System.String,System.Object[])">
            <summary>
            根据Url 调用web services
            </summary>
            <param name="url"></param>
            <param name="classname"></param>
            <param name="methodname"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:MB.Util.Serializer.BinarySerializerAndZip">
            <summary>
            二进制系列化并压缩
            </summary>
        </member>
        <member name="M:MB.Util.Serializer.BinarySerializerAndZip.Serialize(System.Object)">
            <summary>
            Serialize
            </summary>
            <param name="objectInstance"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Serializer.BinarySerializerAndZip.Deserialize(System.Byte[])">
            <summary>
            Deserialize
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:MB.Util.Serializer.EntityXmlSerializer`1">
             <summary>
            实体对象的XML 窜行化。(优先考虑性能问题，忽略特殊需求)
            尽量在接口的传递中不要使用转换为XML 来进行传递。
            提供该方法的实现是在特殊的处理中有用。
            注意：
             1)对于引用类型的属性，必须先配置 PropertyXmlConfigAttribute。否则将忽略不处理
             2)对于数组,目前只处理 string[],其它类型不做处理。 数组的值用分号隔开。
             3)只支持简单对象的系列化,对于范型不完全支持
             </summary>
        </member>
        <member name="M:MB.Util.Serializer.EntityXmlSerializer`1.SingleSerializer(`0,System.String)">
            <summary>
            单个实体对象的系列化
            </summary>
            <param name="entity">需要实例化的实体对象</param>
            <param name="rootNodeName">系列化对像在XML 文件中的根节点</param>
            <returns>返回系列化后的XML 字符窜</returns>
        </member>
        <member name="M:MB.Util.Serializer.EntityXmlSerializer`1.SingleDeSerializer(System.String,System.String)">
            <summary>
             单个实体对象的反系列化
            </summary>
            <param name="xmlString">系列化的XML字符窜</param>
            <param name="path">实体对象节点路径名称，如果为空，那么它的路径等于info.GetType().Name</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:MB.Util.Serializer.EntityXmlSerializer`1.Serializer(System.Collections.Generic.List{`0})">
            <summary>
            把参数转换为XML 参数的格式。
            </summary>
            <param name="entitys">需要系列化的实体对象集合</param>
            <returns>系列化后的字符窜</returns>
        </member>
        <member name="M:MB.Util.Serializer.EntityXmlSerializer`1.DeSerializer(System.String)">
            <summary>
            把XML 文件转换为参数的格式。
            </summary>
            <param name="entitysSerializerXmlString">实体集合系列化后的XML字符窜</param>
            <returns>实体集合对象</returns>
        </member>
        <member name="T:MB.Util.Serializer.LightweightTextSerializer">
            <summary>
            以字符窜拼接的方式完成实体对象的系列化。
            系列化后的值是压缩过的。
            </summary>
        </member>
        <member name="M:MB.Util.Serializer.LightweightTextSerializer.#ctor">
             <summary>
            以字符窜拼接的方式完成实体对象的系列化。
             默认使用 UnicodeEncoding 进行编码,支持中文
             </summary>
        </member>
        <member name="M:MB.Util.Serializer.LightweightTextSerializer.#ctor(System.Text.Encoding)">
            <summary>
            以字符窜拼接的方式完成实体对象的系列化。
            </summary>
            <param name="encoding">编码方式,如果在实体类中不包括中文，最好使用单字节的编码器。</param>
        </member>
        <member name="M:MB.Util.Serializer.LightweightTextSerializer.Serializer(System.Data.IDataReader)">
            <summary>
             以最简单的方式系列化为Bytes 的格式。
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Serializer.LightweightTextSerializer.Serializer(System.Data.DataTable)">
            <summary>
            以最简单的方式系列化为Bytes 的格式。
            </summary>
            <param name="dtData"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Serializer.LightweightTextSerializer.Serializer(System.Type,System.Collections.IList)">
            <summary>
            以最简单的方式系列化为Bytes 的格式。
            </summary>
            <param name="entityType">需要系列化的实体对象类型</param>
            <param name="lstData">数据集合</param>
            <returns>压缩后的值</returns>
        </member>
        <member name="M:MB.Util.Serializer.LightweightTextSerializer.DeSerializer(System.Byte[])">
            <summary>
            以最简单的方式系列化为Bytes 的格式。
            </summary>
            <param name="datas"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Serializer.LightweightTextSerializer.DeSerializer(System.Type,System.Byte[])">
            <summary>
            把Bytes 转换为实体对象集合类。
            </summary>
            <param name="entityType">需要系列化的实体对象类型</param>
            <param name="datas">系列化压缩后的Bytes</param>
            <returns></returns>
        </member>
        <member name="T:MB.Util.Serializer.LightweightTextSerializer.MultiSetEntityValue">
            <summary>
            启动一个多线程完成赋值的操作
            </summary>
        </member>
        <member name="T:MB.Util.Serializer.LightweightTextSerializer.MultiSetTableValue">
            <summary>
            启动一个多线程完成赋值的操作
            </summary>
        </member>
        <member name="T:MB.Util.Serializer.TextTableSchema">
            <summary>
            Table 表头结构
            </summary>
        </member>
        <member name="M:MB.Util.Serializer.TextTableSchema.ColumnsToString(System.Collections.Generic.List{MB.Util.Serializer.ColumnInfo})">
            <summary>
            
            </summary>
            <param name="cols"></param>
            <returns></returns>
        </member>
        <member name="T:MB.Util.Serializer.ColumnInfo">
            <summary>
            列的描述信息。
            </summary>
        </member>
        <member name="T:MB.Util.Serializer.QueryParameterXmlSerializer">
            <summary>
            查询过滤参数的XML 窜行化。
            </summary>
        </member>
        <member name="M:MB.Util.Serializer.QueryParameterXmlSerializer.Serializer(MB.Util.Model.QueryParameterInfo[])">
            <summary>
            把参数转换为XML 参数的格式。
            </summary>
            <param name="queryPars">需要系列化的查询参数描述信息</param>
            <returns>系列化后的XML字符窜</returns>
        </member>
        <member name="M:MB.Util.Serializer.QueryParameterXmlSerializer.DeSerializer(System.String)">
            <summary>
            把XML 文件转换为参数的格式。
            </summary>
            <param name="xmlQueryPars">系列化后的XML 字符窜</param>
            <returns></returns>
        </member>
        <member name="P:MB.Util.Serializer.QueryParameterXmlSerializer.DefaultInstance">
            <summary>
            服务器端最好不要直接使用。
            </summary>
        </member>
        <member name="T:MB.Util.Serializer.SoapSerializer">
            <summary>
            oapSerializer 提供 SoapSerializer 的方法系列化操作对象。
            </summary>
        </member>
        <member name="M:MB.Util.Serializer.SoapSerializer.#ctor">
            <summary>
            add private construct function to prevent instance.
            </summary>
        </member>
        <member name="M:MB.Util.Serializer.SoapSerializer.SerializerToStream(System.Object)">
            <summary>
            系列化到Stream.
            </summary>
            <param name="objectInstance">需要进行Soap 系列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Serializer.SoapSerializer.Deserialize(System.IO.MemoryStream)">
            <summary>
            把byte数组 反系列化为对应的object 对象。
            </summary>
            <param name="msData">需要反系列化的对象Stream</param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Serializer.SoapSerializer.SerializerToByte(System.Object)">
            <summary>
            把对象系列化为byte数组的格式。
            </summary>
            <param name="objectInstance"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Serializer.SoapSerializer.DeserializeByByte(System.Byte[])">
            <summary>
            把byte数组 反系列化为对应的object 对象。
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Serializer.SoapSerializer.Serializer(System.Object)">
            <summary>
            Soap格式的序列化
            </summary>
            <param name="objectInstance"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Serializer.SoapSerializer.Deserialize(System.String)">
            <summary>
            Soap格式的反序列化
            </summary>
            <param name="returnString"></param>
            <returns></returns>
        </member>
        <member name="P:MB.Util.Serializer.SoapSerializer.DefaultInstance">
            <summary>
            默认的实例。
            </summary>
        </member>
        <member name="T:MB.Util.Serializer.ValueXmlSerializerAttribute">
            <summary>
            表示类中的某一属性或者字段是否可以进行XML 系列化。
            特别说明：对于继承了IList 接口的属性类型,对该属性的设置会影响容器内子对象的设置。
            </summary>
        </member>
        <member name="M:MB.Util.Serializer.ValueXmlSerializerAttribute.#ctor">
            <summary>
             表示类中的某一属性或者字段是否可以进行XML 系列化。
            </summary>
        </member>
        <member name="M:MB.Util.Serializer.ValueXmlSerializerAttribute.#ctor(System.Boolean)">
            <summary>
            表示类中的某一属性或者字段是否可以进行XML 系列化。
            </summary>
            <param name="start"></param>
        </member>
        <member name="P:MB.Util.Serializer.ValueXmlSerializerAttribute.Switch">
            <summary>
            判断该字段是否可以通过XML 配置来得到。
            </summary>
        </member>
        <member name="P:MB.Util.Serializer.ValueXmlSerializerAttribute.GeneralStruct">
            <summary>
            判断是否为结构，主要针对非常用类型的结构。（如Point 、Rectangle等类型的判断)
            </summary>
        </member>
        <member name="P:MB.Util.Serializer.ValueXmlSerializerAttribute.CreateByInstanceType">
            <summary>
            判断是否根据存储时的实例类型来创建实例。
            </summary>
        </member>
        <member name="P:MB.Util.Serializer.ValueXmlSerializerAttribute.ValueType">
            <summary>
            值的数据类型。
            </summary>
        </member>
        <member name="T:MB.Util.MethodTraceWithTime">
            <summary>
            方法调用中带有时间的日记跟踪
            </summary>
        </member>
        <member name="M:MB.Util.MethodTraceWithTime.#ctor(System.Boolean,System.String)">
            <summary>
            方法调用中带有时间的日记跟踪
            </summary>
            <param name="isDBCmdMonitor">表示是监控DB Cmd</param>
            <param name="cmdText">sql语句</param>
        </member>
        <member name="M:MB.Util.MethodTraceWithTime.#ctor(System.String,System.Object[])">
            <summary>
            方法调用中带有时间的日记跟踪
            </summary>
            <param name="methodName">调用方法的名称</param>
            <param name="parValues">方法调用的参数</param>
        </member>
        <member name="M:MB.Util.MethodTraceWithTime.GetExecutedTimes">
            <summary>
            获取已经执行的时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MethodTraceWithTime.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:MB.Util.Validated.PropertyValidates`1">
            <summary>
            列的描述信息集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MB.Util.Validated.PropertyValidates">
            <summary>
            列的描述信息集合.
            </summary>
        </member>
        <member name="M:MB.Util.Validated.PropertyValidates`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MB.Util.Validated.PropertyValidates`1.#ctor(System.Boolean)">
            <summary>
            判断是否创建快速访问Emit.
            </summary>
            <param name="createAC"></param>
        </member>
        <member name="M:MB.Util.Validated.PropertyValidates`1.Add(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Int32,System.Boolean)">
            <summary>
            创建一个新ColumnProperty 信息.
            </summary>
            <param name="columnName"></param>
            <param name="columnDescription"></param>
            <param name="length"></param>
            <param name="allowNull"></param>
            <param name="isKey"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Validated.PropertyValidates`1.Add(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Double,System.Double,System.Int32)">
            <summary>
            创建一个新ColumnProperty 信息.
            </summary>
            <param name="columnName"></param>
            <param name="description"></param>
            <param name="maxValue"></param>
            <param name="maxDecimalPlaces"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Validated.PropertyValidates`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            根据名称获取注册的信息。
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:MB.Util.Validated.PropertyValidates`1.QuickDataAccess">
            <summary>
            
            </summary>
        </member>
        <member name="T:MB.Util.Validated.PropertyValidatedInfo">
            <summary>
            对象属性字段验证信息。
            </summary>
        </member>
        <member name="P:MB.Util.Validated.PropertyValidatedInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:MB.Util.Validated.PropertyValidatedInfo.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:MB.Util.Validated.PropertyValidatedInfo.DataType">
            <summary>
            
            </summary>
        </member>
        <member name="P:MB.Util.Validated.PropertyValidatedInfo.MaxLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:MB.Util.Validated.PropertyValidatedInfo.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="T:MB.Util.Validated.ValidatedHelper">
            <summary>
            数据验证处理相关.
            </summary>
        </member>
        <member name="M:MB.Util.Validated.ValidatedHelper.EntityDataValidated``1(MB.Util.Validated.PropertyValidates{``0},``0)">
            <summary>
            实体对象验证。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Validated.ValidatedHelper.DataValidated(MB.Util.Validated.PropertyValidatedInfo,System.Object)">
            <summary>
            根据指定的ColumnPropertyInfo 判断输入的值是否符合要求。
            </summary>
            <param name="colPropertyInfo"></param>
            <param name="inputValue"></param>
            <param name="errMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.VolumPlayHelper.PlayVol(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据参数生成音频文件
            </summary>
            <param name="requestUrl"></param>
            <param name="volPlayParas"></param>
        </member>
        <member name="M:MB.Util.VolumPlayHelper.PlayVol(System.String)">
            <summary>
            根据参数生成音频文件
            </summary>
            <param name="requestUrl"></param>
            <param name="text"></param>
            <param name="volumn">音量 0->100从低到高</param>
            <param name="rate">5 -> -5 从快到慢 </param>
        </member>
        <member name="M:MB.Util.VolumPlayHelper.PlayVol(System.String,System.Int32,System.Int32)">
            <summary>
            根据参数生成音频文件
            </summary>
            <param name="text">播放的文字</param>
            <param name="volumn">音量 0->100从低到高</param>
            <param name="rate">5 -> -5 从快到慢 </param>
        </member>
        <member name="P:MB.Util.VolumPlayHelper.NewInstance">
            <summary>
            返回新的对象实例。
            </summary>
        </member>
        <member name="T:MB.Util.WcfCompress.WcfCompressManager">
            <summary>
            需要进行压缩处理的接口注册相关。
            </summary>
        </member>
        <member name="T:MB.Util.XmlConfig.ModelXmlConfigAttribute">
            <summary>
            表示某一实体类可以进行XML 文档配置来获取值。
            </summary>
        </member>
        <member name="M:MB.Util.XmlConfig.ModelXmlConfigAttribute.#ctor">
            <summary>
            表示某一实体类可以进行XML 文档配置来获取值。
            </summary>
        </member>
        <member name="M:MB.Util.XmlConfig.ModelXmlConfigAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            表示某一实体类可以进行XML 文档配置来获取值。
            </summary>
            <param name="nodePath">对应配置节点在XML 文档总的XML 节点路径。</param>
            <param name="byXmlNodeAttribute">判断该字段是否可以通过XML 配置来得到。</param>
        </member>
        <member name="P:MB.Util.XmlConfig.ModelXmlConfigAttribute.NodePath">
            <summary>
            对应配置节点在XML 文档总的XML 节点路径。
            </summary>
        </member>
        <member name="P:MB.Util.XmlConfig.ModelXmlConfigAttribute.ByXmlNodeAttribute">
            <summary>
            判断该字段是否可以通过XML 配置来得到。
            </summary>
        </member>
        <member name="T:MB.Util.XmlConfig.PropertyXmlConfigAttribute">
            <summary>
            表示类中的某一属性或者字段是否可以通过XML 配置来得到。
            </summary>
        </member>
        <member name="M:MB.Util.XmlConfig.PropertyXmlConfigAttribute.#ctor">
            <summary>
            表示类中的某一属性或者字段是否可以通过XML 配置来得到
            </summary>
        </member>
        <member name="M:MB.Util.XmlConfig.PropertyXmlConfigAttribute.#ctor(System.Type)">
            <summary>
            表示类中的某一属性或者字段是否可以通过XML 配置来得到
            </summary>
            <param name="referenceModelType"></param>
        </member>
        <member name="P:MB.Util.XmlConfig.PropertyXmlConfigAttribute.Switch">
            <summary>
            判断该字段是否可以通过XML 配置来得到。
            </summary>
        </member>
        <member name="P:MB.Util.XmlConfig.PropertyXmlConfigAttribute.ReferenceModelType">
            <summary>
            该配置的属性引用的其它实体类的类型。
            </summary>
        </member>
        <member name="P:MB.Util.XmlConfig.PropertyXmlConfigAttribute.MappingName">
            <summary>
            映射到XML 文件Node 上对应的名称。
            </summary>
        </member>
        <member name="P:MB.Util.XmlConfig.PropertyXmlConfigAttribute.NotExistsGroupNode">
            <summary>
            判断是否存在分组的节点，如果存在，该组下的所有节点都是该属性的子项。
            以决定是否与集合的方式来存储。
            </summary>
        </member>
        <member name="T:MB.Util.Compression">
            <summary>
            提供内部使用压缩字流的方法.
            </summary>
        </member>
        <member name="M:MB.Util.Compression.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.Util.Compression.Zip(System.Byte[])">
            <summary>
            压缩。
            提示：使用无损压缩和解压缩文件的行业标准算法. 此类不能用于压缩大于 4 GB 的文件 。
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.Compression.UnZip(System.Byte[])">
            <summary>
            解压缩。
            提示：使用无损压缩和解压缩文件的行业标准算法. 此类不能用于压缩大于 4 GB 的文件 。
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:MB.Util.Compression.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="T:MB.Util.DataFilterHelper">
            <summary>
            提供
            </summary>
        </member>
        <member name="M:MB.Util.DataFilterHelper.ValueCompare(System.Object,System.Object,System.Object,MB.Util.DataFilterConditions)">
            <summary>
            值之间的条件比较。
            </summary>
            <param name="srcValue"></param>
            <param name="desValue"></param>
            <param name="desValue2">在between 操作时才有效果</param>
            <param name="queryCondition"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.DataFilterHelper.GetConditionDescByVal(MB.Util.DataFilterConditions)">
            <summary>
            根据数据查询的条件标记获取该标记的描述。
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.DataFilterHelper.GetConditionsByType(System.String)">
            <summary>
            根据字段类型获取可用于操作的条件集合。
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="P:MB.Util.DataFilterHelper.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="T:MB.Util.DataFilterConditions">
            <summary>
            DataFilterConditions 字段查询的连接条件。
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.Include">
            <summary>
            包含
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.NotInclude">
            <summary>
            不包含
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.BenginsWith">
            <summary>
            以什么开始
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.EndsWith">
            <summary>
            以什么结束
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.Between">
            <summary>
            介于什么之间
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.NotBetween">
            <summary>
            不介于什么之间
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.GreaterOrEqual">
            <summary>
            大于或者等于
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.LessOrEqual">
            <summary>
            小于或者等于
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.IsNull">
            <summary>
            为空
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.IsNotNull">
            <summary>
            不为空
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.In">
            <summary>
            在指定范围内
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.NotIn">
            <summary>
            不在在指定范围内
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.Like">
            <summary>
            相似
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.NotLike">
            <summary>
            相似(非)
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.Special">
            <summary>
            特殊条件处理(特殊需要)
            </summary>
        </member>
        <member name="F:MB.Util.DataFilterConditions.SqlAppend">
            <summary>
            SQL 语句追加 
            </summary>
        </member>
        <member name="F:MB.Util.DataOrderType.Ascending">
            <summary>
            升序。
            </summary>
        </member>
        <member name="F:MB.Util.DataOrderType.Descending">
            <summary>
            降序。
            </summary>
        </member>
        <member name="F:MB.Util.DataOrderType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="T:MB.Util.DllFactory">
            <summary>
            DllFactory 动态创建业务处理操作对象。
            </summary>
        </member>
        <member name="M:MB.Util.DllFactory.CreateInstance(System.Type)">
            <summary>
            根据类型创建对象实例。
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.DllFactory.LoadObject(System.String,System.String)">
            <summary>
            通过反射实例化一个对象
            </summary>
            <param name="pName">类的名称</param>
            <param name="pAssemblyName">对应配件的名称</param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.DllFactory.LoadObject(System.String,System.Object[],System.String)">
            <summary>
            通过反射实例化一个对象
            </summary>
            <param name="pName">类的名称</param>
            <param name="pPars">加载类需要的参数描述信息</param>
            <param name="pAssemblyName">对应配件的名称</param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.DllFactory.LoadWithPartialName(System.String,System.Object[],System.String)">
            <summary>
            根据配件的名称从当前目录或者goal assembly 中查找并创建对象。
            </summary>
            <param name="objName"></param>
            <param name="objPars"></param>
            <param name="objAssemblyName">配件名称，不需要后缀名</param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.DllFactory.GetObjectType(System.String,System.String)">
            <summary>
            在指定的配件中获取对象类型。
            </summary>
            <param name="objName"></param>
            <param name="objAssemblyName"></param>
            <returns></returns>
        </member>
        <member name="P:MB.Util.DllFactory.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="T:MB.Util.General">
            <summary>
            General  系统通过函数。
            </summary>
        </member>
        <member name="M:MB.Util.General.#ctor">
            <summary>
            private constract function to prevent instance.
            </summary>
        </member>
        <member name="M:MB.Util.General.IsInDesignMode">
            <summary>
            判断当前界面是否在设计状态。
            备注： Control.DesigeMode 有 BUG
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.Util.General.CreateSystemType(System.String)">
            <summary>
            创建系统类型。
            默认情况下不支持Nullable Type
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.General.CreateSystemType(System.String,System.Boolean)">
            <summary>
            创建系统类型。
            默认情况下不支持NullAbleTalbe
            </summary>
            <param name="typeFullName"></param>
            <param name="supportNullable">判断是否支持Nullable 类型 </param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.General.GeApplicationDirectory">
            <summary>
            获取应用程序的当前目录。
            </summary>
            <returns></returns>
        </member>
        <!-- 对于成员“M:MB.Util.General.GetRelativePath(System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:MB.Util.General.GetRequestIP">
            <summary>
            该方法只能在服务端使用。
            获取请求的服务IP;
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.Util.General.LocalhostIPAddress">
            <summary>
            获取当前计算机IP地址。
            </summary>
            <returns></returns>
        </member>
        <member name="T:MB.Util.IniFile">
            <summary>
            Ini 文件操作类。
            </summary>
        </member>
        <member name="M:MB.Util.IniFile.#ctor">
            <summary>
            private construct function to prevent instance.
            </summary>
        </member>
        <member name="M:MB.Util.IniFile.ReadString(System.String,System.String,System.String,System.String)">
            <summary>
            读取数据。
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="def">缺省的值</param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.IniFile.WriteString(System.String,System.String,System.String,System.String)">
            <summary>
            写数据
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="strVal"></param>
        </member>
        <member name="M:MB.Util.IniFile.DelKey(System.String,System.String,System.String)">
            <summary>
            删除键值。
            </summary>
            <param name="section"></param>
            <param name="key"></param>
        </member>
        <member name="M:MB.Util.IniFile.DelSection(System.String,System.String)">
            <summary>
            删除Section。
            </summary>
            <param name="section"></param>
        </member>
        <member name="T:MB.Util.MyConvert">
            <summary>
            MBConvert 应用程序数据转换需要的公共处理函数。
            </summary>
        </member>
        <member name="M:MB.Util.MyConvert.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.Util.MyConvert.ConvertToNewTypeObject``1(System.Object)">
            <summary>
            根据属性值进行匹配，转换为新的对象。
            该方法主要解决服务器组件到本地组件的转换的问题。（临时解决方案，以后要修改为通用的XmlSerializer 方式）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="srcObject"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ConvertEntityToDataSet``1(System.Collections.Generic.IList{``0},System.String[])">
            <summary>
            把数据实体集合类转换为 客户可分析DataSet 的格式。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entitys"></param>
            <param name="convertPropertysName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ConvertEntityToDataSet(System.Type,System.Collections.IEnumerable,System.String[])">
            <summary>
            把数据实体集合类转换为 客户可分析DataSet 的格式。
            </summary>
            <param name="entitys"></param>
            <param name="convertPropertysName">需要转换的属性名称 (为空 将转换所有可读的属性)</param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ConvertDataSetToEntity``1(System.Data.DataSet,System.Collections.Generic.IList{``0},System.String[])">
            <summary>
            根据DataSet 转换为实体集合.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dsSource"></param>
            <param name="toEntitys"></param>
            <param name="excludeColumns"></param>
        </member>
        <member name="M:MB.Util.MyConvert.ToDataTable(System.Object,System.String)">
            <summary>
            把任意的数据类型转换成 DataTable 的格式
            </summary>
            <param name="dataSource"></param>
            <param name="dataMember"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ToDataView(System.Object,System.String)">
            <summary>
            把任意的数据类型转换成 DataTable 的格式
            </summary>
            <param name="dataSource"></param>
            <param name="dataMember"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ToGridViewSource(System.Object)">
            <summary>
            转换为网格浏览需要的视图。
            </summary>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ChangeType(System.Object,System.Type)">
            <summary>
            返回指定类型的对象值。
            </summary>
            <param name="val"></param>
            <param name="convertType"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ToDouble(System.Object)">
            <summary>
            得到双精度的数据
            </summary>
            <param name="pData"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ToInt(System.Object)">
            <summary>
            得到整形的数据
            </summary>
            <param name="pData"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ToInt64(System.Object)">
            <summary>
            得到整形的数据
            </summary>
            <param name="pData"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ToDecimal(System.Object,System.Int32)">
            <summary>
             把数据转换成 Decimal
            </summary>
            <param name="pData"></param>
            <param name="pDesLength"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ToDecimal(System.Object,System.Int32,System.Boolean)">
            <summary>
            把数据转换成 Decimal ,并转换为控制的指定长度
            </summary>
            <param name="pData"></param>
            <param name="pDesLength"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ToFloat(System.Object,System.Int32)">
            <summary>
            得到float的数据
            </summary>
            <param name="pData"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ToBool(System.Object)">
            <summary>
            转换为bool 的数据
            </summary>
            <param name="pData"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.BODHConvert(System.String,System.Int32,System.Int32)">
            <summary>
            2进制、8进制、10进制、16进制 之间的数据转换。
            </summary>
            <param name="valStr">需要转换的字符窜。</param>
            <param name="fromBase">它必须是2,8,10或者16</param>
            <param name="toBase">它必须是2,8,10或者16</param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.BinToDec(System.String)">
            <summary>
            2进制 转换为10进制。
            </summary>
            <param name="binStr"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.HexToDec(System.String)">
            <summary>
            16进制 转换为10进制。
            </summary>
            <param name="binStr"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.OcxToDec(System.String)">
            <summary>
            8进制 转换为10进制。
            </summary>
            <param name="binStr"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ImageToBase64String(System.Drawing.Image)">
            <summary>
            把图像文件转换成Base64String 类型
            </summary>
            <param name="pImage"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ImageToByte(System.Drawing.Image)">
            <summary>
            把图像文件转换成Byte[] 类型
            </summary>
            <param name="pImage"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.FileToByte(System.String)">
            <summary>
             把硬盘文件转换成Byte[] 类型格式
            </summary>
            <param name="pFileFullPath"> 报表文件完整的路径</param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.Base64StringToImage(System.String)">
            <summary>
            通过string 转换成Image文件格式的形式
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ByteToImage(System.Byte[])">
            <summary>
            通过Byte[] 字节流转换成Image文件格式的形式
            </summary>
            <param name="pByte"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ByteToFile(System.String,System.Byte[])">
            <summary>
            把Byte数组转换成文件格式并存储到本地硬盘中
            </summary>
            <param name="pFileFullPath">文件的完整路径</param>
            <param name="pByte">文件的字节流</param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ToColor(System.String)">
            <summary>
            根据颜色的名称或者Arg 转换为指定的颜色。
            </summary>
            <param name="colorNameOrArg">对于Arg来说，不同颜色之间用逗号分开。例如：202,203,102</param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ToSqlServerDateTime(System.DateTime)">
            <summary>
            转换为SQL SERVER 允许的 日期格式。
            </summary>
            <param name="dTime"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ConvertTsToDateTime(System.String)">
            <summary>
            时间戳转为C#日期格式
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyConvert.ConvertDtToTimpStamp(System.DateTime)">
            <summary>
            c#日期转换成时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="P:MB.Util.MyConvert.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="T:MB.Util.MyCustomAttributeLib">
            <summary>
            CustomAttributeLib 类客户化属性操作类。
            </summary>
        </member>
        <member name="M:MB.Util.MyCustomAttributeLib.GetEnumValueDesc(System.Object,System.Type)">
            <summary>
            得到枚举类型的描述
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyCustomAttributeLib.GetFieldDesc(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            根据fieldInfo 获取它对应的描述。
            </summary>
            <param name="field"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyCustomAttributeLib.GetFieldDesc(System.Type,System.String,System.Boolean)">
            <summary>
            根据对象的类型和类字段的名称获取它对应的描述。
            </summary>
            <param name="objType"></param>
            <param name="fieldName"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyCustomAttributeLib.GetFieldsDesc(System.Type,MB.Util.ClassFieldType,System.Boolean)">
            <summary>
            根据对象的type 获取它的所有field 的描述
            </summary>
            <param name="objType"></param>
            <param name="fTypes"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyCustomAttributeLib.GetPropertyDesc(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            获取指定PropertyInfo的描述。
            </summary>
            <param name="property"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyCustomAttributeLib.GetPropertyDesc(System.Type,System.String,System.Boolean)">
            <summary>
            根据对象的类型和类属性的名称获取它对应的描述。
            </summary>
            <param name="objType"></param>
            <param name="propertyName"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyCustomAttributeLib.GetPropertysDesc(System.Type,MB.Util.PropertyType,System.Boolean)">
            <summary>
            根据对的象type 获取该对象的所有 propertys 描述。
            </summary>
            <param name="objType"></param>
            <param name="fTypes"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="P:MB.Util.MyCustomAttributeLib.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="T:MB.Util.MyDataCache`2">
            <summary>
            MyDataCache 采取先进先出的方式存储数据并且限制数据存储的大小.
            备注：该类不适合在多线程下使用。
            </summary>
        </member>
        <member name="M:MB.Util.MyDataCache`2.#ctor">
            <summary>
             构造函数. ,默认情况下存储的最大值是100 个,每次移除的个数是20 个。
            </summary>
        </member>
        <member name="M:MB.Util.MyDataCache`2.#ctor(System.Int32,System.Int32)">
            <summary>
             构造函数.
            </summary>
            <param name="remove"></param>
            <param name="maxCapacity"></param>
        </member>
        <member name="M:MB.Util.MyDataCache`2.ContainsKey(`0)">
            <summary>
            判断键是否存在。
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyDataCache`2.Add(`0,`1)">
            <summary>
             往数据存储桶中增加一个数据。
            </summary>
            <param name="keyName"></param>
            <param name="data"></param>
        </member>
        <member name="P:MB.Util.MyDataCache`2.Item(`0)">
            <summary>
             this 操作方法....
            </summary>
        </member>
        <member name="P:MB.Util.MyDataCache`2.MaxCapacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:MB.Util.MyDataCache`2.RemoveCountOnFull">
            <summary>
            
            </summary>
        </member>
        <member name="T:MB.Util.MyMath">
            <summary>
            常用公共计算方法.
            </summary>
        </member>
        <member name="M:MB.Util.MyMath.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.Util.MyMath.SetRound(System.String,System.Int32)">
            <summary>
            由于1111111.525 * 100.0时得到的结果是1111111.52499999999999
            Math.Round出现问题，所以用自己计算过的四舍五入。
            </summary>
            <param name="data"></param>
            <param name="DesLength"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyMath.SetRound(System.Object,System.Int32)">
            <summary>
            四舍五入。
            </summary>
            <param name="pData"></param>
            <param name="pDesLength"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyMath.FormatStr(System.String,System.Int32,System.Char)">
            <summary>
            格式化字符窜
            </summary>
            <param name="pStr"></param>
            <param name="pLen"></param>
            <param name="pFormatChar"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyMath.FormatStrLeft(System.String,System.Int32,System.Char)">
            <summary>
            格式化字符窜 (把附加的字符加在前面)
            </summary>
            <param name="pStr"></param>
            <param name="pLen"></param>
            <param name="pFormatChar"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyMath.EnglishWeekToChinese(System.DateTime)">
            <summary>
             周的描述从英文转换为中文。
            </summary>
            <param name="pDate"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyMath.Dividend(System.Object,System.Object)">
            <summary>
            两个数相除  eliminates
            </summary>
            <param name="pDividend"></param>
            <param name="pDivisor"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyMath.Dividend(System.Object,System.Object,System.Int32)">
            <summary>
            两个数相除
            </summary>
            <param name="pDividend"></param>
            <param name="pDivisor"></param>
            <param name="pDesLength"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyMath.DividendToFloat(System.Object,System.Object)">
            <summary>
            两个数相除 
            </summary>
            <param name="pDividend"></param>
            <param name="pDivisor"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyMath.DividendToFloat(System.Object,System.Object,System.Int32)">
            <summary>
            两个数相除
            </summary>
            <param name="pDividend"></param>
            <param name="pDivisor"></param>
            <param name="pDesLength"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyMath.SumToInt32(System.Object,System.Object)">
            <summary>
            求两数的和
            </summary>
            <param name="pData1"></param>
            <param name="pData2"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyMath.SumToDecimal(System.Object,System.Object)">
            <summary>
            求两数的和
            </summary>
            <param name="pData1"></param>
            <param name="pData2"></param>
            <returns></returns>
        </member>
        <member name="P:MB.Util.MyMath.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="T:MB.Util.MyReflection">
            <summary>
            MyReflection 通过反射调用对象的属性和方法。
            </summary>
        </member>
        <member name="M:MB.Util.MyReflection.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.Util.MyReflection.CreateModelObject``1(System.Data.DataRow)">
            <summary>
             通过DataRow 创建一个实体对象。
            </summary>
            <param name="drData"></param>
            <param name="targetObjType"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.FillModelObjectNoCreate``1(``0,``0,System.String[])">
            <summary>
            把一个实体对象的值赋给另外一个对象。
            这里只是 Memberwise 值设置。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="orgEntity"></param>
            <param name="destEntity"></param>
            <param name="excludePros"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.FillModelObjectNoCreate(System.Object,System.Object,System.String[])">
            <summary>
            把一个实体对象的值赋给另外一个对象。
            这里只是 Memberwise 值设置。
            </summary>
            <param name="orgEntity"></param>
            <param name="destEntity"></param>
            <param name="excludePros"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.FillModelObject``1(``0,System.Data.DataRow)">
            <summary>
            把行值转换为实体对象值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityModel"></param>
            <param name="drData"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.FillModelObject``1(System.Object)">
            <summary>
            把一个实体的值转换为新的实体类型。（值复制并创建一个新的实体）
            2010-08-16 edit by chendc
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.InvokeMethodByName(System.Object,System.String,System.Object[])">
            <summary>
            通过名称来调用方法，不考虑方法的重载情况。
            该方法主要通过 方法的名称来查找入口点，不区分参数，
            
            </summary>
            <param name="rObj"></param>
            <param name="methodName"></param>
            <param name="paramVals"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            通过反射调用指定的方法。
            </summary>
            <param name="rObj"></param>
            <param name="methodName"></param>
            <param name="paramVals"></param>
        </member>
        <member name="M:MB.Util.MyReflection.CheckTypeExistsProperty(System.Type,System.String)">
            <summary>
            检查指定的类型是否包含指定的属性。
            </summary>
            <param name="dataType"></param>
            <param name="proName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.CheckObjectExistsProperty(System.Object,System.String)">
            <summary>
            判断对象中是否存在指定的属性。
            </summary>
            <param name="rObj"></param>
            <param name="proName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.CheckPropertyValueIsNull(System.Object,System.String)">
            <summary>
            检查对象中对应的属性值是否为空。
            </summary>
            <param name="rObj"></param>
            <param name="proName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.InvokePropertyForSet(System.Object,System.String,System.Object)">
            <summary>
            通过反射设置属性。
            </summary>
            <param name="rObj"></param>
            <param name="proName"></param>
            <param name="val"></param>
        </member>
        <member name="M:MB.Util.MyReflection.InvokePropertyForSet(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            通过反射设置属性。
            </summary>
            <param name="rObj"></param>
            <param name="proInfo"></param>
            <param name="val"></param>
        </member>
        <member name="M:MB.Util.MyReflection.InvokePropertyForGet``1(System.Object,System.String)">
            <summary>
            通过反射获取属性的值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rObj"></param>
            <param name="proName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.InvokePropertyForGet``1(System.Object,System.Reflection.PropertyInfo)">
            <summary>
             通过反射获取属性的值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rObj"></param>
            <param name="proInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.InvokePropertyForGet(System.Object,System.String)">
            <summary>
            通过反射获取属性的值。
            </summary>
            <param name="rObj"></param>
            <param name="proName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.InvokePropertyForGet(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            通过反射获取属性的值。
            </summary>
            <param name="rObj"></param>
            <param name="proName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.ObjectToPropertyValues(System.Object)">
            <summary>
            获取对象的所有属性值。（特殊值除外）
            所有的值都必须能写 而且能读
            </summary>
            <param name="rObj"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.SetByPropertyValues(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            反射设置对象值的特殊应用。
            特殊说明：不是通用的行为。
            批量设置对象的属性值。
            不管是值类型还是引用类型都会根据新对象的属性类型来创建复制或者创建一个新值。
            </summary>
            <param name="rObj"></param>
            <param name="proValues"></param>
        </member>
        <member name="M:MB.Util.MyReflection.PropertyMemberwiseClone(System.Object)">
            <summary>
             创建当前 Object 对象 的浅表副本（只复制属性的值）。
            </summary>
            <param name="rObj"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.ConvertValueType(System.Type,System.Object)">
            <summary>
            强制将值转换为指定类型
            </summary>
            <param name="propertyType">目标类型</param>
            <param name="valueType">值的类型</param>
            <param name="value">值</param>
        </member>
        <member name="M:MB.Util.MyReflection.GetPropertyTypeWithoutNullable(System.Type)">
            <summary>
            获取类型,如果类型为Nullable(of T)，则返回Nullable(of T)的基础类型
            </summary>
            <param name="propertyType">需要转换的类型</param>
        </member>
        <member name="M:MB.Util.MyReflection.GetPropertyType(System.Object,System.String)">
            <summary>
            获取某个对象的属性类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.MyReflection.GetPropertyType(System.Type)">
            <summary>
            获取类型,如果类型为Nullable(of T)，则返回Nullable(of T)的基础类型
            </summary>
            <param name="propertyType">需要转换的类型</param>
        </member>
        <member name="P:MB.Util.MyReflection.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="T:MB.Util.ClassFieldType">
            <summary>
            类字段类型。
            </summary>
        </member>
        <member name="T:MB.Util.PropertyType">
            <summary>
            成员类型。
            </summary>
        </member>
        <member name="T:MB.Util.SingletonProvider`1">
            <summary>
            一个泛型来实现的单例模式重用。
            对于提供给其他人使用的单例模式 不能使用该方法，需要通过硬编码的方式来进行约束。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MB.Util.TraceEx">
            <summary>
            Trace 中相应的功能先不增加
            </summary>
        </member>
        <member name="M:MB.Util.TraceEx.Write(System.String,System.String[])">
            <summary>
            把运行的代码过程记录下来
            </summary>
            <param name="msgStr"></param>
            <param name="formatters"></param>
        </member>
        <member name="M:MB.Util.TraceEx.Write(System.String)">
            <summary>
            把运行的代码过程记录下来
            </summary>
            <param name="msgStr"></param>
        </member>
        <member name="M:MB.Util.TraceEx.Write(System.String,MB.Util.APPMessageType)">
            <summary>
            把运行的代码过程记录下来
            </summary>
            <param name="msgStr"></param>
            <param name="msgLevel"></param>
        </member>
        <member name="M:MB.Util.TraceEx.WriteIf(System.Boolean,System.String)">
            <summary>
             根据条件把运行的代码过程记录下来
            </summary>
            <param name="condition"></param>
            <param name="msgStr"></param>
        </member>
        <member name="M:MB.Util.TraceEx.WriteIf(System.Boolean,System.String,MB.Util.APPMessageType)">
            <summary>
            根据条件把运行的代码过程记录下来
            </summary>
            <param name="condition">condition ：如果要禁止显示消息，那么为true,否则为false</param>
            <param name="msgStr"></param>
            <param name="msgLevel"></param>
        </member>
        <member name="M:MB.Util.TraceEx.Assert(System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="condition">condition ：如果要禁止显示消息，那么为true,否则为false  </param>
            <param name="msg"></param>
        </member>
        <member name="M:MB.Util.TraceEx.Assert(System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="condition">condition ：如果要禁止显示消息，那么为true,否则为false</param>
            <param name="msg"></param>
            <param name="detailMsg"></param>
        </member>
        <member name="M:MB.Util.TraceEx.SaveIf(System.Boolean,System.String,MB.Util.APPMessageType)">
            <summary>
            SaveIf
            </summary>
            <param name="condition"> condition ：如果要禁止写入消息，那么为true,否则为false</param>
            <param name="msgStr"></param>
            <param name="msgLevel"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.TraceEx.GetErrorMessageByType(MB.Util.APPMessageType)">
            <summary>
            根据错误的类型获取对应的错误描述信息。
            </summary>
            <param name="msgLevel"></param>
            <returns></returns>
        </member>
        <member name="T:MB.Util.TraceEx.LogsConsume">
            <summary>
            应用程序日志消费处理
            </summary>
        </member>
        <member name="M:MB.Util.TraceEx.LogsConsume.IniTimerIfNull">
            <summary>
            初始化内存日志处理后台任务。
            </summary>
        </member>
        <member name="T:MB.Util.XmlConfig.XmlConfigHelper">
            <summary>
            实体对象XML 文件配置处理相关。
            主要针对从XML 文件获取配置数据处理相关。
            </summary>
        </member>
        <member name="F:MB.Util.XmlConfig.XmlConfigHelper.SQL_CONFIG_NODE">
            <summary>
            SQL stirng 对应的配置信息。
            </summary>
        </member>
        <member name="M:MB.Util.XmlConfig.XmlConfigHelper.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.Util.XmlConfig.XmlConfigHelper.CreateConfigInfoByXmlDoc``1(System.String,System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            获取单个配置项。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyAttributeName"></param>
            <param name="xmlFileFullName"></param>
            <param name="nodeListPath"></param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.XmlConfig.XmlConfigHelper.CreateConfigInfo``1(System.String,System.String,System.String,System.String)">
            <summary>
            获取单个配置项。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyAttributeName"></param>
            <param name="xmlFileFullName"></param>
            <param name="nodeListPath"></param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.XmlConfig.XmlConfigHelper.CreateEntityList``1(System.String,System.String,System.String)">
            <summary>
             根据XML 配置文件和.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyAttributeName"></param>
            <param name="xmlFileFullName"></param>
            <param name="nodeListPath"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.XmlConfig.XmlConfigHelper.CreateEntityList``1(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyAttributeName"></param>
            <param name="xmlFileFullName"></param>
            <param name="nodeListPath"></param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.XmlConfig.XmlConfigHelper.CreateEntityList``1(System.String,System.String,System.String,System.String,System.Xml.XmlNode@)">
            <summary>           
             根据XML 配置文件和.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyAttributeName"></param>
            <param name="xmlFileFullName"></param>
            <param name="nodeListPath"></param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.XmlConfig.XmlConfigHelper.FillEntityValue(System.Object,System.Xml.XmlNode)">
            <summary>
            根据XML 节点设置实体对象的属性或者字段的值。
            </summary>
            <param name="entity"></param>
            <param name="xmlNode"></param>
        </member>
        <member name="M:MB.Util.XmlConfig.XmlConfigHelper.LoadXmlConfigFile(System.String)">
            <summary>
            加载XML 配置文档。
            </summary>
            <param name="xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MB.Util.XmlConfig.XmlConfigHelper.BuildXmlConfigFileFullName(System.String)">
            <summary>
            根据XML 文件名称构建完整的XML 配置文件完整路径。
            </summary>
            <param name="xmlFileName"></param>
            <returns></returns>
        </member>
        <member name="P:MB.Util.XmlConfig.XmlConfigHelper.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
    </members>
</doc>
