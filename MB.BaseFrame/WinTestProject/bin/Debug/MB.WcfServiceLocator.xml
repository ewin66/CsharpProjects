<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MB.WcfServiceLocator</name>
    </assembly>
    <members>
        <member name="M:MB.WcfServiceLocator.QueryBehaviorScope.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:MB.WcfServiceLocator.WcfClientHelper">
            <summary>
            提供WCF 客户端需要的Public 函数。
            </summary>
        </member>
        <member name="M:MB.WcfServiceLocator.WcfClientHelper.#ctor">
            <summary>
            定义一个protected 的构造函数以阻止外部直接创建。
            </summary>
        </member>
        <member name="M:MB.WcfServiceLocator.WcfClientHelper.InvokeServerMethod(System.Object,System.String,System.Object[])">
            <summary>
            通过反射公共调用WCF 服务端的方法。
            </summary>
            <param name="serverRule"></param>
            <param name="methodName"></param>
            <param name="paramVals"></param>
            <returns></returns>
        </member>
        <member name="P:MB.WcfServiceLocator.WcfClientHelper.Instance">
            <summary>
            多线程安全的单实例模式。
            由于对外公布，该实现方法不使用SingletionProvider 的当时来进行。
            </summary>
        </member>
        <member name="T:MB.WcfClient.SystemCode">
            <summary>
            关联系统的系统编码
            用来和证书中的系统编码做匹配，以获取关联系统的服务地址
            </summary>
        </member>
        <member name="F:MB.WcfClient.SystemCode.Main">
            <summary>
            主中间层
            </summary>
        </member>
        <member name="F:MB.WcfClient.SystemCode.MB001">
            <summary>
            分销中间层
            </summary>
        </member>
        <member name="F:MB.WcfClient.SystemCode.MB002">
            <summary>
            物流
            </summary>
        </member>
        <member name="F:MB.WcfClient.SystemCode.MBInterface001">
            <summary>
            分销的接口
            </summary>
        </member>
        <member name="F:MB.WcfClient.SystemCode.MBInterface002">
            <summary>
            物流的接口
            </summary>
        </member>
        <member name="F:MB.WcfClient.SystemCode.MBQueue">
            <summary>
            通过WCF访问Queue
            测试环境 http://10.100.20.102:55672/#/exchanges
            生产环境 http://mb1.live.mb.com:55672/#/
            </summary>
        </member>
        <member name="F:MB.WcfClient.SystemCode.MBDataExchange">
            <summary>
            数据交换平台，没有接口给其他系统调用的
            测试 http://10.100.20.100:8010/HomePage/HomeFrame.aspx
            生产 http://10.100.25.40:9001/Index.aspx?ReturnUrl=%2f  
            </summary>
        </member>
        <member name="F:MB.WcfClient.SystemCode.MBPos">
            <summary>
            POS接口
            </summary>
        </member>
        <member name="T:MB.WcfClient.WcfClientInvokeAttribute">
            <summary>
            WCF 客户端方法调用配置。
            特别说明：配置了该属性的类，那么该属性下的所有方法都使用同样的相对路径来调用WCF 服务。
            原则上调用WCF 的服务必须通过本地的业务来调用。
            </summary>
        </member>
        <member name="M:MB.WcfClient.WcfClientInvokeAttribute.#ctor(System.Type,System.String)">
            <summary>
            WCF 客户端方法调用配置。
            </summary>
            <param name="wcfClientType">WCF 服务客户端代理</param>
            <param name="relativePath">WCF 服务访问的绝对路径</param>
        </member>
        <member name="M:MB.WcfClient.WcfClientInvokeAttribute.#ctor(System.Type,System.String,MB.WcfClient.SystemCode)">
            <summary>
            WCF 客户端方法调用配置。
            </summary>
            <param name="wcfClientType">WCF 服务客户端代理</param>
            <param name="relativePath">WCF 服务访问的绝对路径</param>
            <param name="code">关联系统代码</param>
        </member>
        <member name="P:MB.WcfClient.WcfClientInvokeAttribute.WcfClientType">
            <summary>
            WCF 服务客户端代理类型。
            </summary>
        </member>
        <member name="P:MB.WcfClient.WcfClientInvokeAttribute.RelativePath">
            <summary>
            WCF 服务调用的相对相对路径，默认情况下为WCF 接口的完整路径名称。
            </summary>
        </member>
        <member name="P:MB.WcfClient.WcfClientInvokeAttribute.SystemCode">
            <summary>
            WCF服务的系统编码，该编码需要与客户端证书中的系统编码相一致
            请使用WcfClientInvokeAttribute中的常量来赋值
            </summary>
        </member>
        <member name="T:MB.WcfClient.WcfClientFactory">
            <summary>
            WCF 服务客户端调用公共处理函数。
            </summary>
        </member>
        <member name="M:MB.WcfClient.WcfClientFactory.CreateWcfClient``1(System.Object)">
            <summary>
            创建带有Windows 安全访问Wcf 客户端代理。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientRule"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WcfClient.WcfClientFactory.CreateWcfClient``1(System.Object,MB.Util.Model.ServerConfigInfo)">
            <summary>
            创建带有Windows 安全访问Wcf 客户端代理。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientRule"></param>
            <param name="serverInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WcfClient.WcfClientFactory.CreateWcfClient``1(System.Object,MB.Util.Model.WcfCredentialInfo)">
            <summary>
            创建带有Windows 安全访问Wcf 客户端代理。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientRule"></param>
            <param name="credentialInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MB.WcfClient.WcfClientFactory.CreateWcfClient``1(System.String,MB.WcfClient.SystemCode)">
            <summary>
            根据指定的系统编号，直接寻找WCF客户端地址
            </summary>
            <typeparam name="T">客户端代理实例</typeparam>
            <param name="relativePath">相对地址</param>
            <param name="code">系统编码</param>
            <returns></returns>
        </member>
        <member name="M:MB.WcfClient.WcfClientFactory.CreateWcfClient``1(System.String,MB.WcfClient.SystemCode,System.String)">
            <summary>
            根据指定的系统编号，直接寻找WCF客户端地址
            </summary>
            <typeparam name="T">客户端代理实例</typeparam>
            <param name="relativePath">相对地址</param>
            <param name="code">系统编码</param>
            <param name="bindingCfgName">自己指定绑定的名称</param>
            <returns></returns>
        </member>
        <member name="M:MB.WcfClient.WcfClientFactory.resolveSubSystemCredentialInfo(MB.WcfClient.SystemCode,System.String,MB.Util.Model.WcfCredentialInfo)">
            <summary>
            根据证书中的appendDetail和客户端配置的WcfClientInvokeAttribute -> SystemCode
            来解析出关联系统的服务连接
            </summary>
            <param name="code">客户端的配置System Code</param>
            <param name="appendDetail">证书中的appendDetail信息以分号分隔</param>
            <returns>关联系统的服务的信息</returns>
        </member>
        <member name="T:MB.WcfServiceLocator.ClientChannel.WcfClientProxyScope`1">
            <summary>
            返回WcfClient
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientProxyScope`1.#ctor(`0)">
            <summary>
            construct function...
            </summary>
            <param name="tChannel">客户端通道</param>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientProxyScope`1.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:MB.WcfServiceLocator.ClientChannel.WcfClientProxyScope`1.ClientProxy">
            <summary>
            当前客户端代理
            </summary>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.EndpointMessageBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            AddBindingParameters
            </summary>
            <param name="endpoint"></param>
            <param name="bindingParameters"></param>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.EndpointMessageBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            ApplyClientBehavior
            </summary>
            <param name="endpoint"></param>
            <param name="clientRuntime"></param>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.EndpointMessageBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
            ApplyDispatchBehavior
            </summary>
            <param name="endpoint"></param>
            <param name="endpointDispatcher"></param>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.EndpointMessageBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Validate
            </summary>
            <param name="endpoint"></param>
        </member>
        <member name="T:MB.WcfServiceLocator.ClientChannel.WcfServiceAttribute">
            <summary>
            在WCF的接口定义访问接口服务的一些信息
            </summary>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfServiceAttribute.#ctor(System.String)">
            <summary>
            WCF服务路径配置
            </summary>
            <param name="relativePath">WCF 服务访问的相对路径</param>
            <param name="credentialFileName">服务访问证书名称</param>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfServiceAttribute.#ctor(System.String,System.String)">
            <summary>
            WCF服务路径配置
            </summary>
            <param name="relativePath">WCF 服务访问的相对路径</param>
            <param name="credentialFileName">服务访问证书名称</param>
        </member>
        <member name="P:MB.WcfServiceLocator.ClientChannel.WcfServiceAttribute.RelativePath">
            <summary>
            WCF 服务调用的相对相对路径，默认情况下为WCF 接口的完整路径名称。
            </summary>
        </member>
        <member name="P:MB.WcfServiceLocator.ClientChannel.WcfServiceAttribute.CredentialFileName">
            <summary>
            服务调用证书
            </summary>
        </member>
        <member name="T:MB.WcfServiceLocator.ClientChannel.WcfClientInvokeCfgInfo">
            <summary>
            Wcf客户端调用时的配置信息
            可以从接口属性，或者在编码时注入
            </summary>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientInvokeCfgInfo.#ctor(System.String)">
            <summary>
            WCF服务路径配置
            </summary>
            <param name="relativePath">WCF 服务访问的相对路径</param>
            <param name="credentialFileName">服务访问证书名称</param>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientInvokeCfgInfo.#ctor(System.String,System.String)">
            <summary>
            WCF服务路径配置
            </summary>
            <param name="relativePath">WCF 服务访问的相对路径</param>
            <param name="credentialFileNameOrServerName">服务访问证书名称或者是服务的域名</param>
        </member>
        <member name="P:MB.WcfServiceLocator.ClientChannel.WcfClientInvokeCfgInfo.RelativePath">
            <summary>
            WCF 服务调用的相对相对路径，默认情况下为WCF 接口的完整路径名称。
            </summary>
        </member>
        <member name="P:MB.WcfServiceLocator.ClientChannel.WcfClientInvokeCfgInfo.CredentialFileNameOrServerName">
            <summary>
            服务访问证书名称或者是服务的域名
            </summary>
        </member>
        <member name="T:MB.WcfServiceLocator.ClientChannel.WcfServiceInvokeScope">
            <summary>
            服务调用环境范围
            </summary>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfServiceInvokeScope.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfServiceInvokeScope.#ctor(System.Collections.Generic.List{System.ServiceModel.Dispatcher.IClientMessageInspector})">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfServiceInvokeScope.Reset">
            <summary>
            重新进行服务调用性能计数
            </summary>
        </member>
        <member name="P:MB.WcfServiceLocator.ClientChannel.WcfServiceInvokeScope.Current">
            <summary>
            当前服务调用有效的环境变量信息。
            </summary>
        </member>
        <member name="T:MB.WcfServiceLocator.ClientChannel.WcfServiceInvoke">
            <summary>
            服务调用环境
            </summary>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfServiceInvoke.#ctor">
            <summary>
            ServiceInvokeEnvironment
            </summary>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfServiceInvoke.AddRef">
            <summary>
            增加Scope深度的计数器，每增加一层ServiceInvokeScope,计数器+1
            </summary>
            <returns></returns>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfServiceInvoke.AddClientMessageInspectors(System.Collections.Generic.List{System.ServiceModel.Dispatcher.IClientMessageInspector})">
            <summary>
            增加IClientMessageInspector
            </summary>
            <param name="clientMessageInspectors">client message inspector的实现集合</param>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfServiceInvoke.Dispose">
            <summary>
            Decrement the reference count and, if refcount is 0, Dispose all
            </summary>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfServiceInvoke.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:MB.WcfServiceLocator.ClientChannel.WcfServiceInvoke.RuningWatch">
            <summary>
            初始化调用的时间
            </summary>
        </member>
        <member name="P:MB.WcfServiceLocator.ClientChannel.WcfServiceInvoke.ClientMessageInspector">
            <summary>
            ClientMessageInspector
            </summary>
        </member>
        <member name="T:MB.WcfServiceLocator.ClientChannel.WcfClientChannelFactory">
            <summary>
            WCF客户端代理访问生成工厂类，不生成客户端代理，直接通过接口定义访问服务端
            </summary>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientChannelFactory.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientChannelFactory.RegisterTypeIfMissing(System.Type)">
            <summary>
            根据WCF接口类型上的属性，注册wcf调用配置信息
            </summary>
            <param name="iServiceType">需要注册的类型</param>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientChannelFactory.RegisterTypeIfMissing(System.Type,System.String)">
            <summary>
            只注册wcf配置调用信息中的相对路径
            </summary>
            <param name="iServiceType">要注册的Wcf接口的类型</param>
            <param name="relativePath">相对路径</param>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientChannelFactory.RegisterTypeIfMissing(System.Type,MB.WcfServiceLocator.ClientChannel.WcfClientInvokeCfgInfo)">
            <summary>
            注册wcf配置调用信息
            </summary>
            <param name="iServiceType">要注册的Wcf接口的类型</param>
            <param name="invokeCfg">wcf客户端调用配置信息</param>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientChannelFactory.CreateWcfClientProxy``1">
            <summary>
            根据指定的系统编号，直接寻找WCF客户端地址
            </summary>
            <typeparam name="T">客户端代理实例</typeparam>
            <param name="code">系统编码</param>
            <param name="bindingCfgName">自己指定绑定的名称,如果绑定为空，则根据绑定类型和配置项来决定绑定配置</param>
            <returns>WCF接口调用类型</returns>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientChannelFactory.CreateWcfClientProxy``1(System.String)">
            <summary>
            根据指定的系统编号，直接寻找WCF客户端地址
            </summary>
            <typeparam name="T">客户端代理实例</typeparam>
            <param name="code">系统编码</param>
            <param name="bindingCfgName">自己指定绑定的名称,如果绑定为空，则根据绑定类型和配置项来决定绑定配置</param>
            <returns>WCF接口调用类型</returns>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientChannelFactory.checkAndRegisterWcfInvokeCfgInfo(System.Type)">
            <summary>
            自动注册
            </summary>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientChannelFactory.getWcfServiceAttribute(System.Type)">
            <summary>
            得到WcfServiceAttribute
            </summary>
            <param name="iServiceType">WcfServiceAttribute使用的类型</param>
            <returns>WcfServiceAttribute</returns>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientChannelFactory.createWcfCredentialByCfgAttribute(MB.WcfServiceLocator.ClientChannel.WcfClientInvokeCfgInfo)">
            <summary>
            根据接口类型的配置，返回wcf的访问信息和安全信息
            </summary>
            <param name="wcfClientCfgInfo">wcf类型的配置信息</param>
            <returns>wcf的访问信息和安全信息</returns>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientChannelFactory.InvokeWcfMethod``1(System.Action{``0})">
            <summary>
            调用WCF接口方法
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <param name="execute">执行委托</param>
        </member>
        <member name="M:MB.WcfServiceLocator.ClientChannel.WcfClientChannelFactory.InvokeWcfMethod``2(System.Func{``0,``1})">
            <summary>
            调用WCF接口方法
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="execute">执行委托</param>
            <returns>返回值</returns>
        </member>
        <member name="P:MB.WcfServiceLocator.ClientChannel.WcfClientChannelFactory.ClientMessageInspectors">
            <summary>
            自定义的Client Message Inspectors, 继承自IClientMessageInspector
            </summary>
        </member>
    </members>
</doc>
